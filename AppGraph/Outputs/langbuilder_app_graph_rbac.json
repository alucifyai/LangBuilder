{
  "app_graph": {
    "metadata": {
      "name": "LangBuilder RBAC-Enhanced Application Graph",
      "version": "3.0.0",
      "description": "Complete application graph enhanced with Role-Based Access Control (RBAC) featuring custom roles, fine-grained permissions, and enterprise-grade security",
      "last_updated": "2025-09-02",
      "analysis_source": "Complete codebase analysis including MCP support, Voice Mode, File V2 features, RBAC preparation, and comprehensive UI/UX components",
      "node_counts": {
        "schema_nodes": 21,
        "interface_nodes": 44,
        "logic_nodes": 30,
        "test_nodes": 24,
        "total_edges": 165,
        "total_nodes": 119
      },
      "rbac_features": [
        "Custom role creation and management",
        "Fine-grained permission system",
        "Multi-level permission scopes",
        "SSO integration support",
        "Audit logging and compliance",
        "Group-based access control",
        "Infrastructure-as-Code configuration"
      ],
      "rbac_additions": {
        "new_schema_entities": 6,
        "new_rbac_features": [
          "Custom role management with system and user-defined roles",
          "Fine-grained permission system with 30+ permission types",
          "Multi-level scoping (Global, Workspace, Project, Resource)",
          "Group-based access control with SSO synchronization",
          "Comprehensive audit logging for compliance",
          "Role assignment with expiration and scope context"
        ]
      },
      "rbac_edge_additions": {
        "schema_relationships": 11,
        "interface_navigation": 6,
        "logic_dependencies": 6,
        "data_operations": 5,
        "interface_logic_calls": 5,
        "modified_existing": 4,
        "test_validations": 4,
        "total_new_edges": 41
      }
    },
    "nodes": {
      "schema_nodes": [
        {
          "id": "user_entity",
          "type": "schema",
          "name": "User",
          "description": "User entity with authentication, profile management, and system access control",
          "path": "src/backend/base/langflow/services/database/models/user/model.py",
          "graphql_schema": "type User {\n  id: UUID! @primary\n  username: String! @unique @indexed\n  password: String!\n  email: String @unique @indexed\n  is_active: Boolean! @default(false)\n  is_superuser: Boolean! @default(false)\n  profile_image: String\n  created_at: DateTime! @default(now)\n  updated_at: DateTime! @default(now)\n  last_login_at: DateTime\n  store_api_key: String\n  optins: JSON @default({github_starred: false, dialog_dismissed: false, discord_clicked: false})\n  \n  # RBAC Enhancements\n  sso_provider: String @indexed\n  sso_external_id: String @indexed\n  default_role: Role @foreign(default_role_id)\n  default_role_id: UUID @foreign(role.id)\n  is_service_account: Boolean! @default(false)\n  \n  # Relationships\n  api_keys: [ApiKey!]! @cascade(delete)\n  flows: [Flow!]!\n  variables: [Variable!]! @cascade(delete) \n  folders: [Folder!]! @cascade(delete)\n  files: [File!]!\n  \n  # RBAC Relationships\n  role_assignments: [RoleAssignment!]!\n  group_memberships: [GroupMember!]!\n  created_groups: [Group!]!\n  granted_role_assignments: [RoleAssignment!]!\n  audit_logs_as_actor: [AuditLog!]!\n  audit_logs_as_target: [AuditLog!]!\n  \n  @@unique([sso_provider, sso_external_id])\n}",
          "color": "#FFA500",
          "rbac_modifications": "Enhanced with group memberships and role assignments"
        },
        {
          "id": "api_key_entity",
          "type": "schema",
          "name": "ApiKey",
          "description": "API authentication credentials for external system access and integration",
          "path": "src/backend/base/langflow/services/database/models/api_key/model.py",
          "graphql_schema": "type ApiKey {\n  id: UUID! @primary\n  name: String @indexed\n  api_key: String! @unique @indexed\n  created_at: DateTime! @default(now)\n  last_used_at: DateTime\n  total_uses: Int! @default(0)\n  is_active: Boolean! @default(true)\n  \n  # Foreign Keys\n  user_id: UUID! @indexed @foreign(user.id)\n  user: User!\n}",
          "color": "#808080"
        },
        {
          "id": "flow_entity",
          "type": "schema",
          "name": "Flow",
          "description": "AI workflow definition with components, execution logic, and MCP integration support",
          "path": "src/backend/base/langflow/services/database/models/flow/model.py",
          "graphql_schema": "type Flow {\n  id: UUID! @primary\n  name: String! @indexed\n  description: String @indexed\n  data: JSON  # Contains nodes and edges structure\n  icon: String  # Emoji or lucide icon\n  icon_bg_color: String  # Hex color starting with #\n  gradient: String\n  is_component: Boolean @default(false)\n  updated_at: DateTime @default(now)\n  webhook: Boolean @default(false)\n  endpoint_name: String @unique @indexed  # Alphanumeric with hyphens/underscores\n  tags: [String!] @default([])\n  locked: Boolean @default(false)\n  mcp_enabled: Boolean @default(false)  # MCP server exposure\n  action_name: String\n  action_description: String\n  access_type: AccessTypeEnum! @default(PRIVATE)  # PRIVATE or PUBLIC\n  fs_path: String  # File system path\n  \n  # RBAC Enhancements\n  owner_id: UUID! @foreign(user.id) @indexed\n  visibility: FlowVisibility! @default(PRIVATE)\n  permission_template: PermissionTemplate @default(OWNER_FULL_ACCESS)\n  requires_approval: Boolean! @default(false)\n  \n  # Foreign Keys\n  user_id: UUID @indexed @foreign(user.id)  # Legacy field\n  user: User\n  folder_id: UUID @indexed @foreign(folder.id)\n  folder: Folder\n  \n  # RBAC Relationships\n  owner: User!\n  collaborators: [FlowCollaborator!]!\n  permission_scopes: [PermissionScope!]!\n  \n  # Unique Constraints\n  @@unique([user_id, name])\n  @@unique([user_id, endpoint_name])\n}\n\ntype FlowCollaborator {\n  flow_id: UUID! @foreign(flow.id)\n  user_id: UUID! @foreign(user.id)\n  role: CollaboratorRole! @default(VIEWER)\n  added_by: UUID! @foreign(user.id)\n  added_at: DateTime! @default(now)\n  \n  flow: Flow!\n  user: User!\n  added_by_user: User!\n  \n  @@unique([flow_id, user_id])\n}\n\nenum FlowVisibility {\n  PRIVATE\n  TEAM\n  ORGANIZATION\n  PUBLIC\n}\n\nenum PermissionTemplate {\n  OWNER_FULL_ACCESS\n  TEAM_COLLABORATIVE\n  READ_ONLY_SHARING\n  CUSTOM\n}\n\nenum CollaboratorRole {\n  OWNER\n  EDITOR\n  VIEWER\n  EXECUTOR\n}",
          "color": "#FFA500",
          "rbac_modifications": "Added permission scopes and collaboration features"
        },
        {
          "id": "folder_entity",
          "type": "schema",
          "name": "Folder",
          "description": "Hierarchical folder organization system for flows and project management",
          "path": "src/backend/base/langflow/services/database/models/folder/model.py",
          "graphql_schema": "type Folder {\n  id: UUID! @primary\n  name: String! @indexed\n  description: String\n  auth_settings: JSON  # Authentication settings for the folder/project\n  \n  # RBAC Enhancements\n  is_workspace: Boolean! @default(false)\n  workspace_type: WorkspaceType @default(PERSONAL)\n  permission_inheritance: Boolean! @default(true)\n  default_permissions: JSON  # Default permission template\n  \n  # Foreign Keys\n  parent_id: UUID @foreign(folder.id)\n  parent: Folder\n  user_id: UUID @foreign(user.id)\n  user: User!\n  \n  # RBAC Relationships\n  workspace_members: [WorkspaceMember!]!\n  permission_scopes: [PermissionScope!]!\n  \n  # Relationships\n  children: [Folder!]!\n  flows: [Flow!]! @cascade(delete)\n  \n  # Unique Constraints\n  @@unique([user_id, name])\n}\n\ntype WorkspaceMember {\n  workspace_id: UUID! @foreign(folder.id)\n  user_id: UUID! @foreign(user.id)\n  role: WorkspaceRole! @default(MEMBER)\n  added_by: UUID! @foreign(user.id)\n  added_at: DateTime! @default(now)\n  \n  workspace: Folder!\n  user: User!\n  added_by_user: User!\n  \n  @@unique([workspace_id, user_id])\n}\n\nenum WorkspaceType {\n  PERSONAL\n  TEAM\n  ORGANIZATION\n  ENTERPRISE\n}\n\nenum WorkspaceRole {\n  OWNER\n  ADMIN\n  MEMBER\n  GUEST\n}",
          "color": "#FFA500",
          "rbac_modifications": "Enhanced with workspace-level permission management"
        },
        {
          "id": "variable_entity",
          "type": "schema",
          "name": "Variable",
          "description": "Encrypted variable storage for credentials and sensitive configuration data",
          "path": "src/backend/base/langflow/services/database/models/variable/model.py",
          "graphql_schema": "type Variable {\n  id: UUID! @primary\n  name: String!\n  value: String! @encrypted  # Encrypted value\n  type: String  # e.g., \"CREDENTIAL\"\n  default_fields: [String!]\n  created_at: DateTime @default(now)\n  updated_at: DateTime\n  \n  # Foreign Keys\n  user_id: UUID! @foreign(user.id)\n  user: User!\n}",
          "color": "#808080"
        },
        {
          "id": "message_entity",
          "type": "schema",
          "name": "Message",
          "description": "Chat message storage with support for rich content, files, and voice mode integration",
          "path": "src/backend/base/langflow/services/database/models/message/model.py",
          "graphql_schema": "type Message {\n  id: UUID! @primary\n  timestamp: DateTime! @default(now)\n  sender: String!\n  sender_name: String!\n  session_id: String!\n  text: String!\n  files: [String!] @default([])\n  error: Boolean! @default(false)\n  edit: Boolean! @default(false)\n  properties: JSON  # Properties object\n  category: String! @default(\"message\")\n  content_blocks: [JSON!] @default([])  # Voice Mode support\n  \n  # Foreign Keys\n  flow_id: UUID @foreign(flow.id)\n}",
          "color": "#808080"
        },
        {
          "id": "transaction_entity",
          "type": "schema",
          "name": "Transaction",
          "description": "Flow execution transaction logging with input/output tracking and performance monitoring",
          "path": "src/backend/base/langflow/services/database/models/transactions/model.py",
          "graphql_schema": "type Transaction {\n  id: UUID! @primary\n  timestamp: DateTime! @default(now)\n  vertex_id: String!  # ID of the vertex/node in the flow\n  target_id: String\n  inputs: JSON  # Serialized with length limits\n  outputs: JSON  # Serialized with length limits\n  status: String!\n  error: String\n  \n  # Foreign Keys\n  flow_id: UUID! @foreign(flow.id)\n}",
          "color": "#808080"
        },
        {
          "id": "vertex_build_entity",
          "type": "schema",
          "name": "VertexBuild",
          "description": "Component build artifacts and execution state tracking for flow vertices",
          "path": "src/backend/base/langflow/services/database/models/vertex_builds/model.py",
          "graphql_schema": "type VertexBuild {\n  build_id: UUID! @primary\n  id: String!  # Vertex/component ID\n  timestamp: DateTime! @default(now)\n  data: JSON  # Serialized with limits\n  artifacts: JSON  # Serialized with limits\n  params: String  # Serialized parameters\n  valid: Boolean!\n  \n  # Foreign Keys\n  flow_id: UUID! @foreign(flow.id)\n}",
          "color": "#808080"
        },
        {
          "id": "file_entity",
          "type": "schema",
          "name": "File",
          "description": "File management system V2 with storage provider support and user association",
          "path": "src/backend/base/langflow/services/database/models/file/model.py",
          "graphql_schema": "type File {\n  id: UUID! @primary\n  name: String! @unique\n  path: String!\n  size: Int!\n  provider: String  # Storage provider (e.g., 'local', 's3')\n  created_at: DateTime! @default(now)\n  updated_at: DateTime! @default(now)\n  \n  # Foreign Keys\n  user_id: UUID! @foreign(user.id)\n  user: User!\n}",
          "color": "#808080"
        },
        {
          "id": "component_entity",
          "type": "schema",
          "name": "Component",
          "description": "Runtime component definition with template, documentation, and lifecycle management",
          "path": "src/backend/base/langflow/component_types/",
          "graphql_schema": "type Component {\n  display_name: String!\n  description: String!\n  icon: String\n  category: ComponentCategory!\n  inputs: [ComponentInput!]!\n  outputs: [ComponentOutput!]!\n  code: String!\n  template: JSON\n  documentation: String\n  beta: Boolean!\n  experimental: Boolean!\n}\n\nenum ComponentCategory {\n  INPUT_OUTPUT\n  TEXT_PROCESSING\n  AGENTS\n  CHAINS\n  DATA\n  EMBEDDINGS\n  LLMS\n  MEMORIES\n  TOOLS\n  RETRIEVERS\n  LOGIC\n  HELPERS\n  CUSTOM\n}\n\ntype ComponentInput {\n  name: String!\n  type: String!\n  required: Boolean!\n  description: String\n  default: String\n}\n\ntype ComponentOutput {\n  name: String!\n  type: String!\n  description: String\n}",
          "color": "#808080"
        },
        {
          "id": "vertex_entity",
          "type": "schema",
          "name": "Vertex",
          "description": "Graph runtime representation of flow nodes with state management and edge connections",
          "path": "src/backend/base/langflow/graph/vertex/",
          "graphql_schema": "type Vertex {\n  id: String!\n  display_name: String!\n  description: String\n  base_type: ComponentType!\n  inputs: [VertexInput!]!\n  outputs: [VertexOutput!]!\n  params: JSON\n  frozen: Boolean!\n  is_input: Boolean!\n  is_output: Boolean!\n  is_state: Boolean!\n  edges: [Edge!]!\n}\n\nenum ComponentType {\n  COMPONENT\n  CHAT_INPUT\n  CHAT_OUTPUT\n  TEXT_INPUT\n  TEXT_OUTPUT\n  DATA_INPUT\n  DATA_OUTPUT\n}\n\ntype VertexInput {\n  name: String!\n  type: String!\n  value: String\n  required: Boolean!\n}\n\ntype VertexOutput {\n  name: String!\n  type: String!\n  value: String\n}",
          "color": "#808080"
        },
        {
          "id": "edge_entity",
          "type": "schema",
          "name": "Edge",
          "description": "Graph runtime representation of connections between vertices with data flow management",
          "path": "src/backend/base/langflow/graph/edge/",
          "graphql_schema": "type Edge {\n  id: String!\n  source: Vertex!\n  target: Vertex!\n  source_handle: String!\n  target_handle: String!\n  data: JSON\n}",
          "color": "#808080"
        },
        {
          "id": "credential_entity",
          "type": "schema",
          "name": "Credential",
          "description": "Secure credential management for API keys, tokens, and authentication data",
          "path": "src/backend/base/langflow/services/credential/",
          "graphql_schema": "type Credential {\n  id: UUID! @primary\n  name: String! @unique\n  credential_type: CredentialType!\n  encrypted_value: String! @encrypted\n  metadata: JSON\n  created_at: DateTime! @default(now)\n  updated_at: DateTime! @default(now)\n  expires_at: DateTime\n  is_active: Boolean! @default(true)\n  \n  # Foreign Keys\n  user_id: UUID! @foreign(user.id)\n  user: User!\n}\n\nenum CredentialType {\n  API_KEY\n  OAUTH_TOKEN\n  DATABASE_CONNECTION\n  WEBHOOK_SECRET\n  CERTIFICATE\n  SSH_KEY\n}",
          "color": "#808080"
        },
        {
          "id": "store_entity",
          "type": "schema",
          "name": "Store",
          "description": "Component marketplace integration with sharing, discovery, and rating capabilities",
          "path": "src/backend/base/langflow/services/store/",
          "graphql_schema": "type Store {\n  id: UUID! @primary\n  name: String!\n  description: String!\n  flow_data: JSON!\n  tags: [String!]!\n  is_public: Boolean! @default(false)\n  downloads: Int! @default(0)\n  likes: Int! @default(0)\n  version: String!\n  author: String!\n  created_at: DateTime! @default(now)\n  updated_at: DateTime! @default(now)\n  \n  # Foreign Keys\n  user_id: UUID! @foreign(user.id)\n  user: User!\n}\n\ntype StoreRating {\n  id: UUID! @primary\n  rating: Int!\n  review: String\n  created_at: DateTime! @default(now)\n  \n  # Foreign Keys\n  store_id: UUID! @foreign(store.id)\n  user_id: UUID! @foreign(user.id)\n  store: Store!\n  user: User!\n}",
          "color": "#808080"
        },
        {
          "id": "global_variable_entity",
          "type": "schema",
          "name": "GlobalVariable",
          "description": "System-wide configuration variables and environment settings management",
          "path": "src/backend/base/langflow/services/variable/",
          "graphql_schema": "type GlobalVariable {\n  id: UUID! @primary\n  name: String! @unique\n  value: String!\n  type: GlobalVariableType!\n  description: String\n  is_secret: Boolean! @default(false)\n  created_at: DateTime! @default(now)\n  updated_at: DateTime! @default(now)\n  \n  # Access Control\n  user_id: UUID @foreign(user.id)  # null for system-wide variables\n  user: User\n}\n\nenum GlobalVariableType {\n  STRING\n  INTEGER\n  FLOAT\n  BOOLEAN\n  JSON\n  SECRET\n}",
          "color": "#808080"
        },
        {
          "id": "role_entity",
          "type": "schema",
          "name": "Role",
          "description": "Custom role definition with configurable permissions for RBAC system",
          "path": "src/backend/base/langflow/services/database/models/rbac/role.py",
          "color": "#00FF00",
          "rbac_feature": "Custom role management",
          "graphql_schema": "type Role {\n  id: UUID! @primary\n  name: String! @unique @indexed\n  display_name: String!\n  description: String\n  is_system_role: Boolean! @default(false)\n  is_active: Boolean! @default(true)\n  created_at: DateTime! @default(now)\n  updated_at: DateTime! @default(now)\n  created_by: UUID! @foreign(user.id)\n  \n  # Relationships\n  permissions: [RolePermission!]!\n  role_assignments: [RoleAssignment!]!\n  creator: User!\n}\n\ntype RolePermission {\n  role_id: UUID! @foreign(role.id)\n  permission_id: UUID! @foreign(permission.id)\n  role: Role!\n  permission: Permission!\n  \n  @@unique([role_id, permission_id])\n}"
        },
        {
          "id": "permission_entity",
          "type": "schema",
          "name": "Permission",
          "description": "Fine-grained permission definitions with scope and action specifications",
          "path": "src/backend/base/langflow/services/database/models/rbac/permission.py",
          "color": "#00FF00",
          "rbac_feature": "Fine-grained permission system",
          "graphql_schema": "type Permission {\n  id: UUID! @primary\n  name: String! @unique @indexed\n  display_name: String!\n  description: String!\n  resource_type: ResourceType! @indexed\n  action: ActionType! @indexed\n  scope_level: ScopeLevel! @indexed\n  is_system_permission: Boolean! @default(true)\n  created_at: DateTime! @default(now)\n  \n  # Relationships\n  roles: [RolePermission!]!\n  permission_scopes: [PermissionScope!]!\n}\n\nenum ResourceType {\n  FLOW\n  COMPONENT\n  ENVIRONMENT\n  WORKSPACE\n  PROJECT\n  API_TOKEN\n  USER\n  ROLE\n  SYSTEM\n}\n\nenum ActionType {\n  CREATE\n  READ\n  UPDATE\n  DELETE\n  EXECUTE\n  EXPORT\n  DEPLOY\n  INVITE\n  MANAGE\n  CONFIGURE\n}\n\nenum ScopeLevel {\n  GLOBAL\n  WORKSPACE\n  PROJECT\n  RESOURCE\n  OWNER_ONLY\n}"
        },
        {
          "id": "role_assignment_entity",
          "type": "schema",
          "name": "RoleAssignment",
          "description": "User and group role assignments with scope-specific contexts",
          "path": "src/backend/base/langflow/services/database/models/rbac/role_assignment.py",
          "color": "#00FF00",
          "rbac_feature": "Role assignment management",
          "graphql_schema": "type RoleAssignment {\n  id: UUID! @primary\n  role_id: UUID! @foreign(role.id) @indexed\n  assignee_type: AssigneeType! @indexed\n  assignee_id: UUID! @indexed\n  scope_type: ScopeType @indexed\n  scope_id: UUID @indexed\n  granted_by: UUID! @foreign(user.id)\n  granted_at: DateTime! @default(now)\n  expires_at: DateTime\n  is_active: Boolean! @default(true)\n  \n  # Relationships\n  role: Role!\n  granter: User!\n  \n  # Composite index for efficient queries\n  @@index([assignee_type, assignee_id])\n  @@index([scope_type, scope_id])\n  @@unique([role_id, assignee_type, assignee_id, scope_type, scope_id])\n}\n\nenum AssigneeType {\n  USER\n  GROUP\n  SERVICE_ACCOUNT\n}\n\nenum ScopeType {\n  GLOBAL\n  WORKSPACE\n  PROJECT\n  FLOW\n  COMPONENT\n}"
        },
        {
          "id": "permission_scope_entity",
          "type": "schema",
          "name": "PermissionScope",
          "description": "Scope-specific permission rules and constraints for granular access control",
          "path": "src/backend/base/langflow/services/database/models/rbac/permission_scope.py",
          "color": "#00FF00",
          "rbac_feature": "Multi-level permission scopes",
          "graphql_schema": "type PermissionScope {\n  id: UUID! @primary\n  permission_id: UUID! @foreign(permission.id) @indexed\n  scope_type: ScopeType! @indexed\n  scope_id: UUID @indexed\n  conditions: JSON  # Additional permission conditions\n  metadata: JSON    # Scope-specific metadata\n  created_at: DateTime! @default(now)\n  updated_at: DateTime! @default(now)\n  \n  # Relationships\n  permission: Permission!\n  \n  @@unique([permission_id, scope_type, scope_id])\n}"
        },
        {
          "id": "group_entity",
          "type": "schema",
          "name": "Group",
          "description": "User groups for collective role assignment and permission management",
          "path": "src/backend/base/langflow/services/database/models/rbac/group.py",
          "color": "#00FF00",
          "rbac_feature": "Group-based access control",
          "graphql_schema": "type Group {\n  id: UUID! @primary\n  name: String! @unique @indexed\n  display_name: String!\n  description: String\n  group_type: GroupType! @default(CUSTOM)\n  is_active: Boolean! @default(true)\n  created_at: DateTime! @default(now)\n  updated_at: DateTime! @default(now)\n  created_by: UUID! @foreign(user.id)\n  \n  # Relationships\n  members: [GroupMember!]!\n  role_assignments: [RoleAssignment!]!\n  creator: User!\n}\n\ntype GroupMember {\n  group_id: UUID! @foreign(group.id)\n  user_id: UUID! @foreign(user.id)\n  added_by: UUID! @foreign(user.id)\n  added_at: DateTime! @default(now)\n  is_admin: Boolean! @default(false)\n  \n  group: Group!\n  user: User!\n  added_by_user: User!\n  \n  @@unique([group_id, user_id])\n}\n\nenum GroupType {\n  SYSTEM\n  SSO_SYNCED\n  CUSTOM\n}"
        },
        {
          "id": "audit_log_entity",
          "type": "schema",
          "name": "AuditLog",
          "description": "Comprehensive audit trail for RBAC changes and security compliance",
          "path": "src/backend/base/langflow/services/database/models/rbac/audit_log.py",
          "color": "#00FF00",
          "rbac_feature": "Audit logging and compliance",
          "graphql_schema": "type AuditLog {\n  id: UUID! @primary\n  timestamp: DateTime! @default(now) @indexed\n  event_type: AuditEventType! @indexed\n  actor_type: ActorType! @indexed\n  actor_id: UUID! @indexed\n  target_type: TargetType @indexed\n  target_id: UUID @indexed\n  action: String! @indexed\n  resource_type: String @indexed\n  resource_id: UUID @indexed\n  old_values: JSON\n  new_values: JSON\n  metadata: JSON\n  ip_address: String @indexed\n  user_agent: String\n  session_id: String @indexed\n  request_id: String @indexed\n  \n  # Relationships (nullable for system events)\n  actor_user: User @foreign(actor_id)\n  target_user: User @foreign(target_id)\n}\n\nenum AuditEventType {\n  ROLE_CREATED\n  ROLE_UPDATED\n  ROLE_DELETED\n  ROLE_ASSIGNED\n  ROLE_UNASSIGNED\n  PERMISSION_GRANTED\n  PERMISSION_REVOKED\n  GROUP_CREATED\n  GROUP_UPDATED\n  GROUP_MEMBER_ADDED\n  GROUP_MEMBER_REMOVED\n  ACCESS_DENIED\n  LOGIN_SUCCESS\n  LOGIN_FAILURE\n  SSO_SYNC\n}\n\nenum ActorType {\n  USER\n  SERVICE_ACCOUNT\n  SYSTEM\n  SSO_PROVIDER\n}\n\nenum TargetType {\n  USER\n  ROLE\n  PERMISSION\n  GROUP\n  FLOW\n  COMPONENT\n  WORKSPACE\n}"
        }
      ],
      "interface_nodes": [
        {
          "id": "login_page",
          "type": "interface",
          "name": "LoginPage",
          "description": "User authentication interface with credential validation and auto-login support",
          "route": "/login",
          "component_path": "src/frontend/src/pages/LoginPage",
          "uidl_definition": {
            "type": "page",
            "layout": "auth_layout",
            "components": [
              "Logo",
              "LoginForm",
              "SignUpLink"
            ],
            "state": [
              "credentials",
              "autoLogin",
              "isLoading",
              "error"
            ],
            "actions": [
              "handleLogin",
              "toggleAutoLogin"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "flow_dashboard",
          "type": "interface",
          "name": "FlowDashboard",
          "description": "Main application dashboard with flow management, search, and folder navigation",
          "route": "/flows",
          "component_path": "src/frontend/src/pages/FlowPage",
          "uidl_definition": {
            "type": "page",
            "layout": "main_layout",
            "components": [
              "Header",
              "FolderSidebar",
              "FlowGrid",
              "SearchBar",
              "Paginator"
            ],
            "state": [
              "flows",
              "selectedFolder",
              "searchQuery",
              "viewMode",
              "pagination"
            ],
            "actions": [
              "loadFlows",
              "searchFlows",
              "createFlow",
              "deleteFlow"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "flow_editor",
          "type": "interface",
          "name": "FlowEditor",
          "description": "Visual flow builder with drag-and-drop components, real-time collaboration, and execution monitoring",
          "route": "/flow/:id",
          "component_path": "src/frontend/src/pages/FlowPage",
          "uidl_definition": {
            "type": "page",
            "layout": "editor_layout",
            "components": [
              "FlowToolbar",
              "ComponentSidebar",
              "ReactFlowCanvas",
              "Minimap",
              "CanvasControls"
            ],
            "state": [
              "nodes",
              "edges",
              "selectedNode",
              "executionState",
              "buildStatus"
            ],
            "actions": [
              "saveFlow",
              "buildFlow",
              "runFlow",
              "addNode",
              "removeNode",
              "connectNodes"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "playground_interface",
          "type": "interface",
          "name": "PlaygroundInterface",
          "description": "Interactive chat interface for testing flows with voice mode, file attachments, and session management",
          "route": "/playground/:id",
          "component_path": "src/frontend/src/pages/PlaygroundPage",
          "uidl_definition": {
            "type": "page",
            "layout": "chat_layout",
            "components": [
              "PlaygroundHeader",
              "SessionSidebar",
              "MessageList",
              "ChatInput",
              "VoiceAssistant"
            ],
            "state": [
              "messages",
              "sessions",
              "voiceMode",
              "attachedFiles",
              "isStreaming"
            ],
            "actions": [
              "sendMessage",
              "createSession",
              "switchSession",
              "toggleVoice"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "component_sidebar",
          "type": "interface",
          "name": "ComponentSidebar",
          "description": "Collapsible sidebar with component library, search, and drag-to-canvas functionality",
          "component_path": "src/frontend/src/components/SidebarComponent",
          "uidl_definition": {
            "type": "component",
            "layout": "sidebar",
            "components": [
              "SearchInput",
              "ComponentCategories",
              "ComponentList",
              "ComponentCard"
            ],
            "state": [
              "isOpen",
              "searchTerm",
              "selectedCategory",
              "components"
            ],
            "actions": [
              "toggleSidebar",
              "searchComponents",
              "filterByCategory",
              "dragComponent"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "flow_toolbar",
          "type": "interface",
          "name": "FlowToolbar",
          "description": "Action toolbar with save, build, run, share, and settings controls",
          "component_path": "src/frontend/src/components/FlowToolbarComponent",
          "uidl_definition": {
            "type": "component",
            "layout": "toolbar",
            "components": [
              "SaveButton",
              "BuildButton",
              "RunButton",
              "ShareButton",
              "SettingsDropdown"
            ],
            "state": [
              "isDirty",
              "buildStatus",
              "shareSettings"
            ],
            "actions": [
              "save",
              "build",
              "run",
              "share",
              "openSettings"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "reactflow_canvas",
          "type": "interface",
          "name": "ReactFlowCanvas",
          "description": "Main canvas area for visual flow building with node manipulation and connection handling",
          "component_path": "src/frontend/src/components/ReactFlowWrapper",
          "uidl_definition": {
            "type": "component",
            "layout": "canvas",
            "components": [
              "FlowNode",
              "ConnectionLine",
              "EdgeMarker",
              "SelectionBox"
            ],
            "state": [
              "nodes",
              "edges",
              "selectedElements",
              "viewport",
              "connectionMode"
            ],
            "actions": [
              "onNodesChange",
              "onEdgesChange",
              "onConnect",
              "onSelectionChange"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "io_modal",
          "type": "interface",
          "name": "IOModal",
          "description": "Playground modal for flow testing with input fields, output display, and chat interface",
          "component_path": "src/frontend/src/modals/IOModal",
          "uidl_definition": {
            "type": "modal",
            "layout": "modal_layout",
            "components": [
              "TabNavigation",
              "InputFields",
              "OutputDisplay",
              "ChatView"
            ],
            "state": [
              "activeTab",
              "inputs",
              "outputs",
              "chatHistory"
            ],
            "actions": [
              "switchTab",
              "updateInput",
              "runFlow",
              "clearChat"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "message_list",
          "type": "interface",
          "name": "MessageList",
          "description": "Scrollable message container with rich content rendering, streaming support, and voice integration",
          "component_path": "src/frontend/src/components/ChatWidget",
          "uidl_definition": {
            "type": "component",
            "layout": "list",
            "components": [
              "MessageBubble",
              "StreamingIndicator",
              "LoadMoreButton",
              "ScrollToBottom"
            ],
            "state": [
              "messages",
              "isStreaming",
              "hasMore",
              "scrollPosition"
            ],
            "actions": [
              "loadMore",
              "scrollToBottom",
              "resendMessage",
              "editMessage"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "chat_input",
          "type": "interface",
          "name": "ChatInput",
          "description": "Multi-modal input interface with text, file attachments, voice recording, and send controls",
          "component_path": "src/frontend/src/components/ChatInput",
          "uidl_definition": {
            "type": "component",
            "layout": "input_area",
            "components": [
              "TextArea",
              "FileAttachment",
              "VoiceButton",
              "SendButton",
              "EmojiPicker"
            ],
            "state": [
              "inputText",
              "attachedFiles",
              "isRecording",
              "voiceEnabled"
            ],
            "actions": [
              "sendMessage",
              "attachFile",
              "startVoiceRecording",
              "stopVoiceRecording"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "voice_assistant",
          "type": "interface",
          "name": "VoiceAssistant",
          "description": "Voice interaction component with real-time audio processing, VAD, and provider selection",
          "component_path": "src/frontend/src/components/VoiceAssistant",
          "uidl_definition": {
            "type": "component",
            "layout": "voice_interface",
            "components": [
              "VoiceButton",
              "AudioWaveform",
              "MicrophoneSelector",
              "VoiceSelector"
            ],
            "state": [
              "isListening",
              "audioLevel",
              "selectedMicrophone",
              "selectedVoice",
              "transcript"
            ],
            "actions": [
              "toggleListening",
              "selectMicrophone",
              "selectVoice",
              "processAudio"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "folder_sidebar",
          "type": "interface",
          "name": "FolderSidebar",
          "description": "Hierarchical folder navigation with create, rename, delete, and drag-drop organization",
          "component_path": "src/frontend/src/components/FolderSidebarComponent",
          "uidl_definition": {
            "type": "component",
            "layout": "tree_sidebar",
            "components": [
              "FolderTree",
              "CreateFolderButton",
              "FolderContextMenu"
            ],
            "state": [
              "folders",
              "selectedFolder",
              "expandedFolders"
            ],
            "actions": [
              "selectFolder",
              "createFolder",
              "renameFolder",
              "deleteFolder",
              "moveFolder"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "flow_grid",
          "type": "interface",
          "name": "FlowGrid",
          "description": "Responsive grid display of flows with cards, thumbnails, actions, and bulk operations",
          "component_path": "src/frontend/src/components/FlowGrid",
          "uidl_definition": {
            "type": "component",
            "layout": "grid",
            "components": [
              "FlowCard",
              "FlowThumbnail",
              "FlowActions",
              "SelectionCheckbox"
            ],
            "state": [
              "flows",
              "selectedFlows",
              "viewMode",
              "sortOrder"
            ],
            "actions": [
              "selectFlow",
              "openFlow",
              "duplicateFlow",
              "exportFlow",
              "bulkDelete"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "component_grid",
          "type": "interface",
          "name": "ComponentGrid",
          "description": "Component marketplace display with search, filtering, ratings, and installation",
          "component_path": "src/frontend/src/components/ComponentGrid",
          "uidl_definition": {
            "type": "component",
            "layout": "grid",
            "components": [
              "ComponentCard",
              "ComponentRating",
              "InstallButton",
              "PreviewModal"
            ],
            "state": [
              "components",
              "selectedComponents",
              "filters",
              "ratings"
            ],
            "actions": [
              "previewComponent",
              "installComponent",
              "rateComponent",
              "shareComponent"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "mcp_server_tab",
          "type": "interface",
          "name": "MCPServerTab",
          "description": "MCP server management interface with server configuration, tool discovery, and execution monitoring",
          "component_path": "src/frontend/src/components/MCPServerTab",
          "uidl_definition": {
            "type": "component",
            "layout": "tab_content",
            "components": [
              "ServerList",
              "AddServerButton",
              "ServerConfig",
              "ToolBrowser"
            ],
            "state": [
              "servers",
              "activeServer",
              "tools",
              "serverStatus"
            ],
            "actions": [
              "addServer",
              "removeServer",
              "configureServer",
              "testConnection",
              "browsTools"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "add_mcp_server_modal",
          "type": "interface",
          "name": "AddMCPServerModal",
          "description": "Modal dialog for adding new MCP servers with configuration validation and connection testing",
          "component_path": "src/frontend/src/modals/AddMCPServerModal",
          "uidl_definition": {
            "type": "modal",
            "layout": "form_modal",
            "components": [
              "ServerForm",
              "ConnectionTest",
              "ValidationFeedback"
            ],
            "state": [
              "serverConfig",
              "isValidating",
              "validationErrors",
              "connectionStatus"
            ],
            "actions": [
              "validateConfig",
              "testConnection",
              "saveServer",
              "cancelAdd"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "settings_page",
          "type": "interface",
          "name": "SettingsPage",
          "description": "User settings management with tabs for general, API keys, global variables, and MCP servers",
          "route": "/settings",
          "component_path": "src/frontend/src/pages/SettingsPage",
          "uidl_definition": {
            "type": "page",
            "layout": "settings_layout",
            "components": [
              "SettingsTabs",
              "GeneralSettings",
              "ApiKeysSettings",
              "GlobalVariablesSettings",
              "MCPServersSettings"
            ],
            "state": [
              "activeTab",
              "settings",
              "apiKeys",
              "globalVariables",
              "mcpServers"
            ],
            "actions": [
              "switchTab",
              "updateSettings",
              "createApiKey",
              "deleteApiKey",
              "updateGlobalVariable"
            ]
          },
          "color": "#FFA500"
        },
        {
          "id": "api_keys_settings",
          "type": "interface",
          "name": "ApiKeysSettings",
          "description": "API key management interface with creation, deletion, usage tracking, and security controls",
          "component_path": "src/frontend/src/components/ApiKeysSettings",
          "uidl_definition": {
            "type": "component",
            "layout": "settings_panel",
            "components": [
              "ApiKeyList",
              "CreateApiKeyButton",
              "ApiKeyCard",
              "UsageChart"
            ],
            "state": [
              "apiKeys",
              "selectedApiKey",
              "usageData",
              "isCreating"
            ],
            "actions": [
              "createApiKey",
              "deleteApiKey",
              "viewUsage",
              "regenerateApiKey",
              "toggleApiKey"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "global_variables_settings",
          "type": "interface",
          "name": "GlobalVariablesSettings",
          "description": "Global variable management with encryption, scoping, and environment-specific configurations",
          "component_path": "src/frontend/src/components/GlobalVariablesSettings",
          "uidl_definition": {
            "type": "component",
            "layout": "settings_panel",
            "components": [
              "VariableList",
              "AddVariableButton",
              "VariableEditor",
              "EncryptionToggle"
            ],
            "state": [
              "globalVariables",
              "selectedVariable",
              "isEditing",
              "encryptionEnabled"
            ],
            "actions": [
              "addVariable",
              "updateVariable",
              "deleteVariable",
              "toggleEncryption",
              "exportVariables"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "file_management_page",
          "type": "interface",
          "name": "FileManagementPage",
          "description": "File management interface with upload, download, search, and organization capabilities",
          "route": "/files",
          "component_path": "src/frontend/src/pages/FileManagementPage",
          "uidl_definition": {
            "type": "page",
            "layout": "file_manager_layout",
            "components": [
              "FileUploader",
              "FileList",
              "FilePreview",
              "FileSearch",
              "BulkActions"
            ],
            "state": [
              "files",
              "selectedFiles",
              "searchQuery",
              "sortOrder",
              "uploadProgress"
            ],
            "actions": [
              "uploadFiles",
              "downloadFile",
              "deleteFiles",
              "searchFiles",
              "previewFile"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "admin_page",
          "type": "interface",
          "name": "AdminPage",
          "description": "System administration interface with user management, system monitoring, and configuration",
          "route": "/admin",
          "component_path": "src/frontend/src/pages/AdminPage",
          "uidl_definition": {
            "type": "page",
            "layout": "admin_layout",
            "components": [
              "UserManagement",
              "SystemMetrics",
              "ConfigurationPanel",
              "AuditLog"
            ],
            "state": [
              "users",
              "systemStatus",
              "configuration",
              "auditEvents"
            ],
            "actions": [
              "manageUsers",
              "updateConfig",
              "viewMetrics",
              "exportAuditLog"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "store_page",
          "type": "interface",
          "name": "StorePage",
          "description": "Component marketplace with browsing, search, ratings, and community-driven content discovery",
          "route": "/store",
          "component_path": "src/frontend/src/pages/StorePage",
          "uidl_definition": {
            "type": "page",
            "layout": "marketplace_layout",
            "components": [
              "StoreHeader",
              "CategoryFilter",
              "ComponentSearch",
              "ComponentGallery",
              "RatingSystem"
            ],
            "state": [
              "storeComponents",
              "categories",
              "searchResults",
              "userRatings"
            ],
            "actions": [
              "browseComponents",
              "searchStore",
              "installComponent",
              "rateComponent",
              "shareComponent"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "header_component",
          "type": "interface",
          "name": "HeaderComponent",
          "description": "Application header with navigation, user profile, notifications, and theme controls",
          "component_path": "src/frontend/src/components/HeaderComponent",
          "uidl_definition": {
            "type": "component",
            "layout": "header",
            "components": [
              "Logo",
              "Navigation",
              "SearchBar",
              "UserProfile",
              "NotificationBell",
              "ThemeToggle"
            ],
            "state": [
              "user",
              "notifications",
              "theme",
              "searchQuery"
            ],
            "actions": [
              "navigate",
              "toggleProfile",
              "markNotificationRead",
              "toggleTheme",
              "search"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "notification_system",
          "type": "interface",
          "name": "NotificationSystem",
          "description": "Real-time notification display with toasts, badges, and persistent notification center",
          "component_path": "src/frontend/src/components/NotificationSystem",
          "uidl_definition": {
            "type": "component",
            "layout": "overlay",
            "components": [
              "ToastContainer",
              "NotificationBadge",
              "NotificationCenter",
              "NotificationItem"
            ],
            "state": [
              "notifications",
              "unreadCount",
              "isOpen",
              "filterType"
            ],
            "actions": [
              "showNotification",
              "markAsRead",
              "clearAll",
              "filterNotifications",
              "toggleCenter"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "error_boundary",
          "type": "interface",
          "name": "ErrorBoundary",
          "description": "Application-wide error handling with user-friendly error displays and recovery options",
          "component_path": "src/frontend/src/components/ErrorBoundary",
          "uidl_definition": {
            "type": "component",
            "layout": "error_fallback",
            "components": [
              "ErrorDisplay",
              "RetryButton",
              "ErrorDetails",
              "ReportButton"
            ],
            "state": [
              "error",
              "errorInfo",
              "hasError",
              "retryCount"
            ],
            "actions": [
              "retry",
              "reportError",
              "resetError",
              "showDetails"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "loading_states",
          "type": "interface",
          "name": "LoadingStates",
          "description": "Comprehensive loading state management with skeletons, spinners, and progress indicators",
          "component_path": "src/frontend/src/components/LoadingStates",
          "uidl_definition": {
            "type": "component",
            "layout": "loading_overlay",
            "components": [
              "Spinner",
              "SkeletonLoader",
              "ProgressBar",
              "LoadingMessage"
            ],
            "state": [
              "isLoading",
              "progress",
              "loadingType",
              "message"
            ],
            "actions": [
              "showLoading",
              "updateProgress",
              "hideLoading",
              "setMessage"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "theme_provider",
          "type": "interface",
          "name": "ThemeProvider",
          "description": "Application theme management with light/dark modes, custom themes, and responsive design tokens",
          "component_path": "src/frontend/src/contexts/ThemeContext",
          "uidl_definition": {
            "type": "provider",
            "layout": "context_provider",
            "components": [
              "ThemeToggle",
              "ColorPalette",
              "FontControls",
              "LayoutControls"
            ],
            "state": [
              "currentTheme",
              "customThemes",
              "colorMode",
              "fontScale"
            ],
            "actions": [
              "setTheme",
              "toggleColorMode",
              "createCustomTheme",
              "adjustFontScale"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "auth_guard",
          "type": "interface",
          "name": "AuthGuard",
          "description": "Route protection and authentication state management with automatic redirects and session handling",
          "component_path": "src/frontend/src/components/AuthGuard",
          "uidl_definition": {
            "type": "guard",
            "layout": "route_guard",
            "components": [
              "LoginRedirect",
              "PermissionCheck",
              "SessionValidator"
            ],
            "state": [
              "isAuthenticated",
              "user",
              "permissions",
              "sessionValid"
            ],
            "actions": [
              "checkAuth",
              "redirectToLogin",
              "validateSession",
              "refreshToken"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "websocket_manager",
          "type": "interface",
          "name": "WebSocketManager",
          "description": "Real-time communication management with connection pooling, reconnection logic, and event routing",
          "component_path": "src/frontend/src/services/WebSocketManager",
          "uidl_definition": {
            "type": "service",
            "layout": "connection_manager",
            "components": [
              "ConnectionStatus",
              "ReconnectHandler",
              "EventRouter",
              "MessageQueue"
            ],
            "state": [
              "connections",
              "connectionStatus",
              "messageQueue",
              "retryCount"
            ],
            "actions": [
              "connect",
              "disconnect",
              "reconnect",
              "sendMessage",
              "subscribe"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "data_table",
          "type": "interface",
          "name": "DataTable",
          "description": "Advanced data table with sorting, filtering, pagination, and export capabilities",
          "component_path": "src/frontend/src/components/DataTable",
          "uidl_definition": {
            "type": "component",
            "layout": "table",
            "components": [
              "TableHeader",
              "TableRow",
              "SortButton",
              "FilterInput",
              "PaginationControls"
            ],
            "state": [
              "data",
              "sortConfig",
              "filters",
              "pagination",
              "selectedRows"
            ],
            "actions": [
              "sortData",
              "filterData",
              "changePage",
              "selectRow",
              "exportData"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "form_builder",
          "type": "interface",
          "name": "FormBuilder",
          "description": "Dynamic form generation with validation, conditional fields, and custom input types",
          "component_path": "src/frontend/src/components/FormBuilder",
          "uidl_definition": {
            "type": "component",
            "layout": "form",
            "components": [
              "FormField",
              "ValidationMessage",
              "ConditionalField",
              "SubmitButton"
            ],
            "state": [
              "formData",
              "validationErrors",
              "isSubmitting",
              "fieldVisibility"
            ],
            "actions": [
              "updateField",
              "validateForm",
              "submitForm",
              "resetForm",
              "showField"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "code_editor",
          "type": "interface",
          "name": "CodeEditor",
          "description": "Integrated code editor with syntax highlighting, auto-completion, and debugging support",
          "component_path": "src/frontend/src/components/CodeEditor",
          "uidl_definition": {
            "type": "component",
            "layout": "editor",
            "components": [
              "EditorPane",
              "SyntaxHighlighter",
              "AutoComplete",
              "ErrorGutter",
              "Minimap"
            ],
            "state": [
              "code",
              "language",
              "errors",
              "completions",
              "cursorPosition"
            ],
            "actions": [
              "updateCode",
              "formatCode",
              "showCompletions",
              "goToLine",
              "toggleMinimap"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "search_interface",
          "type": "interface",
          "name": "SearchInterface",
          "description": "Global search functionality with autocomplete, filters, and result categorization",
          "component_path": "src/frontend/src/components/SearchInterface",
          "uidl_definition": {
            "type": "component",
            "layout": "search",
            "components": [
              "SearchInput",
              "AutoComplete",
              "SearchFilters",
              "ResultList",
              "CategoryTabs"
            ],
            "state": [
              "query",
              "results",
              "suggestions",
              "filters",
              "activeCategory"
            ],
            "actions": [
              "search",
              "clearSearch",
              "applyFilter",
              "selectSuggestion",
              "changeCategory"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "paginator_component",
          "type": "interface",
          "name": "PaginatorComponent",
          "description": "Advanced pagination component with page size selection, navigation, and total count display",
          "component_path": "src/frontend/src/components/PaginatorComponent",
          "uidl_definition": {
            "type": "component",
            "layout": "pagination",
            "components": [
              "PageNumbers",
              "NextPrevButtons",
              "PageSizeSelector",
              "TotalCountDisplay"
            ],
            "state": [
              "currentPage",
              "totalPages",
              "pageSize",
              "totalItems"
            ],
            "actions": [
              "goToPage",
              "nextPage",
              "prevPage",
              "changePageSize",
              "goToFirstPage",
              "goToLastPage"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "template_gallery",
          "type": "interface",
          "name": "TemplateGallery",
          "description": "Template selection interface with categories, previews, and quick start functionality",
          "route": "/templates",
          "component_path": "src/frontend/src/pages/TemplateGallery",
          "uidl_definition": {
            "type": "page",
            "layout": "gallery_layout",
            "components": [
              "TemplateCard",
              "CategoryFilter",
              "TemplatePreview",
              "QuickStartButton"
            ],
            "state": [
              "templates",
              "selectedCategory",
              "previewTemplate",
              "searchQuery"
            ],
            "actions": [
              "selectTemplate",
              "previewTemplate",
              "useTemplate",
              "filterByCategory",
              "searchTemplates"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "workspace_switcher",
          "type": "interface",
          "name": "WorkspaceSwitcher",
          "description": "Multi-workspace management with workspace selection, creation, and switching capabilities",
          "component_path": "src/frontend/src/components/WorkspaceSwitcher",
          "uidl_definition": {
            "type": "component",
            "layout": "switcher_dropdown",
            "components": [
              "WorkspaceList",
              "CreateWorkspaceButton",
              "WorkspaceSettings",
              "WorkspaceIndicator"
            ],
            "state": [
              "workspaces",
              "currentWorkspace",
              "isOpen",
              "isCreating"
            ],
            "actions": [
              "switchWorkspace",
              "createWorkspace",
              "editWorkspace",
              "deleteWorkspace",
              "toggleDropdown"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "role_management_page",
          "type": "interface",
          "name": "Role Management Page",
          "description": "Comprehensive role creation, editing, and permission assignment interface for RBAC administration",
          "route": "/admin/roles",
          "color": "#00FF00",
          "rbac_feature": "Role management interface",
          "uidl": {
            "name": "RoleManagementPage",
            "type": "page",
            "content": {
              "elementType": "container",
              "attrs": {
                "className": "role-management-page"
              },
              "children": [
                {
                  "elementType": "component",
                  "name": "PageHeader",
                  "attrs": {
                    "title": "Role Management",
                    "subtitle": "Create and manage custom roles"
                  }
                },
                {
                  "elementType": "component",
                  "name": "RoleList",
                  "dependency": "role_list_component",
                  "attrs": {
                    "showSystemRoles": true,
                    "allowEdit": true
                  }
                },
                {
                  "elementType": "component",
                  "name": "CreateRoleButton",
                  "attrs": {
                    "onClick": "openRoleCreationModal"
                  }
                }
              ]
            },
            "stateDefinitions": {
              "roles": {
                "type": "array",
                "defaultValue": []
              },
              "selectedRole": {
                "type": "object",
                "defaultValue": null
              },
              "isLoading": {
                "type": "boolean",
                "defaultValue": true
              }
            },
            "actions": {
              "loadRoles": {
                "type": "async",
                "handler": "rbacService.getRoles"
              },
              "createRole": {
                "type": "async",
                "handler": "rbacService.createRole"
              },
              "updateRole": {
                "type": "async",
                "handler": "rbacService.updateRole"
              }
            }
          }
        },
        {
          "id": "permission_editor",
          "type": "interface",
          "name": "Permission Editor",
          "description": "Fine-grained permission assignment and scope configuration component",
          "color": "#00FF00",
          "rbac_feature": "Permission management",
          "uidl": {
            "name": "PermissionEditor",
            "type": "component",
            "content": {
              "elementType": "container",
              "attrs": {
                "className": "permission-editor"
              },
              "children": [
                {
                  "elementType": "component",
                  "name": "PermissionMatrix",
                  "attrs": {
                    "resources": {
                      "bindingPath": "resources"
                    },
                    "actions": {
                      "bindingPath": "actions"
                    }
                  }
                },
                {
                  "elementType": "component",
                  "name": "ScopeSelector",
                  "dependency": "permission_scope_selector",
                  "attrs": {
                    "selectedScope": {
                      "bindingPath": "selectedScope"
                    }
                  }
                }
              ]
            },
            "stateDefinitions": {
              "permissions": {
                "type": "array",
                "defaultValue": []
              },
              "selectedScope": {
                "type": "string",
                "defaultValue": "GLOBAL"
              },
              "resources": {
                "type": "array",
                "defaultValue": [
                  "FLOW",
                  "COMPONENT",
                  "WORKSPACE"
                ]
              },
              "actions": {
                "type": "array",
                "defaultValue": [
                  "CREATE",
                  "READ",
                  "UPDATE",
                  "DELETE"
                ]
              }
            }
          }
        },
        {
          "id": "user_group_manager",
          "type": "interface",
          "name": "User Group Manager",
          "description": "Group creation, member management, and bulk role assignment interface",
          "route": "/admin/groups",
          "color": "#00FF00",
          "rbac_feature": "Group management",
          "uidl": {
            "name": "UserGroupManager",
            "type": "page",
            "content": {
              "elementType": "container",
              "attrs": {
                "className": "group-manager-page"
              },
              "children": [
                {
                  "elementType": "component",
                  "name": "GroupList",
                  "attrs": {
                    "groups": {
                      "bindingPath": "groups"
                    }
                  }
                },
                {
                  "elementType": "component",
                  "name": "GroupMemberManager",
                  "attrs": {
                    "selectedGroup": {
                      "bindingPath": "selectedGroup"
                    }
                  }
                },
                {
                  "elementType": "component",
                  "name": "BulkRoleAssignment",
                  "attrs": {
                    "targetGroup": {
                      "bindingPath": "selectedGroup"
                    }
                  }
                }
              ]
            },
            "stateDefinitions": {
              "groups": {
                "type": "array",
                "defaultValue": []
              },
              "selectedGroup": {
                "type": "object",
                "defaultValue": null
              },
              "groupMembers": {
                "type": "array",
                "defaultValue": []
              }
            }
          }
        },
        {
          "id": "access_control_panel",
          "type": "interface",
          "name": "Access Control Panel",
          "description": "Centralized dashboard for monitoring and managing all RBAC configurations",
          "route": "/admin/access-control",
          "color": "#00FF00",
          "rbac_feature": "Access control dashboard",
          "uidl": {
            "name": "AccessControlPanel",
            "type": "page",
            "content": {
              "elementType": "container",
              "attrs": {
                "className": "access-control-dashboard"
              },
              "children": [
                {
                  "elementType": "component",
                  "name": "AccessSummaryCards",
                  "attrs": {
                    "metrics": {
                      "bindingPath": "accessMetrics"
                    }
                  }
                },
                {
                  "elementType": "component",
                  "name": "RecentAccessEvents",
                  "dependency": "audit_log_viewer",
                  "attrs": {
                    "limit": 10
                  }
                },
                {
                  "elementType": "component",
                  "name": "ActiveRoleAssignments",
                  "attrs": {
                    "assignments": {
                      "bindingPath": "activeAssignments"
                    }
                  }
                }
              ]
            },
            "stateDefinitions": {
              "accessMetrics": {
                "type": "object",
                "defaultValue": {}
              },
              "activeAssignments": {
                "type": "array",
                "defaultValue": []
              },
              "recentEvents": {
                "type": "array",
                "defaultValue": []
              }
            }
          }
        },
        {
          "id": "role_assignment_modal",
          "type": "interface",
          "name": "Role Assignment Modal",
          "description": "Modal interface for assigning roles to users and groups with scope selection",
          "color": "#00FF00",
          "rbac_feature": "Role assignment interface",
          "uidl": {
            "name": "RoleAssignmentModal",
            "type": "modal",
            "content": {
              "elementType": "form",
              "attrs": {
                "onSubmit": "assignRole"
              },
              "children": [
                {
                  "elementType": "component",
                  "name": "UserGroupSelector",
                  "attrs": {
                    "multiple": true,
                    "bindingPath": "selectedTargets"
                  }
                },
                {
                  "elementType": "component",
                  "name": "RoleSelector",
                  "attrs": {
                    "roles": {
                      "bindingPath": "availableRoles"
                    }
                  }
                },
                {
                  "elementType": "component",
                  "name": "ScopeSelector",
                  "attrs": {
                    "scopes": {
                      "bindingPath": "availableScopes"
                    }
                  }
                },
                {
                  "elementType": "component",
                  "name": "ExpirationDatePicker",
                  "attrs": {
                    "optional": true
                  }
                }
              ]
            },
            "stateDefinitions": {
              "selectedTargets": {
                "type": "array",
                "defaultValue": []
              },
              "selectedRole": {
                "type": "string",
                "defaultValue": ""
              },
              "selectedScope": {
                "type": "object",
                "defaultValue": {}
              },
              "expirationDate": {
                "type": "string",
                "defaultValue": null
              }
            }
          }
        },
        {
          "id": "permission_scope_selector",
          "type": "interface",
          "name": "Permission Scope Selector",
          "description": "Hierarchical scope selection component for multi-level permission assignment",
          "color": "#00FF00",
          "rbac_feature": "Permission scope management",
          "uidl": {
            "name": "PermissionScopeSelector",
            "type": "component",
            "content": {
              "elementType": "container",
              "attrs": {
                "className": "scope-selector"
              },
              "children": [
                {
                  "elementType": "component",
                  "name": "ScopeHierarchy",
                  "attrs": {
                    "levels": [
                      "GLOBAL",
                      "WORKSPACE",
                      "PROJECT",
                      "RESOURCE"
                    ]
                  }
                },
                {
                  "elementType": "component",
                  "name": "ResourcePicker",
                  "conditional": {
                    "condition": "selectedScope !== 'GLOBAL'"
                  }
                }
              ]
            },
            "stateDefinitions": {
              "selectedScope": {
                "type": "string",
                "defaultValue": "GLOBAL"
              },
              "selectedResource": {
                "type": "object",
                "defaultValue": null
              }
            }
          }
        },
        {
          "id": "audit_log_viewer",
          "type": "interface",
          "name": "Audit Log Viewer",
          "description": "Comprehensive audit trail viewer with filtering and export capabilities for compliance",
          "route": "/admin/audit-logs",
          "color": "#00FF00",
          "rbac_feature": "Audit and compliance",
          "uidl": {
            "name": "AuditLogViewer",
            "type": "page",
            "content": {
              "elementType": "container",
              "attrs": {
                "className": "audit-log-viewer"
              },
              "children": [
                {
                  "elementType": "component",
                  "name": "AuditFilters",
                  "attrs": {
                    "onFilter": "applyFilters"
                  }
                },
                {
                  "elementType": "component",
                  "name": "AuditLogTable",
                  "attrs": {
                    "logs": {
                      "bindingPath": "filteredLogs"
                    }
                  }
                },
                {
                  "elementType": "component",
                  "name": "ExportButton",
                  "attrs": {
                    "formats": [
                      "CSV",
                      "JSON",
                      "PDF"
                    ]
                  }
                }
              ]
            },
            "stateDefinitions": {
              "auditLogs": {
                "type": "array",
                "defaultValue": []
              },
              "filteredLogs": {
                "type": "array",
                "defaultValue": []
              },
              "filters": {
                "type": "object",
                "defaultValue": {}
              }
            }
          }
        },
        {
          "id": "sso_integration_settings",
          "type": "interface",
          "name": "SSO Integration Settings",
          "description": "Single Sign-On configuration and role mapping interface for enterprise integration",
          "route": "/admin/sso-settings",
          "color": "#00FF00",
          "rbac_feature": "SSO integration",
          "uidl": {
            "name": "SSO_IntegrationSettings",
            "type": "page",
            "content": {
              "elementType": "container",
              "attrs": {
                "className": "sso-settings-page"
              },
              "children": [
                {
                  "elementType": "component",
                  "name": "SSOProviderConfig",
                  "attrs": {
                    "providers": [
                      "SAML",
                      "OIDC",
                      "LDAP"
                    ]
                  }
                },
                {
                  "elementType": "component",
                  "name": "RoleMappingConfig",
                  "attrs": {
                    "mappings": {
                      "bindingPath": "roleMappings"
                    }
                  }
                },
                {
                  "elementType": "component",
                  "name": "UserSyncSettings",
                  "attrs": {
                    "syncOptions": {
                      "bindingPath": "syncSettings"
                    }
                  }
                }
              ]
            },
            "stateDefinitions": {
              "ssoProviders": {
                "type": "array",
                "defaultValue": []
              },
              "roleMappings": {
                "type": "object",
                "defaultValue": {}
              },
              "syncSettings": {
                "type": "object",
                "defaultValue": {}
              }
            }
          }
        }
      ],
      "logic_nodes": [
        {
          "id": "application_lifecycle",
          "type": "logic",
          "name": "Application Lifecycle Management",
          "description": "Core application startup, initialization, and shutdown orchestration with service management",
          "path": "src/backend/base/langflow/main.py",
          "workflow_states": [
            "initializing",
            "services_starting",
            "ready",
            "processing",
            "shutting_down"
          ],
          "statechart": {
            "id": "applicationLifecycleStatechart",
            "initial": "initializing",
            "states": {
              "initializing": {
                "entry": [
                  "setup_llm_caching",
                  "initialize_superuser"
                ],
                "on": {
                  "BUNDLES_LOADED": "services_starting",
                  "INITIALIZATION_FAILED": "error"
                }
              },
              "services_starting": {
                "entry": [
                  "load_bundles",
                  "cache_types",
                  "create_starter_projects"
                ],
                "on": {
                  "SERVICES_STARTED": "ready",
                  "SERVICE_FAILED": "error"
                }
              },
              "ready": {
                "entry": [
                  "start_telemetry",
                  "load_flows",
                  "load_mcp_servers"
                ],
                "on": {
                  "PROCESS_REQUEST": "processing",
                  "SHUTDOWN_REQUESTED": "shutting_down"
                }
              },
              "processing": {
                "on": {
                  "PROCESSING_COMPLETE": "ready",
                  "SHUTDOWN_REQUESTED": "shutting_down",
                  "ERROR_OCCURRED": "error"
                }
              },
              "shutting_down": {
                "entry": [
                  "stop_services",
                  "cleanup_tasks",
                  "teardown_services"
                ],
                "on": {
                  "SHUTDOWN_COMPLETE": "stopped"
                }
              },
              "error": {
                "on": {
                  "RESTART": "initializing",
                  "SHUTDOWN_REQUESTED": "shutting_down"
                }
              },
              "stopped": {
                "type": "final",
                "entry": [
                  "clean_temp_files"
                ]
              }
            }
          },
          "business_logic": {
            "initialization_sequence": [
              "setup_llm_caching",
              "initialize_superuser",
              "load_bundles",
              "cache_types",
              "create_starter_projects",
              "start_telemetry",
              "load_flows",
              "load_mcp_servers"
            ],
            "shutdown_sequence": [
              "stop_services",
              "cleanup_tasks",
              "teardown_services",
              "clean_temp_files"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "flow_execution_engine",
          "type": "logic",
          "name": "Flow Execution Engine",
          "description": "Graph-based flow execution with dependency resolution, parallel processing, and state management",
          "path": "src/backend/base/langflow/graph/graph/",
          "workflow_states": [
            "draft",
            "validating",
            "building",
            "running",
            "success",
            "error",
            "cancelled"
          ],
          "statechart": {
            "id": "flowExecutionStatechart",
            "initial": "draft",
            "states": {
              "draft": {
                "on": {
                  "START_VALIDATION": "validating"
                }
              },
              "validating": {
                "entry": [
                  "prepare_graph",
                  "sort_vertices"
                ],
                "on": {
                  "VALIDATION_SUCCESS": "building",
                  "VALIDATION_FAILED": "error",
                  "CYCLES_DETECTED": "error"
                }
              },
              "building": {
                "entry": [
                  "detect_cycles",
                  "build_vertices"
                ],
                "on": {
                  "BUILD_SUCCESS": "running",
                  "BUILD_FAILED": "error"
                }
              },
              "running": {
                "entry": [
                  "execute_vertices"
                ],
                "states": {
                  "streaming": {
                    "on": {
                      "SWITCH_TO_BATCH": "batch",
                      "ENABLE_DEBUG": "debug"
                    }
                  },
                  "batch": {
                    "on": {
                      "SWITCH_TO_STREAMING": "streaming",
                      "ENABLE_DEBUG": "debug"
                    }
                  },
                  "debug": {
                    "on": {
                      "DISABLE_DEBUG": "streaming"
                    }
                  }
                },
                "initial": "streaming",
                "on": {
                  "EXECUTION_SUCCESS": "success",
                  "EXECUTION_FAILED": "error",
                  "CANCEL_EXECUTION": "cancelled"
                }
              },
              "success": {
                "entry": [
                  "collect_results"
                ],
                "on": {
                  "RESTART": "draft"
                }
              },
              "error": {
                "entry": [
                  "handle_error"
                ],
                "on": {
                  "RETRY": "validating",
                  "ROLLBACK": "draft",
                  "PARTIAL_EXECUTION": "success"
                }
              },
              "cancelled": {
                "entry": [
                  "cleanup_resources"
                ],
                "on": {
                  "RESTART": "draft"
                }
              }
            }
          },
          "business_logic": {
            "build_process": [
              "prepare_graph",
              "sort_vertices",
              "detect_cycles",
              "execute_vertices",
              "collect_results"
            ],
            "execution_modes": [
              "streaming",
              "batch",
              "debug"
            ],
            "error_handling": [
              "graceful_degradation",
              "partial_execution",
              "rollback"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "job_queue_system",
          "type": "logic",
          "name": "Asynchronous Job Queue System",
          "description": "Background job processing with event streaming, cancellation support, and resource management",
          "path": "src/backend/base/langflow/services/job_queue/",
          "workflow_states": [
            "creating",
            "queued",
            "running",
            "completed",
            "failed",
            "cancelled"
          ],
          "statechart": {
            "id": "jobQueueStatechart",
            "initial": "creating",
            "states": {
              "creating": {
                "entry": [
                  "create_job",
                  "validate_parameters"
                ],
                "on": {
                  "JOB_CREATED": "queued",
                  "VALIDATION_FAILED": "failed"
                }
              },
              "queued": {
                "entry": [
                  "queue_job",
                  "assign_priority"
                ],
                "on": {
                  "START_PROCESSING": "running",
                  "CANCEL_JOB": "cancelled",
                  "TIMEOUT": "failed"
                }
              },
              "running": {
                "entry": [
                  "process_job",
                  "start_event_streaming"
                ],
                "states": {
                  "streaming": {
                    "entry": [
                      "setup_stream"
                    ],
                    "on": {
                      "SWITCH_TO_POLLING": "polling"
                    }
                  },
                  "polling": {
                    "entry": [
                      "setup_polling"
                    ],
                    "on": {
                      "SWITCH_TO_STREAMING": "streaming",
                      "SWITCH_TO_DIRECT": "direct"
                    }
                  },
                  "direct": {
                    "entry": [
                      "setup_direct_delivery"
                    ],
                    "on": {
                      "SWITCH_TO_STREAMING": "streaming"
                    }
                  }
                },
                "initial": "streaming",
                "on": {
                  "JOB_COMPLETED": "completed",
                  "JOB_FAILED": "failed",
                  "CANCEL_JOB": "cancelled",
                  "TIMEOUT": "failed"
                }
              },
              "completed": {
                "entry": [
                  "stream_final_events",
                  "cleanup_resources"
                ],
                "on": {
                  "ARCHIVE": "archived"
                }
              },
              "failed": {
                "entry": [
                  "log_error",
                  "cleanup_resources"
                ],
                "on": {
                  "RETRY": "queued",
                  "ARCHIVE": "archived"
                }
              },
              "cancelled": {
                "entry": [
                  "stop_processing",
                  "cleanup_resources"
                ],
                "on": {
                  "ARCHIVE": "archived"
                }
              },
              "archived": {
                "type": "final",
                "entry": [
                  "grace_period_cleanup"
                ]
              }
            }
          },
          "business_logic": {
            "job_lifecycle": [
              "create_job",
              "queue_job",
              "process_job",
              "stream_events",
              "cleanup_resources"
            ],
            "event_delivery_modes": [
              "streaming",
              "polling",
              "direct"
            ],
            "resource_management": [
              "grace_period_cleanup",
              "memory_limits",
              "timeout_handling"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "authentication_system",
          "type": "logic",
          "name": "Authentication and Authorization System",
          "description": "JWT-based authentication with API key support, session management, and user isolation",
          "path": "src/backend/base/langflow/services/auth/",
          "workflow_states": [
            "unauthenticated",
            "authenticating",
            "authenticated",
            "token_expired",
            "refreshing"
          ],
          "statechart": {
            "id": "authStatechart",
            "initial": "unauthenticated",
            "states": {
              "unauthenticated": {
                "on": {
                  "LOGIN_REQUEST": "authenticating",
                  "API_KEY_PROVIDED": "validating_api_key"
                }
              },
              "authenticating": {
                "entry": [
                  "validate_credentials",
                  "check_rate_limits"
                ],
                "on": {
                  "CREDENTIALS_VALID": "generating_token",
                  "CREDENTIALS_INVALID": "unauthenticated",
                  "RATE_LIMITED": "rate_limited",
                  "ACCOUNT_LOCKED": "locked"
                }
              },
              "validating_api_key": {
                "entry": [
                  "hash_api_key",
                  "check_usage_limits"
                ],
                "on": {
                  "API_KEY_VALID": "authenticated",
                  "API_KEY_INVALID": "unauthenticated",
                  "USAGE_EXCEEDED": "rate_limited"
                }
              },
              "generating_token": {
                "entry": [
                  "hash_password",
                  "generate_jwt",
                  "encrypt_token"
                ],
                "on": {
                  "TOKEN_GENERATED": "creating_session",
                  "TOKEN_GENERATION_FAILED": "unauthenticated"
                }
              },
              "creating_session": {
                "entry": [
                  "create_user_session",
                  "apply_data_scoping"
                ],
                "on": {
                  "SESSION_CREATED": "authenticated",
                  "SESSION_FAILED": "unauthenticated"
                }
              },
              "authenticated": {
                "entry": [
                  "check_permissions",
                  "apply_resource_access_control"
                ],
                "on": {
                  "LOGOUT": "unauthenticated",
                  "TOKEN_EXPIRED": "refreshing",
                  "SESSION_TIMEOUT": "unauthenticated",
                  "PERMISSION_DENIED": "insufficient_permissions"
                }
              },
              "refreshing": {
                "entry": [
                  "validate_refresh_token"
                ],
                "on": {
                  "REFRESH_SUCCESS": "generating_token",
                  "REFRESH_FAILED": "unauthenticated"
                }
              },
              "rate_limited": {
                "entry": [
                  "log_rate_limit_violation"
                ],
                "after": {
                  "RATE_LIMIT_TIMEOUT": "unauthenticated"
                }
              },
              "locked": {
                "entry": [
                  "log_account_lock"
                ],
                "on": {
                  "UNLOCK_ACCOUNT": "unauthenticated"
                }
              },
              "insufficient_permissions": {
                "entry": [
                  "log_permission_denial"
                ],
                "on": {
                  "REQUEST_PERMISSION": "authenticated",
                  "LOGOUT": "unauthenticated"
                }
              }
            }
          },
          "business_logic": {
            "auth_flows": [
              "credential_validation",
              "token_generation",
              "session_creation",
              "permission_check"
            ],
            "security_measures": [
              "password_hashing",
              "token_encryption",
              "api_key_hashing",
              "rate_limiting"
            ],
            "user_isolation": [
              "data_scoping",
              "resource_access_control",
              "cross_tenant_protection"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "real_time_event_system",
          "type": "logic",
          "name": "Real-time Event Management System",
          "description": "Event-driven architecture with WebSocket/SSE support, queue management, and delivery guarantees",
          "path": "src/backend/base/langflow/events/",
          "workflow_states": [
            "event_received",
            "event_validated",
            "event_queued",
            "event_processing",
            "event_delivered"
          ],
          "statechart": {
            "id": "realTimeEventStatechart",
            "initial": "event_received",
            "states": {
              "event_received": {
                "entry": [
                  "capture_timestamp",
                  "assign_event_id"
                ],
                "on": {
                  "START_VALIDATION": "event_validated",
                  "INVALID_FORMAT": "rejected"
                }
              },
              "event_validated": {
                "entry": [
                  "validate_schema",
                  "classify_event_type"
                ],
                "states": {
                  "build_event": {
                    "entry": [
                      "process_build_context"
                    ]
                  },
                  "message_event": {
                    "entry": [
                      "process_message_context"
                    ]
                  },
                  "system_event": {
                    "entry": [
                      "process_system_context"
                    ]
                  },
                  "user_event": {
                    "entry": [
                      "process_user_context"
                    ]
                  }
                },
                "on": {
                  "VALIDATION_SUCCESS": "event_queued",
                  "VALIDATION_FAILED": "rejected"
                }
              },
              "event_queued": {
                "entry": [
                  "add_to_queue",
                  "apply_priority"
                ],
                "on": {
                  "START_PROCESSING": "event_processing",
                  "QUEUE_FULL": "backpressure"
                }
              },
              "event_processing": {
                "entry": [
                  "select_delivery_mechanism"
                ],
                "states": {
                  "server_sent_events": {
                    "entry": [
                      "setup_sse_connection"
                    ],
                    "on": {
                      "CONNECTION_LOST": "retry",
                      "DELIVERY_SUCCESS": "#event_delivered"
                    }
                  },
                  "websocket": {
                    "entry": [
                      "setup_websocket_connection"
                    ],
                    "on": {
                      "CONNECTION_LOST": "retry",
                      "DELIVERY_SUCCESS": "#event_delivered"
                    }
                  },
                  "polling": {
                    "entry": [
                      "store_for_polling"
                    ],
                    "on": {
                      "POLL_REQUEST": "#event_delivered",
                      "POLLING_TIMEOUT": "retry"
                    }
                  },
                  "retry": {
                    "entry": [
                      "increment_retry_count"
                    ],
                    "on": {
                      "RETRY_DELIVERY": "server_sent_events",
                      "MAX_RETRIES_EXCEEDED": "dead_letter"
                    }
                  },
                  "dead_letter": {
                    "entry": [
                      "send_to_dead_letter_queue"
                    ],
                    "on": {
                      "MANUAL_RETRY": "server_sent_events"
                    }
                  }
                },
                "initial": "server_sent_events"
              },
              "event_delivered": {
                "id": "event_delivered",
                "entry": [
                  "confirm_delivery",
                  "update_metrics"
                ],
                "type": "final"
              },
              "backpressure": {
                "entry": [
                  "apply_backpressure"
                ],
                "on": {
                  "QUEUE_AVAILABLE": "event_queued",
                  "DROP_EVENT": "rejected"
                }
              },
              "rejected": {
                "entry": [
                  "log_rejection",
                  "update_error_metrics"
                ],
                "type": "final"
              }
            }
          },
          "business_logic": {
            "event_types": [
              "build_events",
              "message_events",
              "system_events",
              "user_events"
            ],
            "delivery_mechanisms": [
              "server_sent_events",
              "websocket",
              "polling"
            ],
            "reliability": [
              "delivery_guarantees",
              "retry_logic",
              "dead_letter_queues"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "component_management",
          "type": "logic",
          "name": "Component Lifecycle Management",
          "description": "Dynamic component loading, caching, validation, and execution with hot-reloading support",
          "path": "src/backend/base/langflow/components/",
          "workflow_states": [
            "unloaded",
            "loading",
            "validating",
            "cached",
            "executing",
            "error"
          ],
          "statechart": {
            "id": "componentManagementStatechart",
            "initial": "unloaded",
            "states": {
              "unloaded": {
                "on": {
                  "LOAD_COMPONENT": "loading",
                  "HOT_RELOAD_DETECTED": "loading"
                }
              },
              "loading": {
                "entry": [
                  "start_dynamic_import",
                  "setup_file_watching"
                ],
                "on": {
                  "IMPORT_SUCCESS": "validating",
                  "IMPORT_FAILED": "error",
                  "DEPENDENCY_MISSING": "resolving_dependencies"
                }
              },
              "resolving_dependencies": {
                "entry": [
                  "analyze_dependencies",
                  "fetch_missing_dependencies"
                ],
                "on": {
                  "DEPENDENCIES_RESOLVED": "loading",
                  "DEPENDENCY_CONFLICT": "error",
                  "CIRCULAR_DEPENDENCY": "error"
                }
              },
              "validating": {
                "entry": [
                  "validate_template",
                  "check_schema_compliance"
                ],
                "on": {
                  "VALIDATION_SUCCESS": "caching",
                  "VALIDATION_FAILED": "error"
                }
              },
              "caching": {
                "entry": [
                  "cache_template",
                  "cache_metadata"
                ],
                "states": {
                  "template_caching": {
                    "entry": [
                      "store_template_cache"
                    ]
                  },
                  "instance_caching": {
                    "entry": [
                      "prepare_instance_cache"
                    ]
                  },
                  "result_caching": {
                    "entry": [
                      "setup_result_cache"
                    ]
                  }
                },
                "type": "parallel",
                "on": {
                  "CACHING_COMPLETE": "cached",
                  "CACHE_ERROR": "error"
                }
              },
              "cached": {
                "entry": [
                  "mark_ready_for_execution"
                ],
                "on": {
                  "EXECUTE_COMPONENT": "executing",
                  "INVALIDATE_CACHE": "loading",
                  "FILE_CHANGED": "hot_reloading"
                }
              },
              "hot_reloading": {
                "entry": [
                  "invalidate_cache",
                  "track_changes"
                ],
                "on": {
                  "RELOAD_COMPLETE": "loading",
                  "RELOAD_FAILED": "cached"
                }
              },
              "executing": {
                "entry": [
                  "create_component_instance",
                  "setup_execution_context"
                ],
                "on": {
                  "EXECUTION_SUCCESS": "cached",
                  "EXECUTION_FAILED": "error",
                  "CACHE_RESULT": "caching"
                }
              },
              "error": {
                "entry": [
                  "log_error",
                  "cleanup_partial_state"
                ],
                "on": {
                  "RETRY_LOAD": "loading",
                  "RESET_COMPONENT": "unloaded"
                }
              }
            }
          },
          "business_logic": {
            "component_lifecycle": [
              "dynamic_import",
              "template_validation",
              "dependency_resolution",
              "instance_creation"
            ],
            "caching_strategy": [
              "template_cache",
              "instance_cache",
              "result_cache"
            ],
            "hot_reloading": [
              "file_watching",
              "cache_invalidation",
              "dependency_tracking"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "graph_state_management",
          "type": "logic",
          "name": "Graph State Management",
          "description": "Vertex state tracking, dependency resolution, and execution coordination with cycle detection",
          "path": "src/backend/base/langflow/graph/vertex/",
          "workflow_states": [
            "not_started",
            "building",
            "built",
            "running",
            "completed",
            "error"
          ],
          "statechart": {
            "id": "graphStateManagementStatechart",
            "initial": "not_started",
            "states": {
              "not_started": {
                "on": {
                  "BEGIN_BUILD": "building"
                }
              },
              "building": {
                "entry": [
                  "track_vertex_states",
                  "validate_edges"
                ],
                "states": {
                  "dependency_analysis": {
                    "entry": [
                      "build_dependency_graph",
                      "determine_execution_order"
                    ],
                    "on": {
                      "CYCLES_DETECTED": "cycle_resolution",
                      "DEPENDENCIES_RESOLVED": "#build_complete"
                    }
                  },
                  "cycle_resolution": {
                    "entry": [
                      "detect_cycles",
                      "apply_max_iterations"
                    ],
                    "on": {
                      "CYCLES_RESOLVED": "dependency_analysis",
                      "CYCLES_UNRESOLVABLE": "#error"
                    }
                  }
                },
                "initial": "dependency_analysis",
                "on": {
                  "BUILD_SUCCESS": "built",
                  "BUILD_FAILED": "error"
                }
              },
              "built": {
                "id": "build_complete",
                "entry": [
                  "finalize_dependency_graph",
                  "prepare_execution_plan"
                ],
                "on": {
                  "START_EXECUTION": "running",
                  "REBUILD_REQUIRED": "building"
                }
              },
              "running": {
                "entry": [
                  "allocate_resources",
                  "ensure_thread_safety"
                ],
                "states": {
                  "sequential_execution": {
                    "entry": [
                      "execute_vertices_sequentially"
                    ]
                  },
                  "parallel_execution": {
                    "entry": [
                      "execute_independent_vertices_parallel"
                    ],
                    "states": {
                      "resource_management": {
                        "entry": [
                          "monitor_resource_usage"
                        ]
                      },
                      "thread_coordination": {
                        "entry": [
                          "coordinate_thread_execution"
                        ]
                      }
                    },
                    "type": "parallel"
                  }
                },
                "initial": "parallel_execution",
                "on": {
                  "EXECUTION_COMPLETE": "completed",
                  "EXECUTION_FAILED": "error",
                  "RESOURCE_EXHAUSTED": "error"
                }
              },
              "completed": {
                "entry": [
                  "collect_results",
                  "cleanup_resources"
                ],
                "on": {
                  "RESTART_EXECUTION": "not_started"
                }
              },
              "error": {
                "id": "error",
                "entry": [
                  "log_error_details",
                  "cleanup_partial_execution"
                ],
                "on": {
                  "RETRY_BUILD": "building",
                  "RESET_STATE": "not_started"
                }
              }
            }
          },
          "business_logic": {
            "state_tracking": [
              "vertex_states",
              "edge_validation",
              "dependency_graph",
              "execution_order"
            ],
            "cycle_handling": [
              "cycle_detection",
              "max_iterations",
              "cache_control"
            ],
            "parallelization": [
              "independent_execution",
              "resource_allocation",
              "thread_safety"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "validation_engine",
          "type": "logic",
          "name": "Multi-layer Validation Engine",
          "description": "Comprehensive input validation with schema validation, business rules, and data integrity checks",
          "path": "src/backend/base/langflow/api/",
          "workflow_states": [
            "schema_validation",
            "business_validation",
            "integrity_validation",
            "validated",
            "rejected"
          ],
          "statechart": {
            "id": "validationEngineStatechart",
            "initial": "schema_validation",
            "states": {
              "schema_validation": {
                "entry": [
                  "apply_pydantic_schema",
                  "check_field_types"
                ],
                "on": {
                  "SCHEMA_VALID": "business_validation",
                  "SCHEMA_INVALID": "collecting_errors",
                  "FIELD_ERROR": "collecting_errors"
                }
              },
              "business_validation": {
                "entry": [
                  "apply_business_rules",
                  "check_constraints"
                ],
                "states": {
                  "constraint_checking": {
                    "entry": [
                      "validate_constraints"
                    ]
                  },
                  "custom_validation": {
                    "entry": [
                      "run_custom_validators"
                    ]
                  },
                  "performance_optimization": {
                    "states": {
                      "caching": {
                        "entry": [
                          "check_validation_cache"
                        ]
                      },
                      "lazy_validation": {
                        "entry": [
                          "defer_expensive_validations"
                        ]
                      },
                      "batch_processing": {
                        "entry": [
                          "batch_similar_validations"
                        ]
                      }
                    },
                    "type": "parallel"
                  }
                },
                "type": "parallel",
                "on": {
                  "BUSINESS_RULES_VALID": "integrity_validation",
                  "CONSTRAINT_VIOLATION": "collecting_errors",
                  "BUSINESS_RULE_FAILED": "collecting_errors"
                }
              },
              "integrity_validation": {
                "entry": [
                  "check_data_integrity",
                  "validate_relationships"
                ],
                "on": {
                  "INTEGRITY_VALID": "validated",
                  "INTEGRITY_VIOLATION": "collecting_errors"
                }
              },
              "collecting_errors": {
                "entry": [
                  "aggregate_field_errors",
                  "format_error_messages"
                ],
                "on": {
                  "ERRORS_COLLECTED": "rejected"
                }
              },
              "validated": {
                "entry": [
                  "mark_validation_success",
                  "cache_validation_result"
                ],
                "type": "final"
              },
              "rejected": {
                "entry": [
                  "provide_error_feedback",
                  "suggest_corrections"
                ],
                "type": "final"
              }
            }
          },
          "business_logic": {
            "validation_layers": [
              "pydantic_schema_validation",
              "business_rule_validation",
              "data_integrity_validation"
            ],
            "error_handling": [
              "field_errors",
              "constraint_violations",
              "custom_validations"
            ],
            "performance": [
              "validation_caching",
              "lazy_validation",
              "batch_validation"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "caching_system",
          "type": "logic",
          "name": "Multi-level Caching System",
          "description": "Hierarchical caching with TTL management, cache invalidation, and performance optimization",
          "path": "src/backend/base/langflow/services/cache/",
          "workflow_states": [
            "cache_miss",
            "loading",
            "cached",
            "stale",
            "invalidated"
          ],
          "statechart": {
            "id": "cachingSystemStatechart",
            "initial": "cache_miss",
            "states": {
              "cache_miss": {
                "entry": [
                  "log_cache_miss",
                  "identify_cache_level"
                ],
                "on": {
                  "START_LOADING": "loading"
                }
              },
              "loading": {
                "entry": [
                  "fetch_data",
                  "apply_compression"
                ],
                "states": {
                  "graph_cache_loading": {
                    "entry": [
                      "load_graph_data"
                    ]
                  },
                  "component_cache_loading": {
                    "entry": [
                      "load_component_data"
                    ]
                  },
                  "api_response_cache_loading": {
                    "entry": [
                      "load_api_response"
                    ]
                  },
                  "vertex_result_cache_loading": {
                    "entry": [
                      "load_vertex_results"
                    ]
                  }
                },
                "on": {
                  "DATA_LOADED": "serializing",
                  "LOAD_FAILED": "cache_miss"
                }
              },
              "serializing": {
                "entry": [
                  "serialize_data",
                  "optimize_storage"
                ],
                "on": {
                  "SERIALIZATION_COMPLETE": "storing",
                  "SERIALIZATION_FAILED": "cache_miss"
                }
              },
              "storing": {
                "entry": [
                  "store_in_cache",
                  "set_ttl",
                  "manage_memory"
                ],
                "on": {
                  "STORAGE_SUCCESS": "cached",
                  "STORAGE_FAILED": "cache_miss",
                  "MEMORY_FULL": "evicting"
                }
              },
              "cached": {
                "entry": [
                  "mark_cache_hit",
                  "update_access_time"
                ],
                "on": {
                  "TTL_EXPIRED": "stale",
                  "DEPENDENCY_CHANGED": "invalidated",
                  "MANUAL_INVALIDATION": "invalidated",
                  "CACHE_HIT": "cached"
                }
              },
              "stale": {
                "entry": [
                  "mark_as_stale"
                ],
                "on": {
                  "REFRESH_CACHE": "loading",
                  "INVALIDATE": "invalidated",
                  "SERVE_STALE": "cached"
                }
              },
              "invalidated": {
                "entry": [
                  "remove_from_cache",
                  "cleanup_memory"
                ],
                "on": {
                  "RELOAD_REQUESTED": "cache_miss"
                }
              },
              "evicting": {
                "entry": [
                  "apply_eviction_policy",
                  "free_memory"
                ],
                "on": {
                  "EVICTION_COMPLETE": "storing",
                  "EVICTION_FAILED": "cache_miss"
                }
              }
            }
          },
          "business_logic": {
            "cache_levels": [
              "graph_cache",
              "component_cache",
              "api_response_cache",
              "vertex_result_cache"
            ],
            "invalidation_strategies": [
              "ttl_expiration",
              "dependency_invalidation",
              "manual_invalidation"
            ],
            "optimization": [
              "compression",
              "serialization",
              "memory_management"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "error_handling_system",
          "type": "logic",
          "name": "Comprehensive Error Handling System",
          "description": "Multi-level error handling with recovery strategies, logging, and user feedback",
          "path": "src/backend/base/langflow/exceptions/",
          "workflow_states": [
            "error_detected",
            "error_classified",
            "recovery_attempted",
            "escalated",
            "resolved"
          ],
          "statechart": {
            "id": "errorHandlingStatechart",
            "initial": "error_detected",
            "states": {
              "error_detected": {
                "entry": [
                  "capture_error_context",
                  "timestamp_error"
                ],
                "on": {
                  "START_CLASSIFICATION": "error_classified"
                }
              },
              "error_classified": {
                "entry": [
                  "analyze_error_type",
                  "determine_severity"
                ],
                "states": {
                  "component_build_error": {
                    "entry": [
                      "handle_build_failure"
                    ]
                  },
                  "streaming_error": {
                    "entry": [
                      "handle_stream_failure"
                    ]
                  },
                  "job_queue_error": {
                    "entry": [
                      "handle_job_failure"
                    ]
                  },
                  "validation_error": {
                    "entry": [
                      "handle_validation_failure"
                    ]
                  }
                },
                "on": {
                  "CLASSIFICATION_COMPLETE": "recovery_attempted",
                  "UNKNOWN_ERROR_TYPE": "escalated"
                }
              },
              "recovery_attempted": {
                "entry": [
                  "select_recovery_strategy"
                ],
                "states": {
                  "graceful_degradation": {
                    "entry": [
                      "reduce_functionality",
                      "maintain_core_services"
                    ],
                    "on": {
                      "DEGRADATION_SUCCESS": "#resolved",
                      "DEGRADATION_FAILED": "#escalated"
                    }
                  },
                  "retry_mechanism": {
                    "entry": [
                      "increment_retry_count",
                      "apply_backoff"
                    ],
                    "on": {
                      "RETRY_SUCCESS": "#resolved",
                      "MAX_RETRIES_EXCEEDED": "circuit_breaker",
                      "RETRY_FAILED": "circuit_breaker"
                    }
                  },
                  "circuit_breaker": {
                    "entry": [
                      "open_circuit",
                      "route_to_fallback"
                    ],
                    "states": {
                      "open": {
                        "entry": [
                          "block_requests"
                        ],
                        "after": {
                          "CIRCUIT_TIMEOUT": "half_open"
                        }
                      },
                      "half_open": {
                        "entry": [
                          "allow_test_requests"
                        ],
                        "on": {
                          "TEST_SUCCESS": "closed",
                          "TEST_FAILED": "open"
                        }
                      },
                      "closed": {
                        "entry": [
                          "resume_normal_operation"
                        ]
                      }
                    },
                    "initial": "open",
                    "on": {
                      "FALLBACK_SUCCESS": "#resolved",
                      "FALLBACK_FAILED": "#escalated"
                    }
                  },
                  "fallback_response": {
                    "entry": [
                      "provide_default_response",
                      "log_fallback_usage"
                    ],
                    "on": {
                      "FALLBACK_SERVED": "#resolved"
                    }
                  }
                },
                "initial": "retry_mechanism"
              },
              "escalated": {
                "id": "escalated",
                "entry": [
                  "notify_administrators",
                  "create_incident_ticket"
                ],
                "on": {
                  "MANUAL_RESOLUTION": "resolved",
                  "SYSTEM_RESTART_REQUIRED": "system_restart"
                }
              },
              "resolved": {
                "id": "resolved",
                "entry": [
                  "generate_user_friendly_message",
                  "provide_recovery_suggestions",
                  "report_resolution"
                ],
                "type": "final"
              },
              "system_restart": {
                "entry": [
                  "initiate_graceful_restart"
                ],
                "type": "final"
              }
            }
          },
          "business_logic": {
            "error_classification": [
              "component_build_errors",
              "streaming_errors",
              "job_queue_errors",
              "validation_errors"
            ],
            "recovery_strategies": [
              "graceful_degradation",
              "retry_mechanisms",
              "circuit_breakers",
              "fallback_responses"
            ],
            "user_experience": [
              "user_friendly_messages",
              "recovery_suggestions",
              "error_reporting"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "security_access_control",
          "type": "logic",
          "name": "Security and Access Control System",
          "description": "Comprehensive security with RBAC, data isolation, input sanitization, and audit logging",
          "path": "src/backend/base/langflow/services/security/",
          "workflow_states": [
            "access_requested",
            "identity_verified",
            "permissions_checked",
            "access_granted",
            "access_denied"
          ],
          "statechart": {
            "id": "securityAccessControlStatechart",
            "initial": "access_requested",
            "states": {
              "access_requested": {
                "entry": [
                  "capture_access_request",
                  "identify_user_context"
                ],
                "on": {
                  "START_VERIFICATION": "identity_verified"
                }
              },
              "identity_verified": {
                "entry": [
                  "verify_user_identity",
                  "check_session_validity"
                ],
                "on": {
                  "IDENTITY_VALID": "permissions_checked",
                  "IDENTITY_INVALID": "access_denied",
                  "SESSION_EXPIRED": "access_denied"
                }
              },
              "permissions_checked": {
                "entry": [
                  "check_role_based_permissions",
                  "validate_resource_access"
                ],
                "states": {
                  "rbac_validation": {
                    "entry": [
                      "validate_user_roles",
                      "check_permission_matrix"
                    ],
                    "on": {
                      "ROLE_AUTHORIZED": "#resource_validation",
                      "ROLE_DENIED": "#access_denied"
                    }
                  },
                  "resource_validation": {
                    "entry": [
                      "validate_resource_ownership",
                      "check_resource_permissions"
                    ],
                    "on": {
                      "RESOURCE_AUTHORIZED": "#isolation_check",
                      "RESOURCE_DENIED": "#access_denied"
                    }
                  },
                  "isolation_check": {
                    "entry": [
                      "enforce_user_isolation",
                      "prevent_cross_tenant_access"
                    ],
                    "on": {
                      "ISOLATION_VALID": "#rate_limit_check",
                      "ISOLATION_VIOLATION": "#access_denied"
                    }
                  },
                  "rate_limit_check": {
                    "entry": [
                      "check_api_rate_limits",
                      "update_usage_counters"
                    ],
                    "on": {
                      "RATE_LIMIT_OK": "#data_protection",
                      "RATE_LIMIT_EXCEEDED": "#access_denied"
                    }
                  },
                  "data_protection": {
                    "entry": [
                      "sanitize_input",
                      "filter_output",
                      "mask_sensitive_data"
                    ],
                    "states": {
                      "input_sanitization": {
                        "entry": [
                          "remove_malicious_content",
                          "validate_input_format"
                        ]
                      },
                      "output_filtering": {
                        "entry": [
                          "filter_sensitive_fields",
                          "apply_field_level_security"
                        ]
                      },
                      "data_masking": {
                        "entry": [
                          "mask_pii",
                          "encrypt_at_rest"
                        ]
                      }
                    },
                    "type": "parallel",
                    "on": {
                      "DATA_PROTECTION_COMPLETE": "#access_granted"
                    }
                  }
                },
                "initial": "rbac_validation"
              },
              "access_granted": {
                "id": "access_granted",
                "entry": [
                  "log_successful_access",
                  "track_resource_usage",
                  "start_compliance_audit"
                ],
                "on": {
                  "SESSION_TIMEOUT": "access_denied",
                  "PERMISSIONS_REVOKED": "access_denied"
                }
              },
              "access_denied": {
                "id": "access_denied",
                "entry": [
                  "log_access_denial",
                  "increment_failure_counter",
                  "generate_audit_trail"
                ],
                "on": {
                  "RETRY_ACCESS": "access_requested"
                },
                "type": "final"
              }
            }
          },
          "business_logic": {
            "access_control": [
              "role_based_permissions",
              "resource_level_access",
              "cross_user_isolation",
              "api_rate_limiting"
            ],
            "data_protection": [
              "input_sanitization",
              "output_filtering",
              "sensitive_data_masking",
              "encryption_at_rest"
            ],
            "audit_compliance": [
              "access_logging",
              "change_tracking",
              "compliance_reporting"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "websocket_sse_communication",
          "type": "logic",
          "name": "WebSocket and SSE Communication System",
          "description": "Real-time bidirectional communication with connection management, heartbeats, and failover",
          "path": "src/backend/base/langflow/api/v1/endpoints.py",
          "workflow_states": [
            "disconnected",
            "connecting",
            "connected",
            "streaming",
            "reconnecting"
          ],
          "statechart": {
            "id": "websocketSSEStatechart",
            "initial": "disconnected",
            "states": {
              "disconnected": {
                "entry": [
                  "cleanup_previous_connection"
                ],
                "on": {
                  "CONNECT": "connecting"
                }
              },
              "connecting": {
                "entry": [
                  "establish_connection",
                  "setup_connection_pool"
                ],
                "on": {
                  "CONNECTION_SUCCESS": "connected",
                  "CONNECTION_FAILED": "reconnecting",
                  "TIMEOUT": "reconnecting"
                }
              },
              "connected": {
                "entry": [
                  "start_heartbeat_monitoring",
                  "initialize_message_queue"
                ],
                "states": {
                  "idle": {
                    "on": {
                      "MESSAGE_TO_SEND": "streaming",
                      "HEARTBEAT_TIMEOUT": "reconnecting"
                    }
                  },
                  "streaming": {
                    "entry": [
                      "serialize_events",
                      "compress_messages"
                    ],
                    "states": {
                      "message_processing": {
                        "entry": [
                          "queue_messages",
                          "apply_bandwidth_optimization"
                        ],
                        "on": {
                          "MESSAGE_QUEUED": "message_delivery",
                          "QUEUE_FULL": "backpressure"
                        }
                      },
                      "message_delivery": {
                        "entry": [
                          "send_message",
                          "await_confirmation"
                        ],
                        "on": {
                          "DELIVERY_CONFIRMED": "message_processing",
                          "DELIVERY_FAILED": "error_recovery",
                          "CONNECTION_LOST": "#reconnecting"
                        }
                      },
                      "error_recovery": {
                        "entry": [
                          "retry_message_delivery",
                          "log_delivery_error"
                        ],
                        "on": {
                          "RECOVERY_SUCCESS": "message_delivery",
                          "RECOVERY_FAILED": "#reconnecting",
                          "MAX_RETRIES_EXCEEDED": "dead_letter"
                        }
                      },
                      "backpressure": {
                        "entry": [
                          "apply_backpressure",
                          "throttle_messages"
                        ],
                        "on": {
                          "PRESSURE_RELIEVED": "message_processing",
                          "CLIENT_DISCONNECT": "#disconnected"
                        }
                      },
                      "dead_letter": {
                        "entry": [
                          "move_to_dead_letter_queue"
                        ],
                        "on": {
                          "CONTINUE_PROCESSING": "message_processing"
                        }
                      }
                    },
                    "initial": "message_processing",
                    "on": {
                      "STREAMING_COMPLETE": "idle",
                      "CONNECTION_ERROR": "#reconnecting"
                    }
                  }
                },
                "initial": "idle",
                "on": {
                  "HEARTBEAT_FAILED": "reconnecting",
                  "CONNECTION_LOST": "reconnecting",
                  "DISCONNECT": "disconnected"
                }
              },
              "reconnecting": {
                "id": "reconnecting",
                "entry": [
                  "increment_reconnect_attempts",
                  "apply_exponential_backoff"
                ],
                "on": {
                  "RECONNECT_SUCCESS": "connected",
                  "RECONNECT_FAILED": "graceful_degradation",
                  "MAX_RECONNECT_ATTEMPTS": "graceful_degradation"
                }
              },
              "graceful_degradation": {
                "entry": [
                  "switch_to_polling",
                  "notify_degraded_service"
                ],
                "on": {
                  "RETRY_CONNECTION": "connecting",
                  "ACCEPT_DEGRADED_MODE": "disconnected"
                }
              }
            }
          },
          "business_logic": {
            "connection_management": [
              "connection_establishment",
              "heartbeat_monitoring",
              "automatic_reconnection",
              "graceful_degradation"
            ],
            "message_delivery": [
              "event_serialization",
              "message_queuing",
              "delivery_confirmation",
              "error_recovery"
            ],
            "performance": [
              "connection_pooling",
              "message_compression",
              "bandwidth_optimization"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "frontend_state_management",
          "type": "logic",
          "name": "Frontend State Management System",
          "description": "Zustand-based state management with cross-store communication, persistence, and synchronization",
          "path": "src/frontend/src/stores/",
          "workflow_states": [
            "store_initializing",
            "store_ready",
            "action_dispatched",
            "state_updated",
            "persisted"
          ],
          "statechart": {
            "id": "frontendStateManagementStatechart",
            "initial": "store_initializing",
            "states": {
              "store_initializing": {
                "entry": [
                  "initialize_stores",
                  "load_persisted_state"
                ],
                "states": {
                  "auth_store_init": {
                    "entry": [
                      "setup_auth_store"
                    ]
                  },
                  "flow_store_init": {
                    "entry": [
                      "setup_flow_store"
                    ]
                  },
                  "messages_store_init": {
                    "entry": [
                      "setup_messages_store"
                    ]
                  },
                  "voice_store_init": {
                    "entry": [
                      "setup_voice_store"
                    ]
                  },
                  "mcp_store_init": {
                    "entry": [
                      "setup_mcp_store"
                    ]
                  }
                },
                "type": "parallel",
                "on": {
                  "ALL_STORES_INITIALIZED": "store_ready",
                  "INITIALIZATION_FAILED": "error"
                }
              },
              "store_ready": {
                "entry": [
                  "enable_state_synchronization",
                  "setup_persistence_watchers"
                ],
                "on": {
                  "ACTION_DISPATCHED": "state_updated",
                  "SERVER_STATE_CHANGED": "syncing_server_state",
                  "OFFLINE_MODE": "offline_handling"
                }
              },
              "state_updated": {
                "entry": [
                  "apply_optimistic_updates",
                  "validate_state_changes"
                ],
                "states": {
                  "local_storage_update": {
                    "entry": [
                      "persist_to_local_storage"
                    ]
                  },
                  "session_storage_update": {
                    "entry": [
                      "persist_to_session_storage"
                    ]
                  },
                  "cookie_storage_update": {
                    "entry": [
                      "persist_to_cookies"
                    ]
                  }
                },
                "type": "parallel",
                "on": {
                  "STATE_PERSISTED": "persisted",
                  "PERSISTENCE_FAILED": "store_ready",
                  "CONFLICT_DETECTED": "resolving_conflicts"
                }
              },
              "syncing_server_state": {
                "entry": [
                  "fetch_server_state",
                  "compare_with_local_state"
                ],
                "on": {
                  "SYNC_SUCCESS": "state_updated",
                  "SYNC_CONFLICT": "resolving_conflicts",
                  "SYNC_FAILED": "store_ready"
                }
              },
              "resolving_conflicts": {
                "entry": [
                  "identify_conflicts",
                  "apply_conflict_resolution_strategy"
                ],
                "on": {
                  "CONFLICT_RESOLVED": "state_updated",
                  "MANUAL_RESOLUTION_REQUIRED": "awaiting_user_input"
                }
              },
              "awaiting_user_input": {
                "entry": [
                  "present_conflict_resolution_ui"
                ],
                "on": {
                  "USER_RESOLUTION": "state_updated",
                  "CANCEL_RESOLUTION": "store_ready"
                }
              },
              "offline_handling": {
                "entry": [
                  "enable_offline_mode",
                  "queue_offline_actions"
                ],
                "on": {
                  "ONLINE_RESTORED": "syncing_offline_changes",
                  "OFFLINE_ACTION": "offline_handling"
                }
              },
              "syncing_offline_changes": {
                "entry": [
                  "sync_queued_actions",
                  "resolve_offline_conflicts"
                ],
                "on": {
                  "OFFLINE_SYNC_COMPLETE": "store_ready",
                  "OFFLINE_SYNC_FAILED": "offline_handling"
                }
              },
              "persisted": {
                "entry": [
                  "confirm_persistence",
                  "cleanup_old_state"
                ],
                "on": {
                  "NEW_ACTION": "store_ready"
                }
              },
              "error": {
                "entry": [
                  "log_state_error",
                  "attempt_recovery"
                ],
                "on": {
                  "RECOVERY_SUCCESS": "store_ready",
                  "RECOVERY_FAILED": "store_initializing"
                }
              }
            }
          },
          "business_logic": {
            "store_architecture": [
              "auth_store",
              "flow_store",
              "messages_store",
              "voice_store",
              "mcp_store"
            ],
            "state_synchronization": [
              "optimistic_updates",
              "server_state_sync",
              "conflict_resolution",
              "offline_handling"
            ],
            "persistence": [
              "local_storage",
              "session_storage",
              "cookie_storage"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "mcp_integration_system",
          "type": "logic",
          "name": "Model Context Protocol Integration System",
          "description": "MCP server management, tool discovery, and execution coordination with per-project isolation",
          "path": "src/backend/base/langflow/services/mcp/",
          "workflow_states": [
            "server_disconnected",
            "connecting",
            "connected",
            "tool_discovery",
            "tool_execution"
          ],
          "statechart": {
            "id": "mcpIntegrationStatechart",
            "initial": "server_disconnected",
            "states": {
              "server_disconnected": {
                "entry": [
                  "cleanup_previous_connections"
                ],
                "on": {
                  "CONFIGURE_SERVER": "configuring_server",
                  "CONNECT_TO_SERVER": "connecting"
                }
              },
              "configuring_server": {
                "entry": [
                  "validate_server_configuration",
                  "apply_isolation_settings"
                ],
                "on": {
                  "CONFIGURATION_VALID": "connecting",
                  "CONFIGURATION_INVALID": "server_disconnected"
                }
              },
              "connecting": {
                "entry": [
                  "establish_mcp_connection",
                  "apply_resource_limits"
                ],
                "on": {
                  "CONNECTION_SUCCESS": "connected",
                  "CONNECTION_FAILED": "connection_retry",
                  "AUTHENTICATION_FAILED": "server_disconnected"
                }
              },
              "connection_retry": {
                "entry": [
                  "increment_retry_count",
                  "apply_backoff_delay"
                ],
                "on": {
                  "RETRY_CONNECTION": "connecting",
                  "MAX_RETRIES_EXCEEDED": "server_disconnected"
                }
              },
              "connected": {
                "entry": [
                  "start_health_monitoring",
                  "initialize_tool_discovery"
                ],
                "states": {
                  "idle": {
                    "on": {
                      "START_TOOL_DISCOVERY": "tool_discovery",
                      "EXECUTE_TOOL": "tool_execution"
                    }
                  },
                  "health_monitoring": {
                    "entry": [
                      "setup_health_checks"
                    ],
                    "on": {
                      "HEALTH_CHECK_FAILED": "#connecting",
                      "SERVER_OVERLOADED": "throttling"
                    }
                  }
                },
                "type": "parallel",
                "on": {
                  "CONNECTION_LOST": "connecting",
                  "SERVER_SHUTDOWN": "server_disconnected"
                }
              },
              "tool_discovery": {
                "entry": [
                  "request_available_tools",
                  "validate_tool_schemas"
                ],
                "on": {
                  "DISCOVERY_SUCCESS": "tool_registry_updated",
                  "DISCOVERY_FAILED": "connected",
                  "SCHEMA_VALIDATION_FAILED": "connected"
                }
              },
              "tool_registry_updated": {
                "entry": [
                  "update_tool_registry",
                  "cache_tool_metadata"
                ],
                "on": {
                  "REGISTRY_UPDATED": "connected"
                }
              },
              "tool_execution": {
                "entry": [
                  "validate_tool_command",
                  "setup_execution_environment"
                ],
                "states": {
                  "command_validation": {
                    "entry": [
                      "sanitize_command_input",
                      "check_security_constraints"
                    ],
                    "on": {
                      "VALIDATION_SUCCESS": "executing",
                      "VALIDATION_FAILED": "#execution_failed"
                    }
                  },
                  "executing": {
                    "entry": [
                      "isolate_execution_environment",
                      "monitor_resource_usage"
                    ],
                    "on": {
                      "EXECUTION_SUCCESS": "processing_results",
                      "EXECUTION_FAILED": "#execution_failed",
                      "RESOURCE_LIMIT_EXCEEDED": "#execution_failed",
                      "TIMEOUT": "#execution_failed"
                    }
                  },
                  "processing_results": {
                    "entry": [
                      "process_tool_results",
                      "validate_output"
                    ],
                    "on": {
                      "RESULTS_PROCESSED": "#execution_success",
                      "PROCESSING_FAILED": "#execution_failed"
                    }
                  }
                },
                "initial": "command_validation",
                "on": {
                  "EXECUTION_SUCCESS": "connected",
                  "EXECUTION_FAILED": "connected"
                }
              },
              "throttling": {
                "entry": [
                  "apply_rate_limiting",
                  "queue_pending_requests"
                ],
                "on": {
                  "THROTTLING_LIFTED": "connected",
                  "SERVER_RECOVERED": "connected"
                }
              }
            }
          },
          "business_logic": {
            "server_management": [
              "server_configuration",
              "connection_establishment",
              "health_monitoring",
              "server_isolation"
            ],
            "tool_integration": [
              "tool_discovery",
              "schema_validation",
              "execution_coordination",
              "result_processing"
            ],
            "security": [
              "command_validation",
              "environment_isolation",
              "resource_limits"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "voice_mode_system",
          "type": "logic",
          "name": "Voice Mode Processing System",
          "description": "Real-time voice processing with VAD, audio resampling, and multi-provider support",
          "path": "src/backend/base/langflow/services/voice/",
          "workflow_states": [
            "voice_inactive",
            "listening",
            "processing",
            "synthesizing",
            "speaking"
          ],
          "statechart": {
            "id": "voiceModeStatechart",
            "initial": "voice_inactive",
            "states": {
              "voice_inactive": {
                "entry": [
                  "disable_microphone",
                  "cleanup_audio_resources"
                ],
                "on": {
                  "ENABLE_VOICE": "initializing_voice",
                  "VOICE_BUTTON_PRESSED": "initializing_voice"
                }
              },
              "initializing_voice": {
                "entry": [
                  "request_microphone_permission",
                  "setup_audio_context"
                ],
                "on": {
                  "PERMISSION_GRANTED": "listening",
                  "PERMISSION_DENIED": "voice_inactive",
                  "SETUP_FAILED": "voice_inactive"
                }
              },
              "listening": {
                "entry": [
                  "start_voice_activity_detection",
                  "begin_audio_capture"
                ],
                "states": {
                  "audio_processing": {
                    "states": {
                      "vad_detection": {
                        "entry": [
                          "monitor_voice_activity"
                        ],
                        "on": {
                          "VOICE_DETECTED": "recording",
                          "SILENCE_DETECTED": "waiting"
                        }
                      },
                      "waiting": {
                        "entry": [
                          "maintain_listening_state"
                        ]
                      },
                      "recording": {
                        "entry": [
                          "start_audio_recording",
                          "apply_noise_reduction"
                        ],
                        "on": {
                          "VOICE_END_DETECTED": "#processing",
                          "RECORDING_TIMEOUT": "#processing",
                          "MANUAL_STOP": "#processing"
                        }
                      }
                    },
                    "initial": "vad_detection"
                  },
                  "websocket_streaming": {
                    "entry": [
                      "establish_realtime_connection",
                      "setup_low_latency_processing"
                    ],
                    "on": {
                      "CONNECTION_ESTABLISHED": "streaming_audio",
                      "CONNECTION_FAILED": "provider_fallback"
                    }
                  },
                  "streaming_audio": {
                    "entry": [
                      "stream_audio_chunks",
                      "manage_audio_buffer"
                    ],
                    "on": {
                      "STREAM_INTERRUPTED": "reconnecting",
                      "BUFFER_OVERFLOW": "buffer_management"
                    }
                  },
                  "buffer_management": {
                    "entry": [
                      "optimize_buffer_size",
                      "manage_memory_usage"
                    ],
                    "on": {
                      "BUFFER_OPTIMIZED": "streaming_audio"
                    }
                  }
                },
                "type": "parallel",
                "on": {
                  "PROCESSING_TRIGGERED": "processing",
                  "DISABLE_VOICE": "voice_inactive",
                  "ERROR_OCCURRED": "error_recovery"
                }
              },
              "processing": {
                "entry": [
                  "resample_audio",
                  "convert_audio_format"
                ],
                "states": {
                  "provider_selection": {
                    "states": {
                      "openai_processing": {
                        "entry": [
                          "send_to_openai_realtime_api"
                        ],
                        "on": {
                          "PROCESSING_SUCCESS": "#synthesizing",
                          "PROCESSING_FAILED": "#provider_fallback"
                        }
                      },
                      "elevenlabs_processing": {
                        "entry": [
                          "send_to_elevenlabs"
                        ],
                        "on": {
                          "PROCESSING_SUCCESS": "#synthesizing",
                          "PROCESSING_FAILED": "#provider_fallback"
                        }
                      },
                      "provider_fallback": {
                        "entry": [
                          "switch_to_backup_provider"
                        ],
                        "on": {
                          "FALLBACK_READY": "openai_processing"
                        }
                      }
                    },
                    "initial": "openai_processing"
                  },
                  "quality_optimization": {
                    "entry": [
                      "optimize_audio_quality",
                      "enhance_speech_clarity"
                    ]
                  }
                },
                "type": "parallel",
                "on": {
                  "PROCESSING_COMPLETE": "synthesizing",
                  "PROCESSING_FAILED": "error_recovery"
                }
              },
              "synthesizing": {
                "entry": [
                  "generate_speech_response",
                  "prepare_audio_output"
                ],
                "on": {
                  "SYNTHESIS_COMPLETE": "speaking",
                  "SYNTHESIS_FAILED": "error_recovery"
                }
              },
              "speaking": {
                "entry": [
                  "play_audio_response",
                  "monitor_playback"
                ],
                "on": {
                  "PLAYBACK_COMPLETE": "listening",
                  "PLAYBACK_INTERRUPTED": "listening",
                  "NEW_VOICE_INPUT": "processing"
                }
              },
              "error_recovery": {
                "entry": [
                  "log_voice_error",
                  "attempt_recovery"
                ],
                "on": {
                  "RECOVERY_SUCCESS": "listening",
                  "RECOVERY_FAILED": "voice_inactive"
                }
              },
              "reconnecting": {
                "entry": [
                  "attempt_reconnection",
                  "maintain_audio_state"
                ],
                "on": {
                  "RECONNECTION_SUCCESS": "streaming_audio",
                  "RECONNECTION_FAILED": "provider_fallback"
                }
              }
            }
          },
          "business_logic": {
            "audio_processing": [
              "voice_activity_detection",
              "audio_resampling",
              "noise_reduction",
              "format_conversion"
            ],
            "provider_integration": [
              "openai_realtime_api",
              "elevenlabs_integration",
              "provider_switching",
              "quality_optimization"
            ],
            "real_time_communication": [
              "websocket_streaming",
              "low_latency_processing",
              "buffer_management"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "file_management_system",
          "type": "logic",
          "name": "File Management System V2",
          "description": "Advanced file handling with storage providers, metadata management, and security controls",
          "path": "src/backend/base/langflow/services/file/",
          "workflow_states": [
            "file_upload",
            "processing",
            "stored",
            "accessed",
            "deleted"
          ],
          "statechart": {
            "id": "fileManagementStatechart",
            "initial": "file_upload",
            "states": {
              "file_upload": {
                "entry": [
                  "validate_upload_request",
                  "check_user_permissions"
                ],
                "on": {
                  "UPLOAD_VALID": "validating_file",
                  "UPLOAD_INVALID": "rejected",
                  "PERMISSION_DENIED": "rejected"
                }
              },
              "validating_file": {
                "entry": [
                  "validate_file_type",
                  "check_file_size",
                  "scan_for_malware"
                ],
                "states": {
                  "type_validation": {
                    "entry": [
                      "check_allowed_extensions",
                      "verify_mime_type"
                    ],
                    "on": {
                      "TYPE_VALID": "#size_validation",
                      "TYPE_INVALID": "#rejected"
                    }
                  },
                  "size_validation": {
                    "entry": [
                      "check_file_size_limits",
                      "validate_quota"
                    ],
                    "on": {
                      "SIZE_VALID": "#security_scan",
                      "SIZE_EXCEEDED": "#rejected"
                    }
                  },
                  "security_scan": {
                    "entry": [
                      "scan_file_content",
                      "check_security_policies"
                    ],
                    "on": {
                      "SCAN_CLEAN": "#processing",
                      "SECURITY_THREAT": "#rejected"
                    }
                  }
                },
                "initial": "type_validation",
                "on": {
                  "VALIDATION_SUCCESS": "processing",
                  "VALIDATION_FAILED": "rejected"
                }
              },
              "processing": {
                "entry": [
                  "extract_metadata",
                  "generate_file_hash"
                ],
                "states": {
                  "metadata_extraction": {
                    "entry": [
                      "extract_file_metadata",
                      "generate_thumbnails"
                    ],
                    "on": {
                      "METADATA_EXTRACTED": "#deduplication"
                    }
                  },
                  "deduplication": {
                    "entry": [
                      "check_duplicate_files",
                      "compare_file_hashes"
                    ],
                    "on": {
                      "DUPLICATE_FOUND": "linking_duplicate",
                      "UNIQUE_FILE": "#compression"
                    }
                  },
                  "linking_duplicate": {
                    "entry": [
                      "link_to_existing_file",
                      "update_reference_count"
                    ],
                    "on": {
                      "LINKING_SUCCESS": "#stored"
                    }
                  },
                  "compression": {
                    "entry": [
                      "apply_file_compression",
                      "optimize_storage"
                    ],
                    "on": {
                      "COMPRESSION_COMPLETE": "#storage_selection"
                    }
                  },
                  "storage_selection": {
                    "entry": [
                      "select_storage_provider",
                      "apply_storage_policies"
                    ],
                    "states": {
                      "local_storage": {
                        "entry": [
                          "store_locally",
                          "update_local_index"
                        ]
                      },
                      "cloud_storage": {
                        "entry": [
                          "upload_to_cloud",
                          "manage_cloud_metadata"
                        ]
                      },
                      "cdn_integration": {
                        "entry": [
                          "configure_cdn_distribution",
                          "optimize_delivery"
                        ]
                      }
                    },
                    "on": {
                      "STORAGE_SUCCESS": "#stored",
                      "STORAGE_FAILED": "#error"
                    }
                  }
                },
                "initial": "metadata_extraction",
                "on": {
                  "PROCESSING_COMPLETE": "stored",
                  "PROCESSING_FAILED": "error"
                }
              },
              "stored": {
                "entry": [
                  "update_file_registry",
                  "apply_user_isolation",
                  "set_access_permissions"
                ],
                "on": {
                  "FILE_ACCESSED": "accessed",
                  "FILE_UPDATED": "processing",
                  "FILE_DELETED": "deleting",
                  "CACHE_FILE": "caching"
                }
              },
              "caching": {
                "entry": [
                  "cache_frequently_accessed_files",
                  "optimize_cache_strategy"
                ],
                "on": {
                  "CACHE_SUCCESS": "stored",
                  "CACHE_EVICTION": "stored"
                }
              },
              "accessed": {
                "entry": [
                  "log_access",
                  "update_access_statistics",
                  "check_access_permissions"
                ],
                "on": {
                  "ACCESS_AUTHORIZED": "serving_file",
                  "ACCESS_DENIED": "stored"
                }
              },
              "serving_file": {
                "entry": [
                  "prepare_file_response",
                  "apply_content_delivery_optimization"
                ],
                "on": {
                  "FILE_SERVED": "stored",
                  "SERVING_ERROR": "error"
                }
              },
              "deleting": {
                "entry": [
                  "validate_delete_permissions",
                  "check_file_references"
                ],
                "on": {
                  "DELETE_AUTHORIZED": "cleanup",
                  "DELETE_DENIED": "stored",
                  "REFERENCES_EXIST": "stored"
                }
              },
              "cleanup": {
                "entry": [
                  "remove_file_data",
                  "cleanup_metadata",
                  "update_storage_quotas"
                ],
                "on": {
                  "CLEANUP_COMPLETE": "deleted"
                }
              },
              "deleted": {
                "entry": [
                  "log_deletion",
                  "notify_cleanup_complete"
                ],
                "type": "final"
              },
              "rejected": {
                "entry": [
                  "log_rejection_reason",
                  "notify_user"
                ],
                "type": "final"
              },
              "error": {
                "entry": [
                  "log_error_details",
                  "attempt_recovery"
                ],
                "on": {
                  "RETRY_PROCESSING": "processing",
                  "ABORT_OPERATION": "rejected"
                }
              }
            }
          },
          "business_logic": {
            "storage_management": [
              "provider_abstraction",
              "local_file_system",
              "cloud_storage_integration",
              "metadata_tracking"
            ],
            "security_controls": [
              "file_type_validation",
              "size_limits",
              "user_isolation",
              "access_permissions"
            ],
            "optimization": [
              "file_compression",
              "deduplication",
              "caching",
              "cdn_integration"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "store_integration_system",
          "type": "logic",
          "name": "Component Store Integration System",
          "description": "Marketplace functionality with component sharing, discovery, ratings, and installation",
          "path": "src/backend/base/langflow/services/store/",
          "workflow_states": [
            "component_created",
            "uploaded",
            "published",
            "discovered",
            "installed"
          ],
          "statechart": {
            "id": "storeIntegrationStatechart",
            "initial": "component_created",
            "states": {
              "component_created": {
                "entry": [
                  "validate_component_structure",
                  "extract_component_metadata"
                ],
                "on": {
                  "VALIDATION_SUCCESS": "preparing_upload",
                  "VALIDATION_FAILED": "creation_failed"
                }
              },
              "preparing_upload": {
                "entry": [
                  "prepare_component_package",
                  "generate_component_id"
                ],
                "on": {
                  "PACKAGE_READY": "uploaded",
                  "PACKAGING_FAILED": "creation_failed"
                }
              },
              "uploaded": {
                "entry": [
                  "store_component_data",
                  "create_version_entry"
                ],
                "states": {
                  "version_management": {
                    "entry": [
                      "manage_component_versions",
                      "handle_version_conflicts"
                    ],
                    "on": {
                      "VERSION_CREATED": "#quality_validation",
                      "VERSION_CONFLICT": "version_resolution"
                    }
                  },
                  "version_resolution": {
                    "entry": [
                      "resolve_version_conflicts",
                      "update_version_matrix"
                    ],
                    "on": {
                      "CONFLICT_RESOLVED": "version_management"
                    }
                  },
                  "quality_validation": {
                    "entry": [
                      "run_quality_checks",
                      "validate_security",
                      "check_compatibility"
                    ],
                    "on": {
                      "QUALITY_PASSED": "#indexing",
                      "QUALITY_FAILED": "quality_improvement"
                    }
                  },
                  "quality_improvement": {
                    "entry": [
                      "suggest_improvements",
                      "flag_quality_issues"
                    ],
                    "on": {
                      "IMPROVEMENTS_APPLIED": "quality_validation",
                      "SKIP_QUALITY_CHECK": "#indexing"
                    }
                  },
                  "indexing": {
                    "entry": [
                      "index_for_search",
                      "classify_by_category",
                      "extract_keywords"
                    ],
                    "on": {
                      "INDEXING_COMPLETE": "#published"
                    }
                  }
                },
                "initial": "version_management",
                "on": {
                  "UPLOAD_COMPLETE": "published",
                  "UPLOAD_FAILED": "creation_failed"
                }
              },
              "published": {
                "entry": [
                  "make_component_discoverable",
                  "notify_community"
                ],
                "states": {
                  "discovery_active": {
                    "states": {
                      "search_indexing": {
                        "entry": [
                          "maintain_search_index",
                          "update_search_rankings"
                        ]
                      },
                      "category_classification": {
                        "entry": [
                          "maintain_category_associations",
                          "update_taxonomies"
                        ]
                      },
                      "recommendation_engine": {
                        "entry": [
                          "generate_recommendations",
                          "update_similarity_scores"
                        ]
                      }
                    },
                    "type": "parallel"
                  },
                  "community_engagement": {
                    "states": {
                      "rating_system": {
                        "entry": [
                          "collect_user_ratings",
                          "aggregate_scores"
                        ],
                        "on": {
                          "NEW_RATING": "rating_system",
                          "RATING_UPDATED": "rating_aggregation"
                        }
                      },
                      "rating_aggregation": {
                        "entry": [
                          "recalculate_ratings",
                          "update_component_score"
                        ],
                        "on": {
                          "AGGREGATION_COMPLETE": "rating_system"
                        }
                      },
                      "reviews_management": {
                        "entry": [
                          "moderate_reviews",
                          "highlight_helpful_reviews"
                        ],
                        "on": {
                          "NEW_REVIEW": "review_processing",
                          "REVIEW_FLAGGED": "review_moderation"
                        }
                      },
                      "review_processing": {
                        "entry": [
                          "process_new_review",
                          "update_review_metrics"
                        ],
                        "on": {
                          "REVIEW_APPROVED": "reviews_management",
                          "REVIEW_REJECTED": "reviews_management"
                        }
                      },
                      "review_moderation": {
                        "entry": [
                          "review_moderation_queue",
                          "apply_community_guidelines"
                        ],
                        "on": {
                          "MODERATION_COMPLETE": "reviews_management"
                        }
                      },
                      "analytics_tracking": {
                        "entry": [
                          "track_downloads",
                          "monitor_usage_patterns",
                          "analyze_engagement"
                        ]
                      }
                    },
                    "type": "parallel"
                  }
                },
                "type": "parallel",
                "on": {
                  "COMPONENT_REQUESTED": "discovered",
                  "UPDATE_COMPONENT": "uploaded",
                  "UNPUBLISH_COMPONENT": "unpublished"
                }
              },
              "discovered": {
                "entry": [
                  "log_discovery_event",
                  "update_discovery_metrics"
                ],
                "on": {
                  "INSTALL_COMPONENT": "installed",
                  "VIEW_DETAILS": "published"
                }
              },
              "installed": {
                "entry": [
                  "track_installation",
                  "increment_download_counter",
                  "log_usage_analytics"
                ],
                "on": {
                  "INSTALLATION_SUCCESS": "active_usage",
                  "INSTALLATION_FAILED": "published"
                }
              },
              "active_usage": {
                "entry": [
                  "monitor_component_usage",
                  "collect_performance_metrics"
                ],
                "on": {
                  "USAGE_FEEDBACK": "published",
                  "COMPONENT_UPDATED": "published"
                }
              },
              "unpublished": {
                "entry": [
                  "remove_from_discovery",
                  "notify_users"
                ],
                "on": {
                  "REPUBLISH": "published"
                },
                "type": "final"
              },
              "creation_failed": {
                "entry": [
                  "log_creation_failure",
                  "provide_error_feedback"
                ],
                "type": "final"
              }
            }
          },
          "business_logic": {
            "marketplace_operations": [
              "component_upload",
              "metadata_extraction",
              "version_management",
              "quality_validation"
            ],
            "discovery_mechanisms": [
              "search_indexing",
              "category_classification",
              "rating_aggregation",
              "recommendation_engine"
            ],
            "community_features": [
              "user_ratings",
              "reviews",
              "download_tracking",
              "usage_analytics"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "telemetry_analytics_system",
          "type": "logic",
          "name": "Telemetry and Analytics System",
          "description": "Usage tracking, performance monitoring, and analytics collection with privacy controls",
          "path": "src/backend/base/langflow/services/telemetry/",
          "workflow_states": [
            "event_generated",
            "collected",
            "processed",
            "analyzed",
            "reported"
          ],
          "statechart": {
            "id": "telemetryAnalyticsStatechart",
            "initial": "event_generated",
            "states": {
              "event_generated": {
                "entry": [
                  "capture_event_data",
                  "timestamp_event"
                ],
                "on": {
                  "START_COLLECTION": "collected",
                  "PRIVACY_CHECK_REQUIRED": "privacy_validation"
                }
              },
              "privacy_validation": {
                "entry": [
                  "check_user_consent",
                  "apply_privacy_controls"
                ],
                "states": {
                  "opt_in_check": {
                    "entry": [
                      "verify_opt_in_status"
                    ],
                    "on": {
                      "USER_OPTED_IN": "#data_anonymization",
                      "USER_OPTED_OUT": "#discarded"
                    }
                  },
                  "data_anonymization": {
                    "entry": [
                      "anonymize_personal_data",
                      "remove_identifiers"
                    ],
                    "on": {
                      "ANONYMIZATION_COMPLETE": "#gdpr_compliance"
                    }
                  },
                  "gdpr_compliance": {
                    "entry": [
                      "apply_gdpr_rules",
                      "set_retention_period"
                    ],
                    "on": {
                      "COMPLIANCE_VERIFIED": "#collected"
                    }
                  }
                },
                "initial": "opt_in_check",
                "on": {
                  "PRIVACY_APPROVED": "collected",
                  "PRIVACY_REJECTED": "discarded"
                }
              },
              "collected": {
                "entry": [
                  "store_telemetry_data",
                  "categorize_metrics"
                ],
                "states": {
                  "usage_metrics": {
                    "entry": [
                      "collect_usage_data",
                      "track_feature_adoption"
                    ]
                  },
                  "performance_metrics": {
                    "entry": [
                      "monitor_system_performance",
                      "track_response_times"
                    ]
                  },
                  "error_tracking": {
                    "entry": [
                      "log_error_occurrences",
                      "categorize_errors"
                    ]
                  },
                  "user_behavior": {
                    "entry": [
                      "analyze_user_interactions",
                      "track_workflow_patterns"
                    ]
                  }
                },
                "type": "parallel",
                "on": {
                  "PROCESSING_READY": "processed",
                  "RETENTION_EXPIRED": "discarded"
                }
              },
              "processed": {
                "entry": [
                  "aggregate_metrics",
                  "apply_statistical_analysis"
                ],
                "on": {
                  "PROCESSING_COMPLETE": "analyzed",
                  "PROCESSING_FAILED": "collected"
                }
              },
              "analyzed": {
                "entry": [
                  "generate_insights",
                  "create_reports"
                ],
                "states": {
                  "trend_analysis": {
                    "entry": [
                      "identify_trends",
                      "calculate_growth_metrics"
                    ]
                  },
                  "performance_insights": {
                    "entry": [
                      "analyze_performance_bottlenecks",
                      "suggest_optimizations"
                    ]
                  },
                  "usage_patterns": {
                    "entry": [
                      "identify_usage_patterns",
                      "segment_user_behavior"
                    ]
                  },
                  "predictive_analytics": {
                    "entry": [
                      "build_prediction_models",
                      "forecast_trends"
                    ]
                  }
                },
                "type": "parallel",
                "on": {
                  "ANALYSIS_COMPLETE": "reported"
                }
              },
              "reported": {
                "entry": [
                  "generate_reports",
                  "create_dashboards",
                  "notify_stakeholders"
                ],
                "on": {
                  "NEW_DATA_AVAILABLE": "collected"
                },
                "type": "final"
              },
              "discarded": {
                "entry": [
                  "safely_discard_data",
                  "log_discard_reason"
                ],
                "type": "final"
              }
            }
          },
          "business_logic": {
            "data_collection": [
              "usage_metrics",
              "performance_metrics",
              "error_tracking",
              "user_behavior"
            ],
            "privacy_controls": [
              "opt_in_opt_out",
              "data_anonymization",
              "retention_policies",
              "gdpr_compliance"
            ],
            "analytics": [
              "trend_analysis",
              "performance_insights",
              "usage_patterns",
              "predictive_analytics"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "session_management_system",
          "type": "logic",
          "name": "Session Management System",
          "description": "Multi-session support with state persistence, cleanup, and real-time synchronization",
          "path": "src/backend/base/langflow/services/session/",
          "workflow_states": [
            "session_created",
            "active",
            "inactive",
            "expired",
            "cleaned_up"
          ],
          "statechart": {
            "id": "sessionManagementStatechart",
            "initial": "session_created",
            "states": {
              "session_created": {
                "entry": [
                  "generate_session_id",
                  "initialize_session_state",
                  "set_creation_timestamp"
                ],
                "on": {
                  "SESSION_READY": "active",
                  "CREATION_FAILED": "creation_error"
                }
              },
              "active": {
                "entry": [
                  "start_activity_tracking",
                  "setup_state_management"
                ],
                "states": {
                  "state_management": {
                    "states": {
                      "serializing": {
                        "entry": [
                          "serialize_session_state"
                        ],
                        "on": {
                          "SERIALIZATION_COMPLETE": "storing"
                        }
                      },
                      "storing": {
                        "entry": [
                          "store_in_database",
                          "update_memory_cache"
                        ],
                        "on": {
                          "STORAGE_SUCCESS": "synchronized",
                          "STORAGE_FAILED": "serializing"
                        }
                      },
                      "synchronized": {
                        "entry": [
                          "confirm_synchronization"
                        ]
                      }
                    },
                    "initial": "synchronized"
                  },
                  "multi_session_handling": {
                    "states": {
                      "isolation_active": {
                        "entry": [
                          "enforce_session_isolation",
                          "prevent_cross_contamination"
                        ]
                      },
                      "cross_session_coordination": {
                        "entry": [
                          "manage_shared_data",
                          "coordinate_updates"
                        ],
                        "on": {
                          "SWITCH_SESSION": "session_switching",
                          "CONFLICT_DETECTED": "conflict_resolution"
                        }
                      },
                      "session_switching": {
                        "entry": [
                          "pause_current_session",
                          "activate_target_session"
                        ],
                        "on": {
                          "SWITCH_COMPLETE": "cross_session_coordination"
                        }
                      },
                      "conflict_resolution": {
                        "entry": [
                          "identify_conflicts",
                          "apply_resolution_strategy"
                        ],
                        "on": {
                          "CONFLICTS_RESOLVED": "cross_session_coordination"
                        }
                      }
                    },
                    "initial": "isolation_active",
                    "type": "parallel"
                  }
                },
                "type": "parallel",
                "on": {
                  "INACTIVITY_TIMEOUT": "inactive",
                  "EXPLICIT_PAUSE": "inactive",
                  "SESSION_ERROR": "error_recovery"
                }
              },
              "inactive": {
                "entry": [
                  "pause_activity_tracking",
                  "mark_as_inactive"
                ],
                "on": {
                  "ACTIVITY_RESUMED": "active",
                  "SESSION_TIMEOUT": "expired",
                  "MANUAL_CLEANUP": "cleaned_up"
                }
              },
              "expired": {
                "entry": [
                  "mark_session_expired",
                  "schedule_cleanup"
                ],
                "on": {
                  "START_CLEANUP": "cleaned_up",
                  "EXTEND_SESSION": "active"
                }
              },
              "error_recovery": {
                "entry": [
                  "log_session_error",
                  "attempt_recovery"
                ],
                "on": {
                  "RECOVERY_SUCCESS": "active",
                  "RECOVERY_FAILED": "cleaned_up"
                }
              },
              "cleaned_up": {
                "entry": [
                  "cleanup_session_data",
                  "free_memory",
                  "remove_from_database"
                ],
                "on": {
                  "CLEANUP_COMPLETE": "terminated"
                }
              },
              "terminated": {
                "entry": [
                  "log_session_termination"
                ],
                "type": "final"
              },
              "creation_error": {
                "entry": [
                  "log_creation_error"
                ],
                "type": "final"
              }
            }
          },
          "business_logic": {
            "session_lifecycle": [
              "session_creation",
              "state_management",
              "activity_tracking",
              "automatic_cleanup"
            ],
            "multi_session_support": [
              "session_isolation",
              "cross_session_data",
              "session_switching",
              "conflict_resolution"
            ],
            "persistence": [
              "state_serialization",
              "database_storage",
              "memory_management"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "api_versioning_system",
          "type": "logic",
          "name": "API Versioning and Compatibility System",
          "description": "API version management with backward compatibility, deprecation handling, and migration support",
          "path": "src/backend/base/langflow/api/",
          "workflow_states": [
            "version_detected",
            "compatibility_checked",
            "request_routed",
            "response_formatted"
          ],
          "statechart": {
            "id": "apiVersioningStatechart",
            "initial": "version_detected",
            "states": {
              "version_detected": {
                "entry": [
                  "detect_api_version",
                  "parse_version_headers"
                ],
                "on": {
                  "VERSION_IDENTIFIED": "compatibility_checked",
                  "VERSION_UNKNOWN": "default_version"
                }
              },
              "default_version": {
                "entry": [
                  "apply_default_version",
                  "log_version_default"
                ],
                "on": {
                  "DEFAULT_APPLIED": "compatibility_checked"
                }
              },
              "compatibility_checked": {
                "entry": [
                  "check_compatibility_matrix",
                  "validate_feature_availability"
                ],
                "states": {
                  "feature_flagging": {
                    "entry": [
                      "check_feature_flags",
                      "apply_version_specific_features"
                    ],
                    "on": {
                      "FEATURES_ENABLED": "#request_processing",
                      "FEATURES_DISABLED": "feature_unavailable"
                    }
                  },
                  "deprecation_check": {
                    "entry": [
                      "check_deprecated_endpoints",
                      "generate_deprecation_warnings"
                    ],
                    "on": {
                      "DEPRECATED_ENDPOINT": "deprecation_warning",
                      "ENDPOINT_CURRENT": "#request_processing"
                    }
                  },
                  "legacy_support": {
                    "entry": [
                      "check_legacy_compatibility",
                      "apply_legacy_transformations"
                    ],
                    "on": {
                      "LEGACY_SUPPORTED": "#request_processing",
                      "LEGACY_UNSUPPORTED": "migration_required"
                    }
                  }
                },
                "type": "parallel",
                "on": {
                  "COMPATIBILITY_CONFIRMED": "request_routed",
                  "INCOMPATIBLE_VERSION": "version_mismatch"
                }
              },
              "feature_unavailable": {
                "entry": [
                  "provide_feature_unavailable_response"
                ],
                "on": {
                  "SUGGEST_UPGRADE": "migration_guidance"
                }
              },
              "deprecation_warning": {
                "entry": [
                  "add_deprecation_headers",
                  "log_deprecated_usage"
                ],
                "on": {
                  "WARNING_ADDED": "request_routed"
                }
              },
              "migration_required": {
                "entry": [
                  "provide_migration_guidance",
                  "suggest_migration_path"
                ],
                "on": {
                  "AUTO_MIGRATE": "automated_migration",
                  "MANUAL_MIGRATION": "migration_guidance"
                }
              },
              "automated_migration": {
                "entry": [
                  "perform_data_transformation",
                  "apply_schema_evolution"
                ],
                "on": {
                  "MIGRATION_SUCCESS": "request_routed",
                  "MIGRATION_FAILED": "migration_guidance"
                }
              },
              "migration_guidance": {
                "entry": [
                  "provide_client_guidance",
                  "document_migration_steps"
                ],
                "on": {
                  "GUIDANCE_PROVIDED": "graceful_degradation"
                }
              },
              "request_routed": {
                "entry": [
                  "route_to_version_handler",
                  "apply_version_specific_logic"
                ],
                "on": {
                  "ROUTING_SUCCESS": "response_formatted",
                  "ROUTING_FAILED": "fallback_mechanism"
                }
              },
              "fallback_mechanism": {
                "entry": [
                  "apply_fallback_logic",
                  "use_compatible_version"
                ],
                "on": {
                  "FALLBACK_SUCCESS": "response_formatted",
                  "FALLBACK_FAILED": "graceful_degradation"
                }
              },
              "graceful_degradation": {
                "entry": [
                  "provide_degraded_functionality",
                  "inform_limited_features"
                ],
                "on": {
                  "DEGRADED_RESPONSE_READY": "response_formatted"
                }
              },
              "response_formatted": {
                "entry": [
                  "format_version_specific_response",
                  "add_version_headers"
                ],
                "type": "final"
              },
              "version_mismatch": {
                "entry": [
                  "provide_version_mismatch_error",
                  "suggest_supported_versions"
                ],
                "type": "final"
              }
            }
          },
          "business_logic": {
            "version_management": [
              "version_detection",
              "compatibility_matrix",
              "feature_flagging",
              "deprecation_warnings"
            ],
            "migration_support": [
              "data_transformation",
              "schema_evolution",
              "client_guidance",
              "automated_migration"
            ],
            "backward_compatibility": [
              "legacy_support",
              "fallback_mechanisms",
              "graceful_degradation"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "dependency_injection_system",
          "type": "logic",
          "name": "Service Dependency Injection System",
          "description": "Service factory pattern with dependency resolution, lifecycle management, and health monitoring",
          "path": "src/backend/base/langflow/services/manager.py",
          "workflow_states": [
            "service_registered",
            "dependencies_resolved",
            "service_initialized",
            "service_running",
            "service_stopped"
          ],
          "statechart": {
            "id": "dependencyInjectionStatechart",
            "initial": "service_registered",
            "states": {
              "service_registered": {
                "entry": [
                  "register_service_definition",
                  "validate_service_contract"
                ],
                "on": {
                  "REGISTRATION_SUCCESS": "dependencies_resolved",
                  "REGISTRATION_FAILED": "registration_error"
                }
              },
              "dependencies_resolved": {
                "entry": [
                  "analyze_dependencies",
                  "build_dependency_graph"
                ],
                "states": {
                  "circular_dependency_check": {
                    "entry": [
                      "detect_circular_dependencies"
                    ],
                    "on": {
                      "NO_CYCLES": "#initialization_order",
                      "CYCLES_DETECTED": "circular_dependency_resolution"
                    }
                  },
                  "circular_dependency_resolution": {
                    "entry": [
                      "resolve_circular_dependencies",
                      "apply_lazy_initialization"
                    ],
                    "on": {
                      "CYCLES_RESOLVED": "initialization_order",
                      "CYCLES_UNRESOLVABLE": "#dependency_error"
                    }
                  },
                  "initialization_order": {
                    "entry": [
                      "determine_initialization_order",
                      "create_initialization_plan"
                    ],
                    "on": {
                      "ORDER_DETERMINED": "#service_initialized"
                    }
                  }
                },
                "initial": "circular_dependency_check",
                "on": {
                  "RESOLUTION_SUCCESS": "service_initialized",
                  "RESOLUTION_FAILED": "dependency_error"
                }
              },
              "service_initialized": {
                "entry": [
                  "initialize_services",
                  "setup_service_isolation"
                ],
                "states": {
                  "lazy_initialization": {
                    "entry": [
                      "setup_lazy_loading",
                      "create_service_proxies"
                    ],
                    "on": {
                      "SERVICE_REQUESTED": "service_instantiation",
                      "PRELOAD_REQUIRED": "service_instantiation"
                    }
                  },
                  "service_instantiation": {
                    "entry": [
                      "instantiate_service",
                      "inject_dependencies"
                    ],
                    "on": {
                      "INSTANTIATION_SUCCESS": "service_running",
                      "INSTANTIATION_FAILED": "initialization_error"
                    }
                  }
                },
                "initial": "lazy_initialization",
                "on": {
                  "INITIALIZATION_SUCCESS": "service_running",
                  "INITIALIZATION_FAILED": "initialization_error"
                }
              },
              "service_running": {
                "entry": [
                  "start_health_monitoring",
                  "begin_performance_tracking"
                ],
                "states": {
                  "health_monitoring": {
                    "entry": [
                      "setup_health_checks",
                      "monitor_service_health"
                    ],
                    "on": {
                      "HEALTH_CHECK_PASSED": "healthy",
                      "HEALTH_CHECK_FAILED": "unhealthy"
                    }
                  },
                  "performance_monitoring": {
                    "entry": [
                      "track_performance_metrics",
                      "monitor_resource_usage"
                    ],
                    "on": {
                      "PERFORMANCE_DEGRADED": "performance_alert",
                      "RESOURCE_EXHAUSTED": "resource_alert"
                    }
                  },
                  "error_tracking": {
                    "entry": [
                      "monitor_service_errors",
                      "track_error_patterns"
                    ],
                    "on": {
                      "ERROR_THRESHOLD_EXCEEDED": "error_alert",
                      "CRITICAL_ERROR": "service_failure"
                    }
                  },
                  "healthy": {
                    "entry": [
                      "confirm_service_health"
                    ]
                  },
                  "unhealthy": {
                    "entry": [
                      "mark_service_unhealthy",
                      "attempt_recovery"
                    ],
                    "on": {
                      "RECOVERY_SUCCESS": "healthy",
                      "RECOVERY_FAILED": "service_failure"
                    }
                  },
                  "performance_alert": {
                    "entry": [
                      "alert_performance_issues",
                      "suggest_optimizations"
                    ]
                  },
                  "resource_alert": {
                    "entry": [
                      "alert_resource_constraints",
                      "initiate_resource_cleanup"
                    ]
                  },
                  "error_alert": {
                    "entry": [
                      "escalate_error_alerts",
                      "provide_error_diagnostics"
                    ]
                  },
                  "service_failure": {
                    "entry": [
                      "mark_service_failed",
                      "initiate_failure_recovery"
                    ],
                    "on": {
                      "RESTART_SERVICE": "service_initialized",
                      "STOP_SERVICE": "service_stopped"
                    }
                  }
                },
                "type": "parallel",
                "on": {
                  "STOP_REQUEST": "stopping",
                  "SERVICE_ERROR": "error_handling"
                }
              },
              "stopping": {
                "entry": [
                  "begin_graceful_shutdown",
                  "cleanup_resources"
                ],
                "on": {
                  "SHUTDOWN_COMPLETE": "service_stopped",
                  "FORCED_SHUTDOWN": "service_stopped"
                }
              },
              "service_stopped": {
                "entry": [
                  "complete_resource_cleanup",
                  "unregister_service"
                ],
                "type": "final"
              },
              "error_handling": {
                "entry": [
                  "handle_service_error",
                  "attempt_error_recovery"
                ],
                "on": {
                  "ERROR_RECOVERED": "service_running",
                  "ERROR_UNRECOVERABLE": "service_stopped"
                }
              },
              "registration_error": {
                "entry": [
                  "log_registration_error"
                ],
                "type": "final"
              },
              "dependency_error": {
                "entry": [
                  "log_dependency_error",
                  "provide_dependency_guidance"
                ],
                "type": "final"
              },
              "initialization_error": {
                "entry": [
                  "log_initialization_error",
                  "cleanup_partial_initialization"
                ],
                "type": "final"
              }
            }
          },
          "business_logic": {
            "service_lifecycle": [
              "service_registration",
              "dependency_resolution",
              "initialization_order",
              "health_monitoring"
            ],
            "dependency_management": [
              "circular_dependency_detection",
              "lazy_initialization",
              "service_isolation",
              "resource_cleanup"
            ],
            "monitoring": [
              "health_checks",
              "performance_monitoring",
              "error_tracking",
              "service_metrics"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "configuration_management",
          "type": "logic",
          "name": "Configuration Management System",
          "description": "Environment-based configuration with hot-reloading, validation, and security controls",
          "path": "src/backend/base/langflow/services/settings/",
          "workflow_states": [
            "config_loaded",
            "validated",
            "applied",
            "monitoring",
            "hot_reloaded"
          ],
          "statechart": {
            "id": "configurationManagementStatechart",
            "initial": "config_loaded",
            "states": {
              "config_loaded": {
                "entry": [
                  "load_configuration_sources",
                  "merge_config_layers"
                ],
                "states": {
                  "source_loading": {
                    "states": {
                      "environment_variables": {
                        "entry": [
                          "read_env_vars",
                          "validate_env_format"
                        ]
                      },
                      "configuration_files": {
                        "entry": [
                          "read_config_files",
                          "parse_config_formats"
                        ]
                      },
                      "database_settings": {
                        "entry": [
                          "fetch_db_settings",
                          "decrypt_secrets"
                        ]
                      },
                      "runtime_overrides": {
                        "entry": [
                          "apply_runtime_overrides",
                          "validate_permissions"
                        ]
                      }
                    },
                    "type": "parallel"
                  },
                  "file_watching": {
                    "entry": [
                      "setup_file_watchers",
                      "monitor_config_changes"
                    ],
                    "on": {
                      "CONFIG_FILE_CHANGED": "change_detected",
                      "WATCHER_ERROR": "watcher_recovery"
                    }
                  },
                  "watcher_recovery": {
                    "entry": [
                      "restart_file_watchers"
                    ],
                    "on": {
                      "RECOVERY_SUCCESS": "file_watching"
                    }
                  }
                },
                "type": "parallel",
                "on": {
                  "LOADING_COMPLETE": "validated",
                  "LOADING_FAILED": "config_error"
                }
              },
              "change_detected": {
                "entry": [
                  "detect_configuration_changes",
                  "identify_changed_sections"
                ],
                "on": {
                  "CHANGES_IDENTIFIED": "validated",
                  "NO_CHANGES": "monitoring"
                }
              },
              "validated": {
                "entry": [
                  "validate_configuration_schema",
                  "check_security_constraints"
                ],
                "states": {
                  "schema_validation": {
                    "entry": [
                      "apply_config_schema",
                      "validate_data_types"
                    ],
                    "on": {
                      "SCHEMA_VALID": "#security_validation",
                      "SCHEMA_INVALID": "#validation_error"
                    }
                  },
                  "security_validation": {
                    "entry": [
                      "validate_secret_access",
                      "check_access_controls"
                    ],
                    "states": {
                      "secret_management": {
                        "entry": [
                          "decrypt_secrets",
                          "validate_secret_access"
                        ]
                      },
                      "access_control_check": {
                        "entry": [
                          "verify_config_permissions",
                          "audit_access_attempts"
                        ]
                      }
                    },
                    "type": "parallel",
                    "on": {
                      "SECURITY_VALIDATED": "#applied",
                      "SECURITY_FAILED": "#validation_error"
                    }
                  }
                },
                "initial": "schema_validation",
                "on": {
                  "VALIDATION_SUCCESS": "applied",
                  "VALIDATION_FAILED": "validation_error"
                }
              },
              "applied": {
                "entry": [
                  "apply_configuration",
                  "log_config_changes"
                ],
                "states": {
                  "gradual_rollout": {
                    "entry": [
                      "implement_gradual_rollout",
                      "monitor_rollout_health"
                    ],
                    "on": {
                      "ROLLOUT_SUCCESS": "#monitoring",
                      "ROLLOUT_ISSUES": "rollback_preparation"
                    }
                  },
                  "rollback_preparation": {
                    "entry": [
                      "prepare_rollback_plan",
                      "backup_current_config"
                    ],
                    "on": {
                      "INITIATE_ROLLBACK": "rollback_execution",
                      "CONTINUE_ROLLOUT": "gradual_rollout"
                    }
                  },
                  "rollback_execution": {
                    "entry": [
                      "execute_rollback",
                      "restore_previous_config"
                    ],
                    "on": {
                      "ROLLBACK_SUCCESS": "#monitoring",
                      "ROLLBACK_FAILED": "error_state"
                    }
                  }
                },
                "initial": "gradual_rollout",
                "on": {
                  "APPLICATION_SUCCESS": "monitoring",
                  "APPLICATION_FAILED": "config_error"
                }
              },
              "monitoring": {
                "entry": [
                  "monitor_config_health",
                  "track_config_usage"
                ],
                "on": {
                  "CONFIG_CHANGE_DETECTED": "change_detected",
                  "HOT_RELOAD_REQUEST": "hot_reloaded",
                  "MONITORING_ALERT": "alert_handling"
                }
              },
              "hot_reloaded": {
                "entry": [
                  "perform_hot_reload",
                  "maintain_system_state"
                ],
                "on": {
                  "HOT_RELOAD_SUCCESS": "monitoring",
                  "HOT_RELOAD_FAILED": "rollback_preparation"
                }
              },
              "alert_handling": {
                "entry": [
                  "handle_config_alerts",
                  "escalate_if_needed"
                ],
                "on": {
                  "ALERT_RESOLVED": "monitoring",
                  "CRITICAL_ALERT": "emergency_rollback"
                }
              },
              "emergency_rollback": {
                "entry": [
                  "execute_emergency_rollback",
                  "notify_administrators"
                ],
                "on": {
                  "EMERGENCY_RESOLVED": "monitoring"
                }
              },
              "validation_error": {
                "entry": [
                  "log_validation_errors",
                  "provide_error_feedback"
                ],
                "on": {
                  "RETRY_VALIDATION": "validated",
                  "REVERT_CHANGES": "monitoring"
                }
              },
              "config_error": {
                "entry": [
                  "log_config_error",
                  "attempt_recovery"
                ],
                "on": {
                  "RECOVERY_ATTEMPT": "config_loaded",
                  "USE_DEFAULTS": "monitoring"
                }
              },
              "error_state": {
                "entry": [
                  "enter_safe_mode",
                  "alert_administrators"
                ],
                "type": "final"
              }
            }
          },
          "business_logic": {
            "config_sources": [
              "environment_variables",
              "configuration_files",
              "database_settings",
              "runtime_overrides"
            ],
            "validation_security": [
              "schema_validation",
              "secret_management",
              "access_controls",
              "audit_logging"
            ],
            "hot_reloading": [
              "file_watching",
              "change_detection",
              "gradual_rollout",
              "rollback_capability"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "logging_monitoring_system",
          "type": "logic",
          "name": "Comprehensive Logging and Monitoring System",
          "description": "Structured logging with distributed tracing, metrics collection, and alerting capabilities",
          "path": "src/backend/base/langflow/logging/",
          "workflow_states": [
            "event_logged",
            "processed",
            "aggregated",
            "alerted",
            "archived"
          ],
          "statechart": {
            "id": "loggingMonitoringStatechart",
            "initial": "event_logged",
            "states": {
              "event_logged": {
                "entry": [
                  "capture_log_event",
                  "add_correlation_id",
                  "structure_log_data"
                ],
                "on": {
                  "LOG_STRUCTURED": "processed",
                  "STRUCTURING_FAILED": "raw_log_fallback"
                }
              },
              "raw_log_fallback": {
                "entry": [
                  "log_as_raw_text",
                  "flag_structuring_failure"
                ],
                "on": {
                  "RAW_LOG_COMPLETE": "processed"
                }
              },
              "processed": {
                "entry": [
                  "enrich_log_context",
                  "apply_log_filters"
                ],
                "states": {
                  "distributed_tracing": {
                    "entry": [
                      "add_trace_context",
                      "link_to_distributed_trace"
                    ],
                    "on": {
                      "TRACE_LINKED": "#aggregation"
                    }
                  },
                  "log_enrichment": {
                    "entry": [
                      "add_metadata",
                      "enrich_with_context"
                    ],
                    "on": {
                      "ENRICHMENT_COMPLETE": "#aggregation"
                    }
                  }
                },
                "type": "parallel",
                "on": {
                  "PROCESSING_COMPLETE": "aggregated",
                  "PROCESSING_FAILED": "processing_error"
                }
              },
              "aggregated": {
                "entry": [
                  "aggregate_similar_logs",
                  "group_by_correlation_id"
                ],
                "states": {
                  "metrics_collection": {
                    "states": {
                      "application_metrics": {
                        "entry": [
                          "collect_app_metrics",
                          "track_performance_indicators"
                        ]
                      },
                      "infrastructure_metrics": {
                        "entry": [
                          "collect_infra_metrics",
                          "monitor_system_resources"
                        ]
                      },
                      "business_metrics": {
                        "entry": [
                          "collect_business_metrics",
                          "track_kpis"
                        ]
                      },
                      "custom_metrics": {
                        "entry": [
                          "collect_custom_metrics",
                          "process_user_defined_metrics"
                        ]
                      }
                    },
                    "type": "parallel"
                  },
                  "threshold_monitoring": {
                    "entry": [
                      "check_threshold_violations",
                      "evaluate_alert_conditions"
                    ],
                    "on": {
                      "THRESHOLD_EXCEEDED": "alert_triggered",
                      "THRESHOLD_NORMAL": "monitoring_active"
                    }
                  },
                  "anomaly_detection": {
                    "entry": [
                      "analyze_patterns",
                      "detect_anomalies"
                    ],
                    "on": {
                      "ANOMALY_DETECTED": "alert_triggered",
                      "PATTERNS_NORMAL": "monitoring_active"
                    }
                  },
                  "monitoring_active": {
                    "entry": [
                      "continue_monitoring",
                      "update_baselines"
                    ]
                  }
                },
                "type": "parallel",
                "on": {
                  "AGGREGATION_COMPLETE": "alerted",
                  "ALERT_CONDITIONS_MET": "alert_triggered"
                }
              },
              "alert_triggered": {
                "entry": [
                  "generate_alert",
                  "determine_severity"
                ],
                "states": {
                  "escalation_management": {
                    "entry": [
                      "apply_escalation_policies",
                      "route_to_appropriate_teams"
                    ],
                    "states": {
                      "level_1_support": {
                        "entry": [
                          "notify_level_1"
                        ],
                        "on": {
                          "ESCALATION_TIMEOUT": "level_2_support",
                          "ACKNOWLEDGED": "incident_management"
                        }
                      },
                      "level_2_support": {
                        "entry": [
                          "notify_level_2"
                        ],
                        "on": {
                          "ESCALATION_TIMEOUT": "level_3_support",
                          "ACKNOWLEDGED": "incident_management"
                        }
                      },
                      "level_3_support": {
                        "entry": [
                          "notify_level_3",
                          "create_critical_incident"
                        ],
                        "on": {
                          "ACKNOWLEDGED": "incident_management"
                        }
                      }
                    },
                    "initial": "level_1_support"
                  },
                  "incident_management": {
                    "entry": [
                      "create_incident_ticket",
                      "assign_incident_team"
                    ],
                    "states": {
                      "investigation": {
                        "entry": [
                          "gather_diagnostic_data",
                          "analyze_root_cause"
                        ]
                      },
                      "resolution": {
                        "entry": [
                          "implement_resolution",
                          "monitor_resolution_effectiveness"
                        ]
                      },
                      "post_mortem": {
                        "entry": [
                          "conduct_post_mortem",
                          "document_lessons_learned"
                        ]
                      }
                    },
                    "initial": "investigation",
                    "on": {
                      "INCIDENT_RESOLVED": "alert_resolved"
                    }
                  }
                },
                "type": "parallel",
                "on": {
                  "ALERT_ACKNOWLEDGED": "incident_management",
                  "FALSE_POSITIVE": "alert_resolved"
                }
              },
              "alert_resolved": {
                "entry": [
                  "mark_alert_resolved",
                  "update_resolution_metrics"
                ],
                "on": {
                  "RESOLUTION_CONFIRMED": "archived"
                }
              },
              "alerted": {
                "entry": [
                  "complete_alerting_cycle",
                  "update_monitoring_status"
                ],
                "on": {
                  "ARCHIVAL_READY": "archived"
                }
              },
              "archived": {
                "entry": [
                  "archive_logs_and_metrics",
                  "compress_historical_data"
                ],
                "type": "final"
              },
              "processing_error": {
                "entry": [
                  "log_processing_error",
                  "attempt_recovery"
                ],
                "on": {
                  "RECOVERY_SUCCESS": "processed",
                  "RECOVERY_FAILED": "archived"
                }
              }
            }
          },
          "business_logic": {
            "logging_architecture": [
              "structured_logging",
              "log_aggregation",
              "distributed_tracing",
              "correlation_ids"
            ],
            "monitoring_metrics": [
              "application_metrics",
              "infrastructure_metrics",
              "business_metrics",
              "custom_metrics"
            ],
            "alerting": [
              "threshold_monitoring",
              "anomaly_detection",
              "escalation_policies",
              "incident_management"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "testing_quality_assurance",
          "type": "logic",
          "name": "Testing and Quality Assurance System",
          "description": "Comprehensive testing framework with unit, integration, E2E, and performance testing capabilities",
          "path": "tests/",
          "workflow_states": [
            "test_planned",
            "test_executed",
            "results_analyzed",
            "quality_validated",
            "reported"
          ],
          "statechart": {
            "id": "testingQualityAssuranceStatechart",
            "initial": "test_planned",
            "states": {
              "test_planned": {
                "entry": [
                  "create_test_plan",
                  "identify_test_requirements"
                ],
                "on": {
                  "PLANNING_COMPLETE": "test_executed",
                  "PLANNING_FAILED": "planning_error"
                }
              },
              "test_executed": {
                "entry": [
                  "setup_test_environment",
                  "initialize_test_data"
                ],
                "states": {
                  "unit_testing": {
                    "entry": [
                      "run_unit_tests",
                      "measure_code_coverage"
                    ],
                    "on": {
                      "UNIT_TESTS_PASSED": "unit_test_success",
                      "UNIT_TESTS_FAILED": "unit_test_failure"
                    }
                  },
                  "integration_testing": {
                    "entry": [
                      "run_integration_tests",
                      "test_component_interactions"
                    ],
                    "on": {
                      "INTEGRATION_TESTS_PASSED": "integration_test_success",
                      "INTEGRATION_TESTS_FAILED": "integration_test_failure"
                    }
                  },
                  "end_to_end_testing": {
                    "entry": [
                      "run_e2e_tests",
                      "test_complete_workflows"
                    ],
                    "on": {
                      "E2E_TESTS_PASSED": "e2e_test_success",
                      "E2E_TESTS_FAILED": "e2e_test_failure"
                    }
                  },
                  "performance_testing": {
                    "entry": [
                      "run_performance_tests",
                      "measure_benchmarks"
                    ],
                    "on": {
                      "PERFORMANCE_TESTS_PASSED": "performance_test_success",
                      "PERFORMANCE_TESTS_FAILED": "performance_test_failure"
                    }
                  },
                  "security_testing": {
                    "entry": [
                      "run_security_tests",
                      "scan_vulnerabilities"
                    ],
                    "on": {
                      "SECURITY_TESTS_PASSED": "security_test_success",
                      "SECURITY_TESTS_FAILED": "security_test_failure"
                    }
                  },
                  "unit_test_success": {
                    "entry": [
                      "log_unit_test_success",
                      "update_coverage_metrics"
                    ]
                  },
                  "unit_test_failure": {
                    "entry": [
                      "log_unit_test_failures",
                      "generate_failure_reports"
                    ]
                  },
                  "integration_test_success": {
                    "entry": [
                      "log_integration_success"
                    ]
                  },
                  "integration_test_failure": {
                    "entry": [
                      "log_integration_failures",
                      "diagnose_integration_issues"
                    ]
                  },
                  "e2e_test_success": {
                    "entry": [
                      "log_e2e_success"
                    ]
                  },
                  "e2e_test_failure": {
                    "entry": [
                      "log_e2e_failures",
                      "capture_failure_screenshots"
                    ]
                  },
                  "performance_test_success": {
                    "entry": [
                      "log_performance_success",
                      "update_benchmarks"
                    ]
                  },
                  "performance_test_failure": {
                    "entry": [
                      "log_performance_failures",
                      "identify_bottlenecks"
                    ]
                  },
                  "security_test_success": {
                    "entry": [
                      "log_security_success"
                    ]
                  },
                  "security_test_failure": {
                    "entry": [
                      "log_security_failures",
                      "escalate_vulnerabilities"
                    ]
                  }
                },
                "type": "parallel",
                "on": {
                  "ALL_TESTS_COMPLETE": "results_analyzed",
                  "CRITICAL_FAILURE": "test_failure_handling"
                }
              },
              "results_analyzed": {
                "entry": [
                  "analyze_test_results",
                  "calculate_quality_metrics"
                ],
                "states": {
                  "coverage_analysis": {
                    "entry": [
                      "analyze_code_coverage",
                      "identify_uncovered_areas"
                    ],
                    "on": {
                      "COVERAGE_ADEQUATE": "#reliability_assessment",
                      "COVERAGE_INSUFFICIENT": "coverage_improvement_needed"
                    }
                  },
                  "reliability_assessment": {
                    "entry": [
                      "assess_test_reliability",
                      "check_flaky_tests"
                    ],
                    "on": {
                      "TESTS_RELIABLE": "#benchmark_validation",
                      "TESTS_FLAKY": "reliability_improvement_needed"
                    }
                  },
                  "benchmark_validation": {
                    "entry": [
                      "validate_performance_benchmarks",
                      "compare_against_baselines"
                    ],
                    "on": {
                      "BENCHMARKS_MET": "#quality_validated",
                      "BENCHMARKS_FAILED": "performance_improvement_needed"
                    }
                  },
                  "coverage_improvement_needed": {
                    "entry": [
                      "suggest_coverage_improvements",
                      "identify_critical_gaps"
                    ]
                  },
                  "reliability_improvement_needed": {
                    "entry": [
                      "improve_test_reliability",
                      "fix_flaky_tests"
                    ]
                  },
                  "performance_improvement_needed": {
                    "entry": [
                      "suggest_performance_improvements",
                      "identify_optimization_opportunities"
                    ]
                  }
                },
                "initial": "coverage_analysis",
                "on": {
                  "ANALYSIS_COMPLETE": "quality_validated",
                  "QUALITY_ISSUES_FOUND": "quality_improvement"
                }
              },
              "quality_improvement": {
                "entry": [
                  "create_improvement_plan",
                  "prioritize_quality_issues"
                ],
                "on": {
                  "IMPROVEMENTS_APPLIED": "results_analyzed",
                  "SKIP_IMPROVEMENTS": "quality_validated"
                }
              },
              "quality_validated": {
                "entry": [
                  "validate_quality_gates",
                  "check_ci_cd_readiness"
                ],
                "states": {
                  "quality_gates": {
                    "entry": [
                      "apply_quality_gates",
                      "enforce_quality_standards"
                    ],
                    "on": {
                      "QUALITY_GATES_PASSED": "#ci_cd_integration",
                      "QUALITY_GATES_FAILED": "quality_gate_failure"
                    }
                  },
                  "ci_cd_integration": {
                    "entry": [
                      "integrate_with_ci_cd",
                      "trigger_automated_pipeline"
                    ],
                    "on": {
                      "CI_CD_SUCCESS": "#deployment_validation",
                      "CI_CD_FAILED": "ci_cd_failure"
                    }
                  },
                  "deployment_validation": {
                    "entry": [
                      "validate_deployment_readiness",
                      "check_deployment_criteria"
                    ],
                    "on": {
                      "DEPLOYMENT_READY": "#reported",
                      "DEPLOYMENT_NOT_READY": "deployment_validation_failure"
                    }
                  },
                  "quality_gate_failure": {
                    "entry": [
                      "handle_quality_gate_failure",
                      "block_deployment"
                    ]
                  },
                  "ci_cd_failure": {
                    "entry": [
                      "handle_ci_cd_failure",
                      "investigate_pipeline_issues"
                    ]
                  },
                  "deployment_validation_failure": {
                    "entry": [
                      "handle_deployment_validation_failure",
                      "address_deployment_blockers"
                    ]
                  }
                },
                "initial": "quality_gates",
                "on": {
                  "VALIDATION_SUCCESS": "reported",
                  "VALIDATION_FAILED": "validation_failure_handling"
                }
              },
              "reported": {
                "entry": [
                  "generate_quality_reports",
                  "publish_test_results",
                  "notify_stakeholders"
                ],
                "type": "final"
              },
              "test_failure_handling": {
                "entry": [
                  "handle_test_failures",
                  "create_failure_reports"
                ],
                "on": {
                  "RETRY_TESTS": "test_executed",
                  "ACCEPT_FAILURES": "reported"
                }
              },
              "validation_failure_handling": {
                "entry": [
                  "handle_validation_failures",
                  "escalate_quality_issues"
                ],
                "on": {
                  "RETRY_VALIDATION": "quality_validated",
                  "OVERRIDE_VALIDATION": "reported"
                }
              },
              "planning_error": {
                "entry": [
                  "log_planning_error"
                ],
                "type": "final"
              }
            }
          },
          "business_logic": {
            "testing_levels": [
              "unit_testing",
              "integration_testing",
              "end_to_end_testing",
              "performance_testing"
            ],
            "quality_metrics": [
              "code_coverage",
              "test_reliability",
              "performance_benchmarks",
              "security_testing"
            ],
            "automation": [
              "ci_cd_integration",
              "automated_testing",
              "quality_gates",
              "deployment_validation"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "deployment_orchestration",
          "type": "logic",
          "name": "Deployment Orchestration System",
          "description": "Multi-environment deployment with Docker containerization, health checks, and rollback capabilities",
          "path": "docker/",
          "workflow_states": [
            "build_initiated",
            "image_built",
            "deployed",
            "health_checked",
            "production_ready"
          ],
          "statechart": {
            "id": "deploymentOrchestrationStatechart",
            "initial": "build_initiated",
            "states": {
              "build_initiated": {
                "entry": [
                  "prepare_build_environment",
                  "checkout_source_code"
                ],
                "on": {
                  "BUILD_READY": "image_built",
                  "BUILD_FAILED": "build_failure"
                }
              },
              "image_built": {
                "entry": [
                  "start_container_build",
                  "apply_multi_stage_optimization"
                ],
                "states": {
                  "multi_stage_build": {
                    "entry": [
                      "execute_multi_stage_dockerfile",
                      "optimize_layer_caching"
                    ],
                    "on": {
                      "STAGES_COMPLETE": "#image_optimization",
                      "STAGE_FAILED": "#build_failure"
                    }
                  },
                  "image_optimization": {
                    "entry": [
                      "optimize_image_size",
                      "remove_unnecessary_layers"
                    ],
                    "on": {
                      "OPTIMIZATION_COMPLETE": "#security_scanning",
                      "OPTIMIZATION_FAILED": "#security_scanning"
                    }
                  },
                  "security_scanning": {
                    "entry": [
                      "scan_for_vulnerabilities",
                      "check_base_image_security"
                    ],
                    "on": {
                      "SCAN_CLEAN": "#registry_management",
                      "VULNERABILITIES_FOUND": "vulnerability_handling",
                      "SCAN_FAILED": "#registry_management"
                    }
                  },
                  "vulnerability_handling": {
                    "entry": [
                      "assess_vulnerability_severity",
                      "apply_security_patches"
                    ],
                    "on": {
                      "VULNERABILITIES_RESOLVED": "security_scanning",
                      "CRITICAL_VULNERABILITIES": "build_blocked",
                      "ACCEPT_VULNERABILITIES": "registry_management"
                    }
                  },
                  "registry_management": {
                    "entry": [
                      "tag_image",
                      "push_to_registry"
                    ],
                    "on": {
                      "REGISTRY_PUSH_SUCCESS": "#deployed",
                      "REGISTRY_PUSH_FAILED": "#registry_failure"
                    }
                  }
                },
                "initial": "multi_stage_build",
                "on": {
                  "IMAGE_BUILD_SUCCESS": "deployed",
                  "IMAGE_BUILD_FAILED": "build_failure"
                }
              },
              "deployed": {
                "entry": [
                  "prepare_deployment",
                  "select_deployment_strategy"
                ],
                "states": {
                  "deployment_strategy": {
                    "states": {
                      "blue_green_deployment": {
                        "entry": [
                          "setup_blue_green_environment",
                          "deploy_to_green_environment"
                        ],
                        "states": {
                          "green_deployment": {
                            "entry": [
                              "deploy_new_version_to_green"
                            ],
                            "on": {
                              "GREEN_DEPLOYMENT_SUCCESS": "health_check",
                              "GREEN_DEPLOYMENT_FAILED": "deployment_failure"
                            }
                          },
                          "health_check": {
                            "entry": [
                              "run_health_checks_on_green"
                            ],
                            "on": {
                              "HEALTH_CHECK_PASSED": "traffic_switch",
                              "HEALTH_CHECK_FAILED": "deployment_failure"
                            }
                          },
                          "traffic_switch": {
                            "entry": [
                              "switch_traffic_to_green",
                              "monitor_traffic_switch"
                            ],
                            "on": {
                              "TRAFFIC_SWITCH_SUCCESS": "blue_cleanup",
                              "TRAFFIC_SWITCH_FAILED": "rollback_to_blue"
                            }
                          },
                          "blue_cleanup": {
                            "entry": [
                              "cleanup_blue_environment"
                            ],
                            "on": {
                              "CLEANUP_COMPLETE": "#deployment_success"
                            }
                          },
                          "rollback_to_blue": {
                            "entry": [
                              "rollback_traffic_to_blue",
                              "cleanup_failed_green"
                            ],
                            "on": {
                              "ROLLBACK_SUCCESS": "#deployment_failure"
                            }
                          }
                        },
                        "initial": "green_deployment"
                      },
                      "rolling_updates": {
                        "entry": [
                          "initiate_rolling_update",
                          "update_pods_incrementally"
                        ],
                        "on": {
                          "ROLLING_UPDATE_SUCCESS": "#deployment_success",
                          "ROLLING_UPDATE_FAILED": "rolling_rollback"
                        }
                      },
                      "rolling_rollback": {
                        "entry": [
                          "rollback_rolling_update"
                        ],
                        "on": {
                          "ROLLBACK_SUCCESS": "#deployment_failure"
                        }
                      },
                      "canary_releases": {
                        "entry": [
                          "deploy_canary_version",
                          "route_small_traffic_percentage"
                        ],
                        "states": {
                          "canary_monitoring": {
                            "entry": [
                              "monitor_canary_metrics",
                              "compare_with_baseline"
                            ],
                            "on": {
                              "CANARY_METRICS_GOOD": "canary_promotion",
                              "CANARY_METRICS_BAD": "canary_rollback",
                              "CANARY_TIMEOUT": "canary_promotion"
                            }
                          },
                          "canary_promotion": {
                            "entry": [
                              "promote_canary_to_full_deployment"
                            ],
                            "on": {
                              "PROMOTION_SUCCESS": "#deployment_success",
                              "PROMOTION_FAILED": "canary_rollback"
                            }
                          },
                          "canary_rollback": {
                            "entry": [
                              "rollback_canary_deployment"
                            ],
                            "on": {
                              "ROLLBACK_SUCCESS": "#deployment_failure"
                            }
                          }
                        },
                        "initial": "canary_monitoring"
                      }
                    }
                  },
                  "infrastructure_management": {
                    "states": {
                      "kubernetes_deployment": {
                        "entry": [
                          "deploy_to_kubernetes",
                          "apply_k8s_manifests"
                        ]
                      },
                      "cloud_native_setup": {
                        "entry": [
                          "configure_cloud_services",
                          "setup_cloud_resources"
                        ]
                      },
                      "auto_scaling_config": {
                        "entry": [
                          "configure_horizontal_pod_autoscaling",
                          "set_scaling_policies"
                        ]
                      },
                      "load_balancer_config": {
                        "entry": [
                          "configure_load_balancers",
                          "setup_ingress_controllers"
                        ]
                      }
                    },
                    "type": "parallel"
                  }
                },
                "type": "parallel",
                "on": {
                  "DEPLOYMENT_SUCCESS": "health_checked",
                  "DEPLOYMENT_FAILED": "deployment_failure"
                }
              },
              "health_checked": {
                "entry": [
                  "run_post_deployment_health_checks",
                  "validate_application_functionality"
                ],
                "on": {
                  "HEALTH_CHECKS_PASSED": "production_ready",
                  "HEALTH_CHECKS_FAILED": "health_check_failure"
                }
              },
              "production_ready": {
                "entry": [
                  "mark_deployment_successful",
                  "notify_completion",
                  "update_deployment_status"
                ],
                "type": "final"
              },
              "build_failure": {
                "entry": [
                  "log_build_failure",
                  "notify_build_failure"
                ],
                "on": {
                  "RETRY_BUILD": "build_initiated"
                },
                "type": "final"
              },
              "build_blocked": {
                "entry": [
                  "block_build_due_to_security",
                  "escalate_security_issues"
                ],
                "on": {
                  "SECURITY_RESOLVED": "image_built",
                  "OVERRIDE_SECURITY": "deployed"
                }
              },
              "registry_failure": {
                "entry": [
                  "handle_registry_failure",
                  "attempt_registry_recovery"
                ],
                "on": {
                  "REGISTRY_RECOVERED": "image_built",
                  "USE_FALLBACK_REGISTRY": "image_built"
                }
              },
              "deployment_failure": {
                "entry": [
                  "log_deployment_failure",
                  "initiate_rollback_procedures"
                ],
                "on": {
                  "RETRY_DEPLOYMENT": "deployed",
                  "ROLLBACK_COMPLETE": "rollback_success"
                }
              },
              "health_check_failure": {
                "entry": [
                  "handle_health_check_failure",
                  "diagnose_application_issues"
                ],
                "on": {
                  "ISSUES_RESOLVED": "health_checked",
                  "ROLLBACK_REQUIRED": "deployment_failure"
                }
              },
              "rollback_success": {
                "entry": [
                  "confirm_rollback_success",
                  "restore_previous_version"
                ],
                "type": "final"
              }
            }
          },
          "business_logic": {
            "containerization": [
              "multi_stage_builds",
              "image_optimization",
              "security_scanning",
              "registry_management"
            ],
            "deployment_strategies": [
              "blue_green_deployment",
              "rolling_updates",
              "canary_releases",
              "rollback_mechanisms"
            ],
            "infrastructure": [
              "kubernetes_support",
              "cloud_native",
              "auto_scaling",
              "load_balancing"
            ]
          },
          "color": "#808080"
        },
        {
          "id": "role_based_access_control",
          "type": "logic",
          "name": "Role-Based Access Control Engine",
          "description": "Core RBAC engine for permission evaluation and access control decisions",
          "path": "src/backend/base/langflow/services/rbac/access_control.py",
          "color": "#00FF00",
          "rbac_feature": "Core RBAC engine",
          "statechart": {
            "id": "rbacEngineStatechart",
            "initial": "initializing",
            "states": {
              "initializing": {
                "entry": [
                  "loadDefaultRoles",
                  "loadSystemPermissions"
                ],
                "on": {
                  "INITIALIZATION_COMPLETE": "ready",
                  "INITIALIZATION_FAILED": "error"
                }
              },
              "ready": {
                "on": {
                  "ACCESS_CHECK_REQUEST": "evaluating_permissions",
                  "ROLE_ASSIGNMENT_REQUEST": "processing_assignment",
                  "BULK_ASSIGNMENT_REQUEST": "processing_bulk_assignment"
                }
              },
              "evaluating_permissions": {
                "entry": [
                  "resolveUserRoles",
                  "evaluatePermissions"
                ],
                "on": {
                  "PERMISSION_GRANTED": "access_granted",
                  "PERMISSION_DENIED": "access_denied",
                  "EVALUATION_ERROR": "error"
                }
              },
              "processing_assignment": {
                "entry": [
                  "validateAssignment",
                  "checkAssignerPermissions"
                ],
                "on": {
                  "ASSIGNMENT_VALIDATED": "assignment_complete",
                  "ASSIGNMENT_INVALID": "assignment_rejected",
                  "INSUFFICIENT_PERMISSIONS": "access_denied"
                }
              },
              "processing_bulk_assignment": {
                "entry": [
                  "validateBulkAssignments",
                  "processInBatches"
                ],
                "on": {
                  "BULK_COMPLETE": "ready",
                  "BULK_PARTIAL_SUCCESS": "partial_success",
                  "BULK_FAILED": "error"
                }
              },
              "access_granted": {
                "entry": [
                  "logAccessGrant",
                  "cacheResult"
                ],
                "on": {
                  "RESULT_CACHED": "ready"
                }
              },
              "access_denied": {
                "entry": [
                  "logAccessDenial",
                  "auditSecurityEvent"
                ],
                "on": {
                  "AUDIT_COMPLETE": "ready"
                }
              },
              "assignment_complete": {
                "entry": [
                  "persistAssignment",
                  "notifyAssignee",
                  "auditRoleChange"
                ],
                "on": {
                  "ASSIGNMENT_PERSISTED": "ready"
                }
              },
              "assignment_rejected": {
                "entry": [
                  "logRejection",
                  "notifyRequester"
                ],
                "on": {
                  "NOTIFICATION_SENT": "ready"
                }
              },
              "partial_success": {
                "entry": [
                  "logPartialResults",
                  "notifyAdministrators"
                ],
                "on": {
                  "NOTIFICATIONS_SENT": "ready"
                }
              },
              "error": {
                "entry": [
                  "logError",
                  "alertAdministrators"
                ],
                "on": {
                  "ERROR_ACKNOWLEDGED": "ready",
                  "RESTART_REQUIRED": "initializing"
                }
              }
            }
          }
        },
        {
          "id": "permission_evaluator",
          "type": "logic",
          "name": "Permission Evaluator",
          "description": "Advanced permission evaluation with scope resolution and conditional logic",
          "path": "src/backend/base/langflow/services/rbac/permission_evaluator.py",
          "color": "#00FF00",
          "rbac_feature": "Permission evaluation engine",
          "statechart": {
            "id": "permissionEvaluatorStatechart",
            "initial": "idle",
            "states": {
              "idle": {
                "on": {
                  "EVALUATE_PERMISSION": "resolving_context"
                }
              },
              "resolving_context": {
                "entry": [
                  "extractUserContext",
                  "identifyResource",
                  "determineScope"
                ],
                "on": {
                  "CONTEXT_RESOLVED": "gathering_permissions",
                  "INVALID_CONTEXT": "evaluation_failed"
                }
              },
              "gathering_permissions": {
                "entry": [
                  "getUserRoles",
                  "getGroupPermissions",
                  "getDirectPermissions"
                ],
                "on": {
                  "PERMISSIONS_GATHERED": "evaluating_rules",
                  "PERMISSION_LOOKUP_FAILED": "evaluation_failed"
                }
              },
              "evaluating_rules": {
                "entry": [
                  "applyPermissionLogic",
                  "checkConditionals",
                  "evaluateScopes"
                ],
                "on": {
                  "PERMISSION_ALLOWED": "evaluation_success",
                  "PERMISSION_DENIED": "evaluation_denied",
                  "RULE_CONFLICT": "resolving_conflicts"
                }
              },
              "resolving_conflicts": {
                "entry": [
                  "applyConflictResolution",
                  "prioritizePermissions"
                ],
                "on": {
                  "CONFLICT_RESOLVED": "evaluation_success",
                  "UNRESOLVABLE_CONFLICT": "evaluation_failed"
                }
              },
              "evaluation_success": {
                "entry": [
                  "cacheResult",
                  "logSuccess"
                ],
                "on": {
                  "RESULT_RETURNED": "idle"
                }
              },
              "evaluation_denied": {
                "entry": [
                  "cacheResult",
                  "logDenial"
                ],
                "on": {
                  "RESULT_RETURNED": "idle"
                }
              },
              "evaluation_failed": {
                "entry": [
                  "logError",
                  "returnError"
                ],
                "on": {
                  "ERROR_RETURNED": "idle"
                }
              }
            }
          }
        },
        {
          "id": "group_management",
          "type": "logic",
          "name": "Group Management System",
          "description": "User group lifecycle management with SSO synchronization and role inheritance",
          "path": "src/backend/base/langflow/services/rbac/group_management.py",
          "color": "#00FF00",
          "rbac_feature": "Group management logic",
          "statechart": {
            "id": "groupManagementStatechart",
            "initial": "ready",
            "states": {
              "ready": {
                "on": {
                  "CREATE_GROUP": "creating_group",
                  "ADD_MEMBER": "adding_member",
                  "REMOVE_MEMBER": "removing_member",
                  "SYNC_SSO_GROUPS": "syncing_sso"
                }
              },
              "creating_group": {
                "entry": [
                  "validateGroupData",
                  "checkPermissions"
                ],
                "on": {
                  "VALIDATION_PASSED": "persisting_group",
                  "VALIDATION_FAILED": "creation_failed",
                  "INSUFFICIENT_PERMISSIONS": "creation_denied"
                }
              },
              "persisting_group": {
                "entry": [
                  "saveGroup",
                  "assignCreatorRole",
                  "auditGroupCreation"
                ],
                "on": {
                  "GROUP_SAVED": "creation_complete",
                  "SAVE_FAILED": "creation_failed"
                }
              },
              "adding_member": {
                "entry": [
                  "validateMembership",
                  "checkMemberPermissions"
                ],
                "on": {
                  "MEMBER_VALIDATED": "updating_membership",
                  "MEMBER_INVALID": "membership_rejected",
                  "PERMISSION_DENIED": "membership_denied"
                }
              },
              "updating_membership": {
                "entry": [
                  "addToGroup",
                  "inheritGroupRoles",
                  "notifyMember"
                ],
                "on": {
                  "MEMBERSHIP_UPDATED": "membership_complete",
                  "UPDATE_FAILED": "membership_rejected"
                }
              },
              "removing_member": {
                "entry": [
                  "validateRemoval",
                  "revokeGroupRoles"
                ],
                "on": {
                  "REMOVAL_VALIDATED": "removing_from_group",
                  "REMOVAL_INVALID": "removal_rejected"
                }
              },
              "removing_from_group": {
                "entry": [
                  "updateMembership",
                  "auditRemoval",
                  "notifyMember"
                ],
                "on": {
                  "MEMBER_REMOVED": "removal_complete",
                  "REMOVAL_FAILED": "removal_rejected"
                }
              },
              "syncing_sso": {
                "entry": [
                  "fetchSSOGroups",
                  "compareLocalGroups"
                ],
                "on": {
                  "SYNC_DATA_READY": "applying_sso_changes",
                  "SSO_UNAVAILABLE": "sync_failed",
                  "NO_CHANGES": "sync_complete"
                }
              },
              "applying_sso_changes": {
                "entry": [
                  "createNewGroups",
                  "updateMembers",
                  "deactivateOrphanedGroups"
                ],
                "on": {
                  "CHANGES_APPLIED": "sync_complete",
                  "PARTIAL_SYNC": "sync_partial",
                  "SYNC_ERROR": "sync_failed"
                }
              }
            }
          }
        },
        {
          "id": "audit_logger",
          "type": "logic",
          "name": "RBAC Audit Logger",
          "description": "Comprehensive audit logging system for compliance and security monitoring",
          "path": "src/backend/base/langflow/services/rbac/audit_logger.py",
          "color": "#00FF00",
          "rbac_feature": "Audit logging system",
          "statechart": {
            "id": "auditLoggerStatechart",
            "initial": "ready",
            "states": {
              "ready": {
                "on": {
                  "LOG_EVENT": "processing_event",
                  "BATCH_LOG": "processing_batch",
                  "EXPORT_LOGS": "exporting_logs"
                }
              },
              "processing_event": {
                "entry": [
                  "validateEvent",
                  "enrichEventData",
                  "classifyEvent"
                ],
                "on": {
                  "EVENT_PROCESSED": "storing_event",
                  "EVENT_INVALID": "processing_failed"
                }
              },
              "storing_event": {
                "entry": [
                  "persistToDatabase",
                  "indexForSearch",
                  "triggerAlerts"
                ],
                "on": {
                  "EVENT_STORED": "ready",
                  "STORAGE_FAILED": "retry_storage"
                }
              },
              "processing_batch": {
                "entry": [
                  "validateBatch",
                  "processConcurrently"
                ],
                "on": {
                  "BATCH_PROCESSED": "storing_batch",
                  "BATCH_PARTIAL": "partial_storage",
                  "BATCH_FAILED": "processing_failed"
                }
              },
              "storing_batch": {
                "entry": [
                  "bulkInsert",
                  "updateSearchIndex"
                ],
                "on": {
                  "BATCH_STORED": "ready",
                  "STORAGE_FAILED": "retry_storage"
                }
              },
              "exporting_logs": {
                "entry": [
                  "validateExportRequest",
                  "checkPermissions"
                ],
                "on": {
                  "EXPORT_AUTHORIZED": "generating_export",
                  "UNAUTHORIZED": "export_denied",
                  "INVALID_REQUEST": "processing_failed"
                }
              },
              "generating_export": {
                "entry": [
                  "queryLogs",
                  "formatOutput",
                  "encryptSensitiveData"
                ],
                "on": {
                  "EXPORT_READY": "export_complete",
                  "GENERATION_FAILED": "processing_failed"
                }
              },
              "retry_storage": {
                "entry": [
                  "scheduleRetry",
                  "alertAdministrators"
                ],
                "on": {
                  "RETRY_SCHEDULED": "ready",
                  "MAX_RETRIES_EXCEEDED": "processing_failed"
                }
              },
              "partial_storage": {
                "entry": [
                  "logPartialResults",
                  "scheduleFailedRetry"
                ],
                "on": {
                  "PARTIAL_COMPLETE": "ready"
                }
              }
            }
          }
        },
        {
          "id": "sso_role_sync",
          "type": "logic",
          "name": "SSO Role Synchronization",
          "description": "Enterprise SSO integration with automatic role mapping and user provisioning",
          "path": "src/backend/base/langflow/services/rbac/sso_sync.py",
          "color": "#00FF00",
          "rbac_feature": "SSO integration and sync",
          "statechart": {
            "id": "ssoRoleSyncStatechart",
            "initial": "ready",
            "states": {
              "ready": {
                "on": {
                  "SYNC_TRIGGERED": "connecting_sso",
                  "USER_LOGIN": "processing_sso_user",
                  "SCHEDULED_SYNC": "bulk_synchronization"
                }
              },
              "connecting_sso": {
                "entry": [
                  "validateSSOConfig",
                  "establishConnection"
                ],
                "on": {
                  "CONNECTION_ESTABLISHED": "fetching_sso_data",
                  "CONNECTION_FAILED": "sync_failed",
                  "CONFIG_INVALID": "configuration_error"
                }
              },
              "fetching_sso_data": {
                "entry": [
                  "queryUserData",
                  "fetchGroupMemberships",
                  "retrieveRoleMappings"
                ],
                "on": {
                  "DATA_RETRIEVED": "processing_mappings",
                  "FETCH_FAILED": "sync_failed",
                  "PARTIAL_DATA": "processing_partial"
                }
              },
              "processing_mappings": {
                "entry": [
                  "applyRoleMappings",
                  "resolveGroupConflicts",
                  "validatePermissions"
                ],
                "on": {
                  "MAPPINGS_PROCESSED": "updating_local_data",
                  "MAPPING_CONFLICTS": "resolving_conflicts",
                  "PROCESSING_FAILED": "sync_failed"
                }
              },
              "updating_local_data": {
                "entry": [
                  "updateUserRoles",
                  "syncGroupMemberships",
                  "auditChanges"
                ],
                "on": {
                  "UPDATE_COMPLETE": "sync_successful",
                  "UPDATE_FAILED": "sync_failed",
                  "PARTIAL_UPDATE": "sync_partial"
                }
              },
              "processing_sso_user": {
                "entry": [
                  "extractUserClaims",
                  "mapToLocalRoles",
                  "provisionIfNeeded"
                ],
                "on": {
                  "USER_PROCESSED": "ready",
                  "PROVISIONING_REQUIRED": "creating_user",
                  "PROCESSING_FAILED": "user_denied"
                }
              },
              "creating_user": {
                "entry": [
                  "createLocalUser",
                  "assignMappedRoles",
                  "addToGroups"
                ],
                "on": {
                  "USER_CREATED": "ready",
                  "CREATION_FAILED": "user_denied"
                }
              },
              "bulk_synchronization": {
                "entry": [
                  "fetchAllUsers",
                  "processInBatches",
                  "trackProgress"
                ],
                "on": {
                  "BULK_COMPLETE": "sync_successful",
                  "BULK_PARTIAL": "sync_partial",
                  "BULK_FAILED": "sync_failed"
                }
              }
            }
          }
        }
      ],
      "test_nodes": [
        {
          "id": "flow_management_tests",
          "type": "test",
          "name": "Flow Management Test Suite",
          "description": "Comprehensive testing of flow CRUD operations, validation, and user isolation",
          "test_path": "tests/unit/api/v1/",
          "test_scenarios": [
            "flow_creation_with_auto_increment_naming",
            "flow_update_with_data_integrity",
            "flow_deletion_with_cascade_cleanup",
            "user_data_isolation_validation",
            "endpoint_name_uniqueness_enforcement"
          ],
          "gherkin": {
            "feature": "Flow Management",
            "description": "As a user, I want to manage my flows with CRUD operations, so that I can organize and control my AI workflows effectively",
            "scenarios": [
              {
                "name": "Create flow with automatic name conflict resolution",
                "given": [
                  "I am logged in as an active user",
                  "I navigate to the flow creation page"
                ],
                "when": [
                  "I create a flow with name 'MyFlow'",
                  "And a flow with that name already exists"
                ],
                "then": [
                  "the flow should be created successfully",
                  "the flow name should be 'MyFlow (1)'",
                  "I should receive a 201 status code",
                  "the flow should be associated with my user account"
                ]
              },
              {
                "name": "Retrieve flows with user isolation",
                "given": [
                  "I am logged in as user 'alice'",
                  "User 'bob' has created flows",
                  "I have created 3 flows"
                ],
                "when": [
                  "I request to view my flows"
                ],
                "then": [
                  "I should only see my 3 flows",
                  "I should not see bob's flows",
                  "the response should include pagination metadata",
                  "I should receive a 200 status code"
                ]
              },
              {
                "name": "Update flow with field-level validation",
                "given": [
                  "I am logged in as an active user",
                  "I have a flow named 'TestFlow'"
                ],
                "when": [
                  "I update the flow description to 'Updated description'",
                  "And I update the flow icon to 'new-icon'"
                ],
                "then": [
                  "the flow description should be updated",
                  "the flow icon should be updated",
                  "the updated_at timestamp should be refreshed",
                  "other fields should remain unchanged"
                ]
              },
              {
                "name": "Delete flow with cascade cleanup",
                "given": [
                  "I am logged in as an active user",
                  "I have a flow with associated messages and transactions"
                ],
                "when": [
                  "I delete the flow"
                ],
                "then": [
                  "the flow should be removed from the database",
                  "all associated messages should be deleted",
                  "all associated transactions should be deleted",
                  "referential integrity should be maintained"
                ]
              },
              {
                "name": "Create flow with endpoint name uniqueness",
                "given": [
                  "I am logged in as an active user"
                ],
                "when": [
                  "I create a flow with endpoint name 'my-endpoint'",
                  "And I try to create another flow with the same endpoint name"
                ],
                "then": [
                  "the first flow should be created successfully",
                  "the second flow creation should fail with a 409 status code",
                  "I should receive an error message about endpoint name conflict"
                ]
              }
            ]
          },
          "acceptance_criteria": {
            "flow_creation": "201 status, unique naming, proper user association",
            "flow_retrieval": "user-scoped data only, pagination support",
            "flow_update": "field-level updates, timestamp management",
            "flow_deletion": "cascade cleanup, referential integrity"
          },
          "color": "#808080"
        },
        {
          "id": "authentication_authorization_tests",
          "type": "test",
          "name": "Authentication and Authorization Test Suite",
          "description": "JWT authentication, API key validation, session management, and security boundary testing",
          "test_path": "tests/unit/services/auth/",
          "test_scenarios": [
            "jwt_token_generation_validation",
            "api_key_authentication_flow",
            "user_session_management",
            "cross_user_access_prevention",
            "token_refresh_mechanism"
          ],
          "gherkin": {
            "feature": "Authentication and Authorization",
            "description": "As a system, I need to securely authenticate users and manage sessions, so that user data remains isolated and protected",
            "background": [
              "Given the system has authentication enabled",
              "And the JWT secret is properly configured"
            ],
            "scenarios": [
              {
                "name": "Successful user login with JWT token generation",
                "given": [
                  "I have a registered user with username 'testuser' and password 'securepass'"
                ],
                "when": [
                  "I submit valid login credentials"
                ],
                "then": [
                  "I should receive a valid JWT token",
                  "the token should contain user identity claims",
                  "a user session should be created",
                  "I should receive a 200 status code"
                ]
              },
              {
                "name": "Failed login with invalid credentials",
                "given": [
                  "I have invalid login credentials"
                ],
                "when": [
                  "I submit the invalid credentials"
                ],
                "then": [
                  "I should not receive a JWT token",
                  "no user session should be created",
                  "I should receive a 401 status code",
                  "I should get an error message about invalid credentials"
                ]
              },
              {
                "name": "API key authentication with usage tracking",
                "given": [
                  "I have a valid API key 'sk-test123' associated with user 'alice'"
                ],
                "when": [
                  "I make an API request using the API key"
                ],
                "then": [
                  "the request should be authenticated successfully",
                  "the API key usage count should be incremented",
                  "the last_used_at timestamp should be updated",
                  "the request should be processed normally"
                ]
              },
              {
                "name": "User data isolation enforcement",
                "given": [
                  "User 'alice' has flows and data",
                  "User 'bob' is authenticated"
                ],
                "when": [
                  "User 'bob' tries to access alice's data"
                ],
                "then": [
                  "the request should be denied",
                  "bob should only see his own data",
                  "I should receive a 403 status code",
                  "strict data scoping should be maintained"
                ]
              },
              {
                "name": "JWT token refresh mechanism",
                "given": [
                  "I have an expired JWT token",
                  "I have a valid refresh token"
                ],
                "when": [
                  "I request a token refresh using the refresh token"
                ],
                "then": [
                  "I should receive a new valid JWT token",
                  "the old token should be invalidated",
                  "the refresh token should be rotated",
                  "I should receive a 200 status code"
                ]
              }
            ]
          },
          "acceptance_criteria": {
            "login_success": "valid tokens generated, user session created",
            "login_failure": "401 status, no token issued",
            "api_key_auth": "valid key accepted, usage tracked",
            "user_isolation": "strict data scoping, no cross-user access"
          },
          "color": "#808080"
        },
        {
          "id": "graph_execution_tests",
          "type": "test",
          "name": "Graph Execution Engine Test Suite",
          "description": "Graph building, vertex execution, dependency resolution, and cycle detection testing",
          "test_path": "tests/unit/graph/",
          "test_scenarios": [
            "graph_preparation_validation",
            "vertex_dependency_resolution",
            "cyclic_graph_handling",
            "parallel_execution_coordination",
            "execution_state_management"
          ],
          "gherkin": {
            "feature": "Graph Execution Engine",
            "description": "As a system, I need to execute flow graphs reliably with proper dependency resolution, so that complex AI workflows run correctly",
            "background": [
              "Given the graph execution engine is initialized",
              "And vertex dependencies are properly configured"
            ],
            "scenarios": [
              {
                "name": "Execute graph with proper dependency resolution",
                "given": [
                  "I have a flow with 5 vertices",
                  "Vertex A depends on vertices B and C",
                  "Vertices B and C have no dependencies"
                ],
                "when": [
                  "I execute the flow graph"
                ],
                "then": [
                  "vertices B and C should execute first",
                  "vertex A should execute after B and C complete",
                  "the dependency order should be respected",
                  "all vertices should be properly prepared"
                ]
              },
              {
                "name": "Handle cyclic graph with max iterations",
                "given": [
                  "I have a flow graph with a circular dependency",
                  "Vertex A depends on vertex B",
                  "Vertex B depends on vertex A",
                  "Max iterations is set to 10"
                ],
                "when": [
                  "I attempt to execute the flow graph"
                ],
                "then": [
                  "the cycle should be detected",
                  "execution should not exceed 10 iterations",
                  "the system should handle the cycle gracefully",
                  "appropriate error messages should be generated"
                ]
              },
              {
                "name": "Successful parallel execution of independent vertices",
                "given": [
                  "I have a flow with 3 independent vertices",
                  "All vertices have no dependencies"
                ],
                "when": [
                  "I execute the flow graph"
                ],
                "then": [
                  "all vertices should execute in parallel",
                  "execution should complete successfully",
                  "outputs should be collected from all vertices",
                  "execution time should be optimized"
                ]
              },
              {
                "name": "Handle vertex execution failure gracefully",
                "given": [
                  "I have a flow with 3 vertices",
                  "Vertex B is configured to fail during execution"
                ],
                "when": [
                  "I execute the flow graph"
                ],
                "then": [
                  "the failure should be detected",
                  "the system should maintain state consistency",
                  "dependent vertices should handle the failure",
                  "graceful degradation should occur"
                ]
              },
              {
                "name": "Execute complex graph with nested dependencies",
                "given": [
                  "I have a flow with 8 vertices",
                  "Complex nested dependency relationships exist"
                ],
                "when": [
                  "I execute the flow graph"
                ],
                "then": [
                  "the execution order should be correctly determined",
                  "all dependencies should be satisfied before execution",
                  "parallel execution should occur where possible",
                  "the complete graph should execute successfully"
                ]
              }
            ]
          },
          "acceptance_criteria": {
            "graph_build": "dependency order resolved, vertices prepared",
            "execution_success": "all vertices executed, outputs collected",
            "cycle_detection": "cycles identified, max iterations enforced",
            "error_handling": "graceful failure, state consistency"
          },
          "color": "#808080"
        },
        {
          "id": "component_integration_tests",
          "type": "test",
          "name": "Component Integration Test Suite",
          "description": "Dynamic component loading, template validation, execution, and lifecycle management",
          "test_path": "tests/unit/components/",
          "test_scenarios": [
            "dynamic_component_import",
            "component_template_validation",
            "component_execution_lifecycle",
            "component_caching_behavior",
            "component_error_handling"
          ],
          "gherkin": {
            "feature": "Component Integration",
            "description": "As a system, I need to dynamically load and manage components, so that flows can use various AI and processing components",
            "background": [
              "Given the component management system is active",
              "And component templates are available"
            ],
            "scenarios": [
              {
                "name": "Lazy load component with successful caching",
                "given": [
                  "A component 'TextProcessor' is not loaded",
                  "The component template is available in the registry"
                ],
                "when": [
                  "The component is requested for the first time"
                ],
                "then": [
                  "the component should be dynamically imported",
                  "the component should be cached for future use",
                  "lazy loading should complete successfully",
                  "subsequent requests should use the cached version"
                ]
              },
              {
                "name": "Validate component template schema",
                "given": [
                  "I have a component template with required fields",
                  "The template has input/output specifications"
                ],
                "when": [
                  "The component template is validated"
                ],
                "then": [
                  "schema compliance should be verified",
                  "all required fields should be present",
                  "field validation should pass",
                  "the template should be marked as valid"
                ]
              },
              {
                "name": "Execute component with successful output generation",
                "given": [
                  "I have a loaded and validated component",
                  "The component has proper input data"
                ],
                "when": [
                  "I execute the component"
                ],
                "then": [
                  "the component should run successfully",
                  "outputs should be generated according to the template",
                  "execution should complete without errors",
                  "the output should match expected format"
                ]
              },
              {
                "name": "Handle component error with graceful recovery",
                "given": [
                  "I have a component that encounters an execution error",
                  "The error recovery mechanism is enabled"
                ],
                "when": [
                  "The component fails during execution"
                ],
                "then": [
                  "the error should be handled gracefully",
                  "system stability should be maintained",
                  "error details should be logged appropriately",
                  "the component should not crash the entire system"
                ]
              },
              {
                "name": "Hot reload component on template change",
                "given": [
                  "A component is loaded and cached",
                  "The component template is modified"
                ],
                "when": [
                  "The template change is detected"
                ],
                "then": [
                  "the cached component should be invalidated",
                  "the component should be reloaded with new template",
                  "hot reloading should complete successfully",
                  "existing executions should not be disrupted"
                ]
              }
            ]
          },
          "acceptance_criteria": {
            "component_loading": "lazy loading successful, caching active",
            "template_validation": "schema compliance, field validation",
            "execution": "component runs successfully, outputs generated",
            "error_recovery": "graceful error handling, system stability"
          },
          "color": "#808080"
        },
        {
          "id": "real_time_communication_tests",
          "type": "test",
          "name": "Real-time Communication Test Suite",
          "description": "WebSocket/SSE functionality, event streaming, and connection management testing",
          "test_path": "tests/unit/events/",
          "test_scenarios": [
            "websocket_connection_establishment",
            "server_sent_events_delivery",
            "event_queue_management",
            "connection_reconnection_logic",
            "message_delivery_guarantees"
          ],
          "gherkin": {
            "feature": "Real-time Communication",
            "description": "As a system, I need to provide reliable real-time communication, so that users receive immediate feedback and updates",
            "background": [
              "Given the real-time communication system is active",
              "And WebSocket and SSE capabilities are enabled"
            ],
            "scenarios": [
              {
                "name": "Establish WebSocket connection with automatic reconnection",
                "given": [
                  "A client wants to connect via WebSocket",
                  "The WebSocket server is running"
                ],
                "when": [
                  "The client initiates a WebSocket connection"
                ],
                "then": [
                  "the connection should be established successfully",
                  "connection stability should be maintained",
                  "automatic reconnection should be configured",
                  "the client should receive a connection confirmation"
                ]
              },
              {
                "name": "Deliver events with ordered delivery guarantee",
                "given": [
                  "A client is connected via WebSocket",
                  "Multiple events are queued for delivery"
                ],
                "when": [
                  "The events are sent to the client"
                ],
                "then": [
                  "all events should be delivered in order",
                  "no message loss should occur",
                  "event delivery should be confirmed",
                  "the client should receive all events correctly"
                ]
              },
              {
                "name": "Handle connection loss with graceful recovery",
                "given": [
                  "A client is connected and receiving events",
                  "The network connection is interrupted"
                ],
                "when": [
                  "The connection is lost and then restored"
                ],
                "then": [
                  "the system should detect the connection loss",
                  "automatic reconnection should be attempted",
                  "graceful degradation should occur during downtime",
                  "error recovery should restore full functionality"
                ]
              },
              {
                "name": "Achieve low latency high throughput performance",
                "given": [
                  "Multiple clients are connected",
                  "High volume of events need to be delivered"
                ],
                "when": [
                  "Events are broadcasted to all clients"
                ],
                "then": [
                  "event delivery latency should be minimal",
                  "high throughput should be maintained",
                  "system performance should remain stable",
                  "no client should experience significant delays"
                ]
              },
              {
                "name": "Fallback to Server-Sent Events when WebSocket fails",
                "given": [
                  "A client attempts WebSocket connection",
                  "WebSocket connection fails"
                ],
                "when": [
                  "The system detects WebSocket failure"
                ],
                "then": [
                  "the system should fallback to Server-Sent Events",
                  "event streaming should continue seamlessly",
                  "the client should be notified of the fallback",
                  "real-time communication should be maintained"
                ]
              }
            ]
          },
          "acceptance_criteria": {
            "connection_stability": "reliable connections, automatic reconnection",
            "event_delivery": "ordered delivery, no message loss",
            "performance": "low latency, high throughput",
            "reliability": "graceful degradation, error recovery"
          },
          "color": "#808080"
        },
        {
          "id": "job_queue_tests",
          "type": "test",
          "name": "Asynchronous Job Queue Test Suite",
          "description": "Background job processing, event streaming, cancellation, and resource cleanup testing",
          "test_path": "tests/unit/services/job_queue/",
          "test_scenarios": [
            "job_creation_and_queuing",
            "job_execution_monitoring",
            "job_cancellation_handling",
            "resource_cleanup_verification",
            "event_streaming_integration"
          ],
          "gherkin": {
            "feature": "Asynchronous Job Queue",
            "description": "As a system, I need to process background jobs reliably, so that long-running tasks don't block user interactions",
            "background": [
              "Given the job queue system is running",
              "And event streaming is configured"
            ],
            "scenarios": [
              {
                "name": "Execute job successfully with event streaming",
                "given": [
                  "A job is queued for background processing",
                  "The job has valid parameters and configuration"
                ],
                "when": [
                  "The job starts processing"
                ],
                "then": [
                  "the job should execute successfully",
                  "progress events should be streamed in real-time",
                  "completion events should be sent when finished",
                  "job results should be available for retrieval"
                ]
              },
              {
                "name": "Cancel job gracefully with resource cleanup",
                "given": [
                  "A job is currently running",
                  "The user requests job cancellation"
                ],
                "when": [
                  "The cancellation request is processed"
                ],
                "then": [
                  "the job should be cancelled gracefully",
                  "all allocated resources should be cleaned up",
                  "cancellation events should be streamed",
                  "partial results should be preserved if applicable"
                ]
              },
              {
                "name": "Monitor job with real-time status updates",
                "given": [
                  "A long-running job is in progress",
                  "Real-time monitoring is enabled"
                ],
                "when": [
                  "The job progresses through different stages"
                ],
                "then": [
                  "status updates should be provided in real-time",
                  "progress tracking should show completion percentage",
                  "monitoring events should include detailed information",
                  "users should see current job state"
                ]
              },
              {
                "name": "Handle job failure with retry mechanism",
                "given": [
                  "A job fails during execution",
                  "Retry mechanism is configured with 3 attempts"
                ],
                "when": [
                  "The job failure is detected"
                ],
                "then": [
                  "the failure should be handled appropriately",
                  "retry mechanism should attempt job re-execution",
                  "failure events should be logged and streamed",
                  "the system should remain stable after failures"
                ]
              },
              {
                "name": "Process multiple jobs concurrently with resource management",
                "given": [
                  "Multiple jobs are queued simultaneously",
                  "System resource limits are configured"
                ],
                "when": [
                  "Jobs are processed concurrently"
                ],
                "then": [
                  "jobs should be processed within resource constraints",
                  "resource cleanup should occur after each job",
                  "job queue should maintain proper ordering",
                  "system performance should remain optimal"
                ]
              }
            ]
          },
          "acceptance_criteria": {
            "job_processing": "jobs execute successfully, events streamed",
            "cancellation": "graceful cancellation, resource cleanup",
            "monitoring": "real-time status updates, progress tracking",
            "reliability": "failure handling, retry mechanisms"
          },
          "color": "#808080"
        },
        {
          "id": "validation_engine_tests",
          "type": "test",
          "name": "Multi-layer Validation Engine Test Suite",
          "description": "Schema validation, business rule enforcement, and data integrity checking",
          "test_path": "tests/unit/validation/",
          "test_scenarios": [
            "pydantic_schema_validation",
            "business_rule_enforcement",
            "data_integrity_checks",
            "validation_error_handling",
            "performance_optimization"
          ],
          "gherkin": {
            "feature": "Multi-layer Validation Engine",
            "description": "As a system, I need to validate data through multiple layers, so that data integrity and business rules are enforced",
            "background": [
              "Given the validation engine is configured",
              "And validation schemas are loaded"
            ],
            "scenarios": [
              {
                "name": "Perform schema validation with type checking",
                "given": [
                  "I have input data with mixed types",
                  "A Pydantic schema is defined for validation"
                ],
                "when": [
                  "I validate the input data against the schema"
                ],
                "then": [
                  "type checking should be performed",
                  "format validation should occur",
                  "schema compliance should be verified",
                  "validation results should be returned"
                ]
              },
              {
                "name": "Enforce business rules with constraint validation",
                "given": [
                  "I have data that passes schema validation",
                  "Business rules are configured"
                ],
                "when": [
                  "I apply business rule validation"
                ],
                "then": [
                  "constraint enforcement should occur",
                  "business logic validation should be applied",
                  "rule violations should be detected",
                  "validation should proceed through all layers"
                ]
              },
              {
                "name": "Provide descriptive error messages with field-level feedback",
                "given": [
                  "I have invalid input data",
                  "Multiple validation errors exist"
                ],
                "when": [
                  "Validation is performed and fails"
                ],
                "then": [
                  "descriptive error messages should be generated",
                  "field-level feedback should be provided",
                  "error reporting should be comprehensive",
                  "users should understand what to fix"
                ]
              },
              {
                "name": "Optimize validation performance with caching",
                "given": [
                  "I have frequently validated data patterns",
                  "Validation caching is enabled"
                ],
                "when": [
                  "I validate similar data multiple times"
                ],
                "then": [
                  "efficient validation should occur",
                  "caching should be utilized for repeated patterns",
                  "performance should be optimized",
                  "validation speed should improve over time"
                ]
              },
              {
                "name": "Handle complex nested data validation",
                "given": [
                  "I have deeply nested data structures",
                  "Validation rules exist for all levels"
                ],
                "when": [
                  "I validate the nested data structure"
                ],
                "then": [
                  "all nesting levels should be validated",
                  "nested business rules should be applied",
                  "validation should handle complex relationships",
                  "complete validation results should be provided"
                ]
              }
            ]
          },
          "acceptance_criteria": {
            "schema_validation": "type checking, format validation",
            "business_rules": "constraint enforcement, logic validation",
            "error_reporting": "descriptive errors, field-level feedback",
            "performance": "efficient validation, caching utilization"
          },
          "color": "#808080"
        },
        {
          "id": "caching_system_tests",
          "type": "test",
          "name": "Multi-level Caching System Test Suite",
          "description": "Cache hit/miss behavior, TTL management, invalidation strategies, and performance optimization",
          "test_path": "tests/unit/services/cache/",
          "test_scenarios": [
            "cache_hit_miss_behavior",
            "ttl_expiration_handling",
            "cache_invalidation_strategies",
            "memory_usage_optimization",
            "cache_consistency_validation"
          ],
          "gherkin": {
            "feature": "Multi-level Caching System",
            "description": "As a system, I need efficient caching across multiple levels, so that frequently accessed data is served quickly",
            "background": [
              "Given the caching system is initialized",
              "And cache levels are configured"
            ],
            "scenarios": [
              {
                "name": "Achieve high cache hit rates with low latency",
                "given": [
                  "Frequently accessed data is cached",
                  "Cache warming has occurred"
                ],
                "when": [
                  "Multiple requests are made for cached data"
                ],
                "then": [
                  "high hit rates should be achieved",
                  "low latency access should be maintained",
                  "cache performance should be optimal",
                  "response times should be consistently fast"
                ]
              },
              {
                "name": "Manage memory efficiently with garbage collection",
                "given": [
                  "The cache is at capacity",
                  "New data needs to be cached"
                ],
                "when": [
                  "Memory management is triggered"
                ],
                "then": [
                  "efficient memory usage should be maintained",
                  "garbage collection should free unused entries",
                  "memory should not exceed configured limits",
                  "cache performance should remain stable"
                ]
              },
              {
                "name": "Invalidate cache with timely updates",
                "given": [
                  "Cached data has been updated in the source",
                  "Cache invalidation is triggered"
                ],
                "when": [
                  "The invalidation process runs"
                ],
                "then": [
                  "timely updates should occur",
                  "consistency should be maintained across cache levels",
                  "stale data should be removed",
                  "fresh data should be available for caching"
                ]
              },
              {
                "name": "Scale cache performance under high load",
                "given": [
                  "High concurrent load is applied to the cache",
                  "Cache partitioning is configured"
                ],
                "when": [
                  "Multiple requests access different cache partitions"
                ],
                "then": [
                  "performance should be maintained under load",
                  "cache partitioning should distribute load effectively",
                  "no single cache partition should become a bottleneck",
                  "overall system scalability should be preserved"
                ]
              },
              {
                "name": "Handle cache misses with efficient loading",
                "given": [
                  "A request is made for uncached data",
                  "The data source is available"
                ],
                "when": [
                  "A cache miss occurs"
                ],
                "then": [
                  "data should be loaded efficiently from source",
                  "the loaded data should be cached for future requests",
                  "cache loading should not block other operations",
                  "subsequent requests should result in cache hits"
                ]
              }
            ]
          },
          "acceptance_criteria": {
            "cache_performance": "high hit rates, low latency access",
            "memory_management": "efficient memory usage, garbage collection",
            "invalidation": "timely updates, consistency maintenance",
            "scalability": "performance under load, cache partitioning"
          },
          "color": "#808080"
        },
        {
          "id": "error_handling_tests",
          "type": "test",
          "name": "Comprehensive Error Handling Test Suite",
          "description": "Error classification, recovery strategies, user feedback, and system stability testing",
          "test_path": "tests/unit/exceptions/",
          "test_scenarios": [
            "error_classification_accuracy",
            "graceful_degradation_behavior",
            "retry_mechanism_effectiveness",
            "user_friendly_error_messages",
            "system_stability_under_errors"
          ],
          "gherkin": {
            "feature": "Comprehensive Error Handling",
            "description": "As a system, I need to handle errors gracefully across all components, so that system stability is maintained and users receive helpful feedback",
            "background": [
              "Given the error handling system is active",
              "And error recovery mechanisms are configured"
            ],
            "scenarios": [
              {
                "name": "Apply graceful degradation with fallback mechanisms",
                "given": [
                  "A critical component encounters an error",
                  "Fallback mechanisms are configured"
                ],
                "when": [
                  "The error occurs during system operation"
                ],
                "then": [
                  "graceful degradation should be applied",
                  "fallback mechanisms should activate",
                  "system functionality should be preserved at reduced capacity",
                  "error recovery should minimize user impact"
                ]
              },
              {
                "name": "Provide helpful error messages with recovery guidance",
                "given": [
                  "A user encounters an application error",
                  "Error message templates are configured"
                ],
                "when": [
                  "The error is presented to the user"
                ],
                "then": [
                  "helpful error messages should be displayed",
                  "recovery guidance should be provided",
                  "users should understand what went wrong",
                  "actionable steps should be suggested"
                ]
              },
              {
                "name": "Maintain system stability when errors are contained",
                "given": [
                  "Multiple components are experiencing errors",
                  "Error containment is active"
                ],
                "when": [
                  "Errors propagate through the system"
                ],
                "then": [
                  "errors should be contained to their respective components",
                  "system stability should be maintained",
                  "the system should remain operational",
                  "error isolation should prevent cascading failures"
                ]
              },
              {
                "name": "Track errors with comprehensive monitoring and alerting",
                "given": [
                  "Various errors occur across the system",
                  "Error monitoring is configured"
                ],
                "when": [
                  "Errors are detected and logged"
                ],
                "then": [
                  "error tracking should capture all relevant details",
                  "alerting should notify appropriate teams",
                  "diagnostic information should be collected",
                  "error patterns should be identified for analysis"
                ]
              },
              {
                "name": "Recover from transient errors with retry mechanisms",
                "given": [
                  "A transient error occurs during an operation",
                  "Retry mechanisms are configured with backoff"
                ],
                "when": [
                  "The retry mechanism is triggered"
                ],
                "then": [
                  "the operation should be retried with exponential backoff",
                  "transient errors should be resolved through retries",
                  "maximum retry attempts should be respected",
                  "successful recovery should restore normal operation"
                ]
              }
            ]
          },
          "acceptance_criteria": {
            "error_recovery": "graceful degradation, fallback mechanisms",
            "user_experience": "helpful error messages, recovery guidance",
            "system_stability": "errors contained, system remains operational",
            "monitoring": "error tracking, alerting, diagnostics"
          },
          "color": "#808080"
        },
        {
          "id": "security_access_control_tests",
          "type": "test",
          "name": "Security and Access Control Test Suite",
          "description": "RBAC enforcement, data isolation, input sanitization, and security boundary testing",
          "test_path": "tests/unit/security/",
          "test_scenarios": [
            "role_based_access_control",
            "data_isolation_enforcement",
            "input_sanitization_validation",
            "api_rate_limiting_behavior",
            "security_boundary_testing"
          ],
          "gherkin": {
            "feature": "Security and Access Control",
            "description": "As a system, I need comprehensive security controls, so that user data is protected and unauthorized access is prevented",
            "background": [
              "Given the security system is enabled",
              "And access control policies are configured"
            ],
            "scenarios": [
              {
                "name": "Enforce proper permissions and deny unauthorized access",
                "given": [
                  "A user has limited permissions",
                  "Protected resources require higher permissions"
                ],
                "when": [
                  "The user attempts to access protected resources"
                ],
                "then": [
                  "proper permissions should be enforced",
                  "unauthorized access should be denied",
                  "access attempts should be logged",
                  "appropriate error messages should be returned"
                ]
              },
              {
                "name": "Protect user data with isolation and sensitive data masking",
                "given": [
                  "Multiple users have data in the system",
                  "Sensitive data protection is enabled"
                ],
                "when": [
                  "Users access their data"
                ],
                "then": [
                  "user data should be properly isolated",
                  "sensitive data should be protected and masked",
                  "cross-user data access should be prevented",
                  "data privacy should be maintained"
                ]
              },
              {
                "name": "Reject malicious input and prevent XSS attacks",
                "given": [
                  "Input validation and XSS protection are active",
                  "Malicious input is submitted"
                ],
                "when": [
                  "The input is processed by the system"
                ],
                "then": [
                  "malicious input should be rejected",
                  "XSS prevention should be applied",
                  "input sanitization should occur",
                  "security threats should be neutralized"
                ]
              },
              {
                "name": "Prevent abuse with rate limiting and fair usage enforcement",
                "given": [
                  "Rate limiting is configured for API endpoints",
                  "A user exceeds the rate limit"
                ],
                "when": [
                  "Excessive requests are made"
                ],
                "then": [
                  "abuse prevention should be activated",
                  "fair usage should be enforced",
                  "rate limiting should throttle excessive requests",
                  "system resources should be protected"
                ]
              },
              {
                "name": "Audit security events with comprehensive logging",
                "given": [
                  "Security events occur across the system",
                  "Audit logging is configured"
                ],
                "when": [
                  "Security-related activities happen"
                ],
                "then": [
                  "all security events should be logged",
                  "audit trails should be maintained",
                  "security monitoring should detect anomalies",
                  "compliance requirements should be met"
                ]
              }
            ]
          },
          "acceptance_criteria": {
            "access_control": "proper permissions enforced, unauthorized access denied",
            "data_protection": "user data isolated, sensitive data protected",
            "input_security": "malicious input rejected, XSS prevention",
            "rate_limiting": "abuse prevention, fair usage enforcement"
          },
          "color": "#808080"
        },
        {
          "id": "mcp_integration_tests",
          "type": "test",
          "name": "MCP Integration Test Suite",
          "description": "MCP server management, tool discovery, execution coordination, and security validation",
          "test_path": "tests/unit/services/mcp/",
          "test_scenarios": [
            "mcp_server_connection_management",
            "tool_discovery_validation",
            "tool_execution_coordination",
            "security_isolation_enforcement",
            "memory_leak_prevention"
          ],
          "gherkin": {
            "feature": "MCP Integration",
            "description": "As a system, I need to integrate with MCP servers effectively, so that external tools and capabilities can be utilized safely",
            "background": [
              "Given the MCP integration system is running",
              "And MCP server configurations are loaded"
            ],
            "scenarios": [
              {
                "name": "Establish reliable MCP server connection with health monitoring",
                "given": [
                  "An MCP server is configured and available",
                  "Health monitoring is enabled"
                ],
                "when": [
                  "I attempt to connect to the MCP server"
                ],
                "then": [
                  "a reliable connection should be established",
                  "health monitoring should be active",
                  "connection status should be tracked",
                  "automatic reconnection should be configured"
                ]
              },
              {
                "name": "Discover and execute MCP tools successfully",
                "given": [
                  "An MCP server is connected",
                  "The server provides available tools"
                ],
                "when": [
                  "I discover and execute an MCP tool"
                ],
                "then": [
                  "tool discovery should be successful",
                  "tool execution should work correctly",
                  "tool results should be returned properly",
                  "tool integration should be seamless"
                ]
              },
              {
                "name": "Validate commands and isolate execution environment",
                "given": [
                  "An MCP tool command is submitted",
                  "Security validation is enabled"
                ],
                "when": [
                  "The command is processed"
                ],
                "then": [
                  "command validation should occur",
                  "execution environment should be isolated",
                  "security constraints should be enforced",
                  "malicious commands should be rejected"
                ]
              },
              {
                "name": "Manage resources efficiently during tool execution",
                "given": [
                  "Multiple MCP tools are executing",
                  "Resource management is configured"
                ],
                "when": [
                  "Tools consume system resources"
                ],
                "then": [
                  "efficient execution should be maintained",
                  "resource management should prevent overuse",
                  "resource limits should be enforced",
                  "system performance should remain stable"
                ]
              },
              {
                "name": "Handle MCP server disconnection with graceful recovery",
                "given": [
                  "An MCP server is connected and active",
                  "The server connection is lost"
                ],
                "when": [
                  "Connection loss is detected"
                ],
                "then": [
                  "graceful degradation should occur",
                  "reconnection attempts should be made",
                  "in-progress operations should be handled appropriately",
                  "service recovery should restore functionality"
                ]
              }
            ]
          },
          "acceptance_criteria": {
            "server_management": "reliable connections, health monitoring",
            "tool_integration": "successful tool discovery, execution",
            "security": "command validation, environment isolation",
            "performance": "efficient execution, resource management"
          },
          "color": "#808080"
        },
        {
          "id": "voice_mode_tests",
          "type": "test",
          "name": "Voice Mode Processing Test Suite",
          "description": "Audio processing, VAD detection, provider integration, and real-time communication testing",
          "test_path": "tests/unit/services/voice/",
          "test_scenarios": [
            "voice_activity_detection",
            "audio_resampling_quality",
            "provider_integration_reliability",
            "real_time_processing_performance",
            "websocket_audio_streaming"
          ],
          "gherkin": {
            "feature": "Voice Mode Processing",
            "description": "As a user, I want to interact with the system using voice, so that I can have natural conversations with AI assistants",
            "background": [
              "Given voice mode is enabled",
              "And audio processing capabilities are configured"
            ],
            "scenarios": [
              {
                "name": "Process clear audio with noise reduction",
                "given": [
                  "Voice mode is active",
                  "Audio input contains background noise"
                ],
                "when": [
                  "I speak into the microphone"
                ],
                "then": [
                  "clear audio processing should occur",
                  "noise reduction should be applied",
                  "speech should be accurately captured",
                  "audio quality should be optimized"
                ]
              },
              {
                "name": "Achieve low latency responsive voice interaction",
                "given": [
                  "Voice mode is configured for real-time processing",
                  "Audio streaming is active"
                ],
                "when": [
                  "I have a voice conversation"
                ],
                "then": [
                  "low latency processing should be maintained",
                  "responsive interaction should occur",
                  "real-time performance should be optimal",
                  "conversation flow should be natural"
                ]
              },
              {
                "name": "Maintain stable provider connections with fallback support",
                "given": [
                  "Multiple voice processing providers are configured",
                  "Primary provider connection fails"
                ],
                "when": [
                  "Voice processing is requested"
                ],
                "then": [
                  "stable connections should be maintained where possible",
                  "fallback support should activate when needed",
                  "provider reliability should be ensured",
                  "service continuity should be preserved"
                ]
              },
              {
                "name": "Provide intuitive voice interaction with error handling",
                "given": [
                  "Voice mode is active for user interaction",
                  "Various audio conditions occur"
                ],
                "when": [
                  "I interact using voice commands"
                ],
                "then": [
                  "intuitive voice interaction should be provided",
                  "error handling should manage audio issues gracefully",
                  "user experience should remain smooth",
                  "voice feedback should be clear and helpful"
                ]
              },
              {
                "name": "Handle voice activity detection accurately",
                "given": [
                  "Voice Activity Detection is enabled",
                  "Mixed audio input with speech and silence"
                ],
                "when": [
                  "Audio is processed for voice activity"
                ],
                "then": [
                  "voice activity should be detected accurately",
                  "silence periods should be identified correctly",
                  "false positives should be minimized",
                  "voice processing should start and stop appropriately"
                ]
              }
            ]
          },
          "acceptance_criteria": {
            "audio_quality": "clear audio processing, noise reduction",
            "real_time_performance": "low latency, responsive interaction",
            "provider_reliability": "stable connections, fallback support",
            "user_experience": "intuitive voice interaction, error handling"
          },
          "color": "#808080"
        },
        {
          "id": "file_management_tests",
          "type": "test",
          "name": "File Management System Test Suite",
          "description": "File upload, storage provider integration, metadata management, and security validation",
          "test_path": "tests/unit/services/file/",
          "test_scenarios": [
            "file_upload_processing",
            "storage_provider_integration",
            "metadata_extraction_validation",
            "file_security_scanning",
            "user_isolation_enforcement"
          ],
          "gherkin": {
            "feature": "File Management System",
            "description": "As a user, I need to manage files effectively, so that I can upload, store, and retrieve files securely with good performance",
            "background": [
              "Given the file management system is configured",
              "And storage providers are available"
            ],
            "scenarios": [
              {
                "name": "Upload files reliably with progress tracking",
                "given": [
                  "I have files to upload",
                  "The file upload system is active"
                ],
                "when": [
                  "I initiate file uploads"
                ],
                "then": [
                  "uploads should be reliable and successful",
                  "progress tracking should show upload status",
                  "upload completion should be confirmed",
                  "uploaded files should be accessible"
                ]
              },
              {
                "name": "Support multiple storage providers with seamless switching",
                "given": [
                  "Multiple storage providers are configured",
                  "Files are stored across different providers"
                ],
                "when": [
                  "I access files from different storage locations"
                ],
                "then": [
                  "multiple storage providers should be supported",
                  "seamless switching between providers should occur",
                  "storage flexibility should be maintained",
                  "users should not notice provider differences"
                ]
              },
              {
                "name": "Validate files and enforce security with user isolation",
                "given": [
                  "Files are uploaded by different users",
                  "Security validation is enabled"
                ],
                "when": [
                  "File access and validation occurs"
                ],
                "then": [
                  "file validation should be performed",
                  "user isolation should be enforced",
                  "access control should prevent unauthorized access",
                  "security policies should be maintained"
                ]
              },
              {
                "name": "Store files efficiently and retrieve them quickly",
                "given": [
                  "Files of various sizes are stored",
                  "File retrieval is requested"
                ],
                "when": [
                  "Files are stored and retrieved"
                ],
                "then": [
                  "efficient storage should be maintained",
                  "fast retrieval should occur",
                  "performance should be optimized",
                  "storage space should be used effectively"
                ]
              },
              {
                "name": "Handle file conflicts and manage versions",
                "given": [
                  "Files with similar names exist",
                  "File versioning is enabled"
                ],
                "when": [
                  "File conflicts occur during upload"
                ],
                "then": [
                  "file conflicts should be handled appropriately",
                  "version management should maintain file history",
                  "users should be able to access different versions",
                  "file integrity should be preserved"
                ]
              }
            ]
          },
          "acceptance_criteria": {
            "upload_reliability": "successful uploads, progress tracking",
            "storage_flexibility": "multiple providers supported, seamless switching",
            "security": "file validation, user isolation, access control",
            "performance": "efficient storage, fast retrieval"
          },
          "color": "#808080"
        },
        {
          "id": "frontend_ui_tests",
          "type": "test",
          "name": "Frontend UI Component Test Suite",
          "description": "React component behavior, state management, user interactions, and responsive design testing",
          "test_path": "src/frontend/tests/",
          "test_scenarios": [
            "component_rendering_validation",
            "user_interaction_handling",
            "state_management_consistency",
            "responsive_design_behavior",
            "accessibility_compliance"
          ],
          "gherkin": {
            "feature": "Frontend UI Components",
            "description": "As a user, I need responsive and accessible UI components, so that I can interact with the application effectively across different devices",
            "background": [
              "Given the frontend application is loaded",
              "And UI components are initialized"
            ],
            "scenarios": [
              {
                "name": "Render components consistently with proper lifecycle",
                "given": [
                  "UI components are defined with proper lifecycle methods",
                  "Components are mounted in the application"
                ],
                "when": [
                  "Components are rendered and updated"
                ],
                "then": [
                  "consistent rendering should occur across updates",
                  "proper lifecycle management should be maintained",
                  "component reliability should be ensured",
                  "rendering should be predictable and stable"
                ]
              },
              {
                "name": "Provide responsive UI with smooth animations",
                "given": [
                  "UI interactions trigger animations",
                  "Responsive design is implemented"
                ],
                "when": [
                  "Users interact with UI elements"
                ],
                "then": [
                  "responsive UI behavior should be maintained",
                  "smooth animations should enhance user experience",
                  "interaction quality should be high",
                  "UI should adapt to different screen sizes"
                ]
              },
              {
                "name": "Maintain predictable state changes with data integrity",
                "given": [
                  "UI components have state management",
                  "State changes are triggered by user actions"
                ],
                "when": [
                  "State updates occur in the application"
                ],
                "then": [
                  "predictable state changes should happen",
                  "data integrity should be maintained",
                  "state consistency should be preserved",
                  "state synchronization should work correctly"
                ]
              },
              {
                "name": "Ensure WCAG compliance with keyboard navigation",
                "given": [
                  "Accessibility features are implemented",
                  "Keyboard navigation is supported"
                ],
                "when": [
                  "Users navigate using keyboard only"
                ],
                "then": [
                  "WCAG compliance should be maintained",
                  "keyboard navigation should work properly",
                  "accessibility features should be functional",
                  "assistive technologies should be supported"
                ]
              },
              {
                "name": "Handle component errors gracefully",
                "given": [
                  "Components may encounter errors",
                  "Error boundaries are implemented"
                ],
                "when": [
                  "Component errors occur"
                ],
                "then": [
                  "errors should be handled gracefully",
                  "error boundaries should catch and display appropriate messages",
                  "application stability should be maintained",
                  "user experience should not be severely impacted"
                ]
              }
            ]
          },
          "acceptance_criteria": {
            "component_reliability": "consistent rendering, proper lifecycle",
            "interaction_quality": "responsive UI, smooth animations",
            "state_consistency": "predictable state changes, data integrity",
            "accessibility": "WCAG compliance, keyboard navigation"
          },
          "color": "#808080"
        },
        {
          "id": "e2e_workflow_tests",
          "type": "test",
          "name": "End-to-End Workflow Test Suite",
          "description": "Complete user journey testing from login to flow execution with real-world scenarios",
          "test_path": "tests/e2e/",
          "test_scenarios": [
            "complete_flow_building_workflow",
            "api_code_generation_testing",
            "multi_user_collaboration_scenarios",
            "performance_under_load_testing",
            "cross_browser_compatibility"
          ],
          "gherkin": {
            "feature": "End-to-End Workflow",
            "description": "As a user, I want to complete entire workflows from start to finish, so that I can accomplish complex tasks using the integrated system",
            "background": [
              "Given the complete application stack is running",
              "And all system components are properly integrated"
            ],
            "scenarios": [
              {
                "name": "Complete full flow building workflow successfully",
                "given": [
                  "I am a new user accessing the application",
                  "All system components are functioning"
                ],
                "when": [
                  "I go through the complete flow building process"
                ],
                "then": [
                  "users should be able to complete tasks successfully",
                  "the entire workflow should function end-to-end",
                  "all integration points should work correctly",
                  "the user should achieve their intended outcome"
                ]
              },
              {
                "name": "Maintain acceptable performance with no timeouts",
                "given": [
                  "Complex workflows are executed",
                  "Performance monitoring is active"
                ],
                "when": [
                  "Multiple operations are performed in sequence"
                ],
                "then": [
                  "acceptable response times should be maintained",
                  "no timeouts should occur during normal operation",
                  "performance should meet user expectations",
                  "system responsiveness should be consistent"
                ]
              },
              {
                "name": "Demonstrate consistent behavior with error recovery",
                "given": [
                  "Workflows encounter various conditions",
                  "Error recovery mechanisms are in place"
                ],
                "when": [
                  "Different scenarios and edge cases are tested"
                ],
                "then": [
                  "consistent behavior should be maintained",
                  "error recovery should work when issues occur",
                  "reliability should be demonstrated across scenarios",
                  "system should handle unexpected conditions gracefully"
                ]
              },
              {
                "name": "Ensure cross-browser and device compatibility",
                "given": [
                  "The application is accessed from different environments",
                  "Various browsers and devices are used"
                ],
                "when": [
                  "Workflows are executed across different platforms"
                ],
                "then": [
                  "functionality should work across different browsers",
                  "device compatibility should be maintained",
                  "user experience should be consistent across platforms",
                  "no platform-specific issues should prevent workflow completion"
                ]
              },
              {
                "name": "Handle concurrent users with shared resources",
                "given": [
                  "Multiple users are using the system simultaneously",
                  "Shared resources are accessed"
                ],
                "when": [
                  "Concurrent workflows are executed"
                ],
                "then": [
                  "concurrent user access should be handled properly",
                  "shared resources should remain consistent",
                  "user isolation should be maintained",
                  "system performance should scale with multiple users"
                ]
              }
            ]
          },
          "acceptance_criteria": {
            "workflow_completion": "users can complete tasks successfully",
            "performance": "acceptable response times, no timeouts",
            "reliability": "consistent behavior, error recovery",
            "compatibility": "works across browsers, devices"
          },
          "color": "#808080"
        },
        {
          "id": "performance_benchmark_tests",
          "type": "test",
          "name": "Performance and Load Testing Suite",
          "description": "System performance under load, resource utilization, and scalability validation",
          "test_path": "tests/performance/",
          "test_scenarios": [
            "concurrent_user_load_testing",
            "resource_utilization_monitoring",
            "database_performance_validation",
            "memory_leak_detection",
            "scalability_threshold_identification"
          ],
          "gherkin": {
            "feature": "Performance and Load Testing",
            "description": "As a system, I need to maintain performance under varying loads, so that user experience remains consistent regardless of system demand",
            "background": [
              "Given performance monitoring tools are configured",
              "And load testing infrastructure is set up"
            ],
            "scenarios": [
              {
                "name": "Maintain system stability under expected load",
                "given": [
                  "The system is configured for expected load levels",
                  "Load testing tools are prepared"
                ],
                "when": [
                  "Expected load is applied to the system"
                ],
                "then": [
                  "the system should remain stable under expected load",
                  "response times should stay within acceptable ranges",
                  "no critical errors should occur",
                  "load handling should meet performance requirements"
                ]
              },
              {
                "name": "Optimize CPU and memory utilization efficiently",
                "given": [
                  "Resource monitoring is active",
                  "System is under various load conditions"
                ],
                "when": [
                  "Resource utilization is measured during operations"
                ],
                "then": [
                  "optimal CPU utilization should be maintained",
                  "memory usage should be efficient",
                  "resource efficiency should be demonstrated",
                  "system resources should be used effectively without waste"
                ]
              },
              {
                "name": "Scale linearly without performance bottlenecks",
                "given": [
                  "Load is gradually increased",
                  "System scaling mechanisms are active"
                ],
                "when": [
                  "Load is scaled from minimum to maximum capacity"
                ],
                "then": [
                  "linear scaling should be achieved",
                  "no performance bottlenecks should be identified",
                  "scaling should be proportional to load increases",
                  "system architecture should support horizontal scaling"
                ]
              },
              {
                "name": "Ensure no memory leaks with stable performance",
                "given": [
                  "Long-running performance tests are executed",
                  "Memory monitoring is continuous"
                ],
                "when": [
                  "The system runs for extended periods under load"
                ],
                "then": [
                  "no memory leaks should be detected",
                  "performance should remain stable over time",
                  "memory usage should not grow unbounded",
                  "system reliability should be maintained during extended operation"
                ]
              },
              {
                "name": "Handle peak load gracefully with degradation",
                "given": [
                  "System capacity limits are defined",
                  "Peak load scenarios are configured"
                ],
                "when": [
                  "Load exceeds normal capacity"
                ],
                "then": [
                  "peak load should be handled gracefully",
                  "graceful degradation should occur when necessary",
                  "system should not crash under extreme load",
                  "recovery should happen when load returns to normal"
                ]
              }
            ]
          },
          "acceptance_criteria": {
            "load_handling": "system stable under expected load",
            "resource_efficiency": "optimal CPU, memory utilization",
            "scalability": "linear scaling, no bottlenecks",
            "reliability": "no memory leaks, stable performance"
          },
          "color": "#808080"
        },
        {
          "id": "api_integration_tests",
          "type": "test",
          "name": "API Integration Test Suite",
          "description": "REST API functionality, request/response validation, error handling, and versioning support",
          "test_path": "tests/integration/api/",
          "test_scenarios": [
            "api_endpoint_functionality",
            "request_response_validation",
            "error_status_code_accuracy",
            "api_versioning_compatibility",
            "rate_limiting_enforcement"
          ],
          "gherkin": {
            "feature": "API Integration",
            "description": "As a client, I need reliable API endpoints, so that I can integrate with the system programmatically with consistent behavior",
            "background": [
              "Given the API server is running",
              "And API endpoints are properly configured"
            ],
            "scenarios": [
              {
                "name": "Receive consistent API responses with proper status codes",
                "given": [
                  "API endpoints are available",
                  "Valid requests are prepared"
                ],
                "when": [
                  "API requests are made to various endpoints"
                ],
                "then": [
                  "consistent responses should be returned",
                  "proper HTTP status codes should be used",
                  "API reliability should be demonstrated",
                  "response format should be consistent across endpoints"
                ]
              },
              {
                "name": "Maintain data integrity with accurate validation",
                "given": [
                  "Data is exchanged through API calls",
                  "Validation rules are configured"
                ],
                "when": [
                  "Data is sent and received via API"
                ],
                "then": [
                  "data integrity should be maintained throughout exchanges",
                  "accurate data validation should occur",
                  "data should be preserved correctly",
                  "validation errors should be caught and reported"
                ]
              },
              {
                "name": "Handle errors with meaningful responses and proper codes",
                "given": [
                  "Various error conditions can occur",
                  "Error handling is implemented"
                ],
                "when": [
                  "API errors are encountered"
                ],
                "then": [
                  "meaningful error responses should be provided",
                  "proper HTTP status codes should indicate error types",
                  "error handling should be comprehensive",
                  "error messages should help developers understand issues"
                ]
              },
              {
                "name": "Support API versioning with backward compatibility",
                "given": [
                  "Multiple API versions are supported",
                  "Legacy clients exist"
                ],
                "when": [
                  "Different API versions are accessed"
                ],
                "then": [
                  "API versioning should work correctly",
                  "backward compatibility should be maintained",
                  "migration support should be available",
                  "version differences should be handled appropriately"
                ]
              },
              {
                "name": "Enforce rate limiting and authentication",
                "given": [
                  "Rate limiting and authentication are configured",
                  "Various client access patterns exist"
                ],
                "when": [
                  "Clients make API requests with different credentials and frequencies"
                ],
                "then": [
                  "rate limiting should be enforced appropriately",
                  "authentication should be validated correctly",
                  "unauthorized access should be prevented",
                  "API usage should be monitored and controlled"
                ]
              }
            ]
          },
          "acceptance_criteria": {
            "api_reliability": "consistent responses, proper status codes",
            "data_integrity": "accurate data exchange, validation",
            "error_handling": "meaningful error responses, proper codes",
            "versioning": "backward compatibility, migration support"
          },
          "color": "#808080"
        },
        {
          "id": "database_integration_tests",
          "type": "test",
          "name": "Database Integration Test Suite",
          "description": "Database operations, transaction management, data integrity, and migration testing",
          "test_path": "tests/integration/database/",
          "test_scenarios": [
            "crud_operations_validation",
            "transaction_integrity_testing",
            "data_migration_verification",
            "constraint_enforcement_validation",
            "performance_optimization_testing"
          ],
          "gherkin": {
            "feature": "Database Integration",
            "description": "As a system, I need reliable database operations, so that data persistence and retrieval work correctly with full ACID compliance",
            "background": [
              "Given the database is properly configured",
              "And database connections are established"
            ],
            "scenarios": [
              {
                "name": "Maintain ACID compliance with referential integrity",
                "given": [
                  "Database transactions involve multiple related tables",
                  "Referential constraints are defined"
                ],
                "when": [
                  "Complex database operations are performed"
                ],
                "then": [
                  "ACID compliance should be maintained",
                  "referential integrity should be preserved",
                  "data consistency should be guaranteed",
                  "transaction atomicity should be ensured"
                ]
              },
              {
                "name": "Execute efficient queries with optimal indexing",
                "given": [
                  "Database queries are executed",
                  "Indexing strategies are implemented"
                ],
                "when": [
                  "Various types of queries are performed"
                ],
                "then": [
                  "queries should be executed efficiently",
                  "optimal indexing should improve performance",
                  "query execution plans should be optimized",
                  "database performance should meet requirements"
                ]
              },
              {
                "name": "Ensure transaction consistency with error recovery",
                "given": [
                  "Database transactions may encounter errors",
                  "Error recovery mechanisms are in place"
                ],
                "when": [
                  "Transaction errors occur"
                ],
                "then": [
                  "transaction consistency should be maintained",
                  "error recovery should restore database to consistent state",
                  "partial transactions should be rolled back appropriately",
                  "database reliability should be demonstrated"
                ]
              },
              {
                "name": "Perform seamless database migrations with data preservation",
                "given": [
                  "Database schema changes are required",
                  "Existing data must be preserved"
                ],
                "when": [
                  "Database migrations are executed"
                ],
                "then": [
                  "migrations should be seamless and safe",
                  "data should be preserved during schema changes",
                  "migration safety should be ensured",
                  "seamless upgrades should not cause data loss"
                ]
              },
              {
                "name": "Handle concurrent database access safely",
                "given": [
                  "Multiple clients access the database simultaneously",
                  "Concurrency control is implemented"
                ],
                "when": [
                  "Concurrent database operations occur"
                ],
                "then": [
                  "concurrent access should be handled safely",
                  "data corruption should be prevented",
                  "locking mechanisms should work correctly",
                  "database consistency should be maintained under concurrent load"
                ]
              }
            ]
          },
          "acceptance_criteria": {
            "data_integrity": "ACID compliance, referential integrity",
            "performance": "efficient queries, optimal indexing",
            "reliability": "transaction consistency, error recovery",
            "migration_safety": "seamless upgrades, data preservation"
          },
          "color": "#808080"
        },
        {
          "id": "deployment_validation_tests",
          "type": "test",
          "name": "Deployment and Infrastructure Test Suite",
          "description": "Container deployment, service discovery, health checks, and production readiness validation",
          "test_path": "tests/deployment/",
          "test_scenarios": [
            "container_deployment_validation",
            "service_health_check_verification",
            "load_balancer_configuration_testing",
            "database_migration_execution",
            "production_environment_validation"
          ],
          "gherkin": {
            "feature": "Deployment and Infrastructure",
            "description": "As a DevOps engineer, I need reliable deployment processes, so that applications can be deployed safely to production with zero downtime",
            "background": [
              "Given deployment infrastructure is configured",
              "And monitoring and health check systems are active"
            ],
            "scenarios": [
              {
                "name": "Deploy consistently with zero downtime",
                "given": [
                  "A new application version is ready for deployment",
                  "Zero-downtime deployment strategy is configured"
                ],
                "when": [
                  "Deployment is initiated"
                ],
                "then": [
                  "deployment should be consistent and reliable",
                  "zero downtime should be achieved during deployment",
                  "users should not experience service interruption",
                  "deployment process should complete successfully"
                ]
              },
              {
                "name": "Monitor health accurately with effective alerting",
                "given": [
                  "Health monitoring systems are configured",
                  "Alerting mechanisms are in place"
                ],
                "when": [
                  "Application health status changes"
                ],
                "then": [
                  "health checks should accurately reflect system status",
                  "alerting should notify appropriate teams when issues occur",
                  "monitoring should provide comprehensive visibility",
                  "health status should be reported in real-time"
                ]
              },
              {
                "name": "Scale horizontally with effective load distribution",
                "given": [
                  "Horizontal scaling is configured",
                  "Load balancing is implemented"
                ],
                "when": [
                  "System load increases and scaling is triggered"
                ],
                "then": [
                  "horizontal scaling should add capacity automatically",
                  "load distribution should balance traffic effectively",
                  "scaling should handle increased demand smoothly",
                  "system performance should be maintained during scaling"
                ]
              },
              {
                "name": "Ensure production readiness with comprehensive monitoring",
                "given": [
                  "Production environment is prepared",
                  "Monitoring, logging, and security are configured"
                ],
                "when": [
                  "Application is running in production"
                ],
                "then": [
                  "production readiness should be demonstrated",
                  "comprehensive monitoring should be active",
                  "logging should capture necessary information",
                  "security measures should be properly implemented"
                ]
              },
              {
                "name": "Handle deployment failures with automatic rollback",
                "given": [
                  "Deployment may encounter failures",
                  "Automatic rollback mechanisms are configured"
                ],
                "when": [
                  "Deployment failure is detected"
                ],
                "then": [
                  "deployment failures should be detected quickly",
                  "automatic rollback should restore previous version",
                  "system should return to stable state",
                  "failure recovery should minimize impact"
                ]
              }
            ]
          },
          "acceptance_criteria": {
            "deployment_reliability": "consistent deployments, zero downtime",
            "health_monitoring": "accurate health checks, alerting",
            "scalability": "horizontal scaling, load distribution",
            "production_readiness": "monitoring, logging, security"
          },
          "color": "#808080"
        },
        {
          "id": "regression_test_suite",
          "type": "test",
          "name": "Regression Test Suite",
          "description": "Automated regression testing to prevent feature breakage and ensure backward compatibility",
          "test_path": "tests/regression/",
          "test_scenarios": [
            "feature_regression_detection",
            "backward_compatibility_validation",
            "performance_regression_monitoring",
            "api_contract_compliance_testing",
            "user_workflow_preservation"
          ],
          "gherkin": {
            "feature": "Regression Testing",
            "description": "As a quality engineer, I need comprehensive regression testing, so that new changes don't break existing functionality and user experience is preserved",
            "background": [
              "Given a comprehensive regression test suite is available",
              "And baseline functionality and performance metrics are established"
            ],
            "scenarios": [
              {
                "name": "Detect feature regressions with stable behavior validation",
                "given": [
                  "New code changes are deployed",
                  "Existing features have established behavior patterns"
                ],
                "when": [
                  "Regression tests are executed against the updated system"
                ],
                "then": [
                  "no feature regressions should be detected",
                  "stable behavior should be maintained for all existing features",
                  "functionality should work as expected",
                  "system stability should be preserved"
                ]
              },
              {
                "name": "Ensure existing integrations continue working",
                "given": [
                  "External integrations and APIs are established",
                  "Integration points have defined contracts"
                ],
                "when": [
                  "System changes are made that could affect integrations"
                ],
                "then": [
                  "existing integrations should continue working without issues",
                  "API contracts should remain compatible",
                  "integration functionality should be preserved",
                  "external systems should continue to work seamlessly"
                ]
              },
              {
                "name": "Validate no performance degradation occurs",
                "given": [
                  "Performance baselines are established",
                  "Performance monitoring is active"
                ],
                "when": [
                  "System performance is measured after changes"
                ],
                "then": [
                  "no performance degradation should be detected",
                  "response times should remain within acceptable ranges",
                  "system throughput should be maintained or improved",
                  "performance metrics should meet established baselines"
                ]
              },
              {
                "name": "Preserve consistent UI/UX and workflow experience",
                "given": [
                  "User interface and workflows are established",
                  "User experience patterns are documented"
                ],
                "when": [
                  "UI/UX regression testing is performed"
                ],
                "then": [
                  "consistent UI/UX should be maintained",
                  "user workflows should be preserved",
                  "interface behavior should remain predictable",
                  "user experience quality should not degrade"
                ]
              },
              {
                "name": "Maintain backward compatibility across system versions",
                "given": [
                  "Multiple system versions may coexist",
                  "Backward compatibility requirements are defined"
                ],
                "when": [
                  "Backward compatibility testing is executed"
                ],
                "then": [
                  "backward compatibility should be maintained",
                  "older clients should continue to work",
                  "data formats should remain compatible",
                  "migration paths should be preserved"
                ]
              }
            ]
          },
          "acceptance_criteria": {
            "stability": "no feature regressions, stable behavior",
            "compatibility": "existing integrations continue working",
            "performance": "no performance degradation",
            "user_experience": "consistent UI/UX, workflow preservation"
          },
          "color": "#808080"
        },
        {
          "id": "rbac_permission_tests",
          "type": "test",
          "name": "RBAC Permission Test Suite",
          "description": "Comprehensive testing of role-based permission evaluation and access control",
          "color": "#00FF00",
          "rbac_feature": "Permission system testing",
          "gherkin": {
            "feature": "RBAC Permission System",
            "description": "As a system administrator, I want to ensure that the RBAC permission system correctly enforces access controls, so that users can only perform authorized actions",
            "background": [
              "Given a clean RBAC system with default roles",
              "And the following users exist: admin_user, editor_user, viewer_user, service_account",
              "And the following roles exist: Owner, Admin, Editor, Viewer, Service"
            ],
            "scenarios": [
              {
                "name": "Role-based flow access control",
                "given": [
                  "I have a user with Editor role",
                  "And I have a flow owned by another user",
                  "And the flow has default privacy settings"
                ],
                "when": [
                  "I attempt to edit the flow",
                  "And the system evaluates my permissions"
                ],
                "then": [
                  "I should be denied access to edit",
                  "The system should log an access denied event",
                  "I should receive a permission denied response"
                ]
              },
              {
                "name": "Workspace-level permission inheritance",
                "given": [
                  "I am a member of workspace 'TeamA'",
                  "And I have Admin role in the workspace",
                  "And there is a flow in the workspace"
                ],
                "when": [
                  "I attempt to delete the flow",
                  "And the system evaluates workspace-level permissions"
                ],
                "then": [
                  "I should be granted access to delete",
                  "The system should log the successful permission evaluation",
                  "The delete operation should proceed"
                ]
              },
              {
                "name": "Multi-scope permission resolution",
                "given": [
                  "I have Viewer role globally",
                  "And I have Editor role in workspace 'ProjectX'",
                  "And I have Owner role for flow 'MyFlow' in ProjectX"
                ],
                "when": [
                  "I attempt to modify flow 'MyFlow'",
                  "And the system resolves multi-level permissions"
                ],
                "then": [
                  "The system should grant access based on Owner role",
                  "The most specific permission scope should take precedence",
                  "The action should be allowed and audited"
                ]
              },
              {
                "name": "Service account permission scoping",
                "given": [
                  "I have a service account with API access",
                  "And the service account has limited permissions to 'deploy_environment'",
                  "And the service account is scoped to workspace 'Production'"
                ],
                "when": [
                  "The service account attempts to deploy to 'Production' workspace",
                  "And then attempts to deploy to 'Development' workspace"
                ],
                "then": [
                  "The Production deployment should be allowed",
                  "The Development deployment should be denied",
                  "Both actions should be audited with service account context"
                ]
              }
            ]
          }
        },
        {
          "id": "role_management_tests",
          "type": "test",
          "name": "Role Management Test Suite",
          "description": "Testing role creation, modification, assignment, and lifecycle management",
          "color": "#00FF00",
          "rbac_feature": "Role management testing",
          "gherkin": {
            "feature": "Role Management",
            "description": "As an administrator, I want to manage custom roles and their permissions, so that I can implement organization-specific access controls",
            "background": [
              "Given I am logged in as a system administrator",
              "And I have access to the role management interface"
            ],
            "scenarios": [
              {
                "name": "Create custom role with specific permissions",
                "given": [
                  "I am on the role management page",
                  "And I click 'Create New Role'"
                ],
                "when": [
                  "I enter role name 'Flow Reviewer'",
                  "And I add description 'Can review and comment on flows'",
                  "And I assign permissions: can_read_flow, can_comment_flow",
                  "And I set scope to 'WORKSPACE'",
                  "And I save the role"
                ],
                "then": [
                  "The role should be created successfully",
                  "The role should appear in the roles list",
                  "The role should have exactly 2 permissions assigned",
                  "An audit log entry should be created"
                ]
              },
              {
                "name": "Bulk role assignment to user group",
                "given": [
                  "I have a user group 'QA Team' with 5 members",
                  "And I have a custom role 'Test Environment Manager'"
                ],
                "when": [
                  "I select the 'QA Team' group",
                  "And I assign 'Test Environment Manager' role to the group",
                  "And I set the scope to workspace 'Testing'"
                ],
                "then": [
                  "All 5 group members should receive the role",
                  "The role should be scoped to 'Testing' workspace only",
                  "Each member should be able to access test environment features",
                  "5 audit log entries should be created for the assignments"
                ]
              },
              {
                "name": "Role modification and permission propagation",
                "given": [
                  "I have an existing role 'Content Editor'",
                  "And the role is assigned to 3 users",
                  "And the role currently has permissions: can_edit_flow, can_save_flow"
                ],
                "when": [
                  "I modify the role to add 'can_export_flow' permission",
                  "And I remove 'can_save_flow' permission",
                  "And I save the changes"
                ],
                "then": [
                  "All 3 users should immediately gain export capability",
                  "All 3 users should lose save capability",
                  "Permission changes should take effect within 5 seconds",
                  "Audit logs should record both permission additions and removals"
                ]
              }
            ]
          }
        },
        {
          "id": "group_access_tests",
          "type": "test",
          "name": "Group Access Control Test Suite",
          "description": "Testing group-based access control, membership management, and role inheritance",
          "color": "#00FF00",
          "rbac_feature": "Group access control testing",
          "gherkin": {
            "feature": "Group Access Control",
            "description": "As a team lead, I want to manage access through user groups, so that I can efficiently control team permissions",
            "background": [
              "Given I have admin permissions for group management",
              "And I have a workspace 'Development Team'"
            ],
            "scenarios": [
              {
                "name": "Group creation and member addition",
                "given": [
                  "I am on the group management page"
                ],
                "when": [
                  "I create a new group 'Backend Developers'",
                  "And I add users: john@example.com, jane@example.com, bob@example.com",
                  "And I assign the group 'Developer' role in 'Development Team' workspace"
                ],
                "then": [
                  "The group should be created with 3 members",
                  "All members should inherit 'Developer' role permissions",
                  "Members should be able to access development workspace resources",
                  "Group creation should be audited"
                ]
              },
              {
                "name": "SSO group synchronization",
                "given": [
                  "I have configured SSO integration with role mapping",
                  "And SSO groups exist: 'Engineering', 'QA', 'Management'",
                  "And role mappings are configured: Engineering->Developer, QA->Tester, Management->Admin"
                ],
                "when": [
                  "A new user logs in via SSO",
                  "And they are a member of 'Engineering' and 'Management' groups in SSO"
                ],
                "then": [
                  "The user should be added to local 'Engineering' and 'Management' groups",
                  "The user should receive both 'Developer' and 'Admin' roles",
                  "Role conflicts should be resolved with highest permission precedence",
                  "SSO sync should be logged in audit trail"
                ]
              },
              {
                "name": "Group membership changes and permission updates",
                "given": [
                  "I have a user 'alice@example.com' in group 'Junior Developers'",
                  "And 'Junior Developers' has limited permissions: can_read_flow, can_comment_flow",
                  "And there's a group 'Senior Developers' with permissions: can_edit_flow, can_deploy_flow"
                ],
                "when": [
                  "I remove alice from 'Junior Developers' group",
                  "And I add alice to 'Senior Developers' group"
                ],
                "then": [
                  "Alice should lose junior developer permissions immediately",
                  "Alice should gain senior developer permissions immediately",
                  "Alice should be able to edit and deploy flows",
                  "Both group membership changes should be audited"
                ]
              }
            ]
          }
        },
        {
          "id": "audit_compliance_tests",
          "type": "test",
          "name": "Audit and Compliance Test Suite",
          "description": "Testing audit logging, compliance reporting, and security monitoring for RBAC system",
          "color": "#00FF00",
          "rbac_feature": "Audit and compliance testing",
          "gherkin": {
            "feature": "Audit and Compliance",
            "description": "As a compliance officer, I want comprehensive audit trails of all RBAC activities, so that I can demonstrate regulatory compliance",
            "background": [
              "Given audit logging is enabled for all RBAC operations",
              "And I have access to audit log viewing capabilities"
            ],
            "scenarios": [
              {
                "name": "Complete audit trail for role assignment lifecycle",
                "given": [
                  "I have a user 'test@example.com'",
                  "And I have a role 'Project Manager'"
                ],
                "when": [
                  "I assign 'Project Manager' role to the user",
                  "The user performs several permitted actions",
                  "The user attempts an unauthorized action",
                  "I later revoke the role from the user"
                ],
                "then": [
                  "Audit logs should contain role assignment event with timestamp and assigner",
                  "Audit logs should contain all authorized actions performed by the user",
                  "Audit logs should contain the access denied event with context",
                  "Audit logs should contain role revocation event",
                  "All events should include IP address, user agent, and session context"
                ]
              },
              {
                "name": "Audit log export for compliance reporting",
                "given": [
                  "I have 30 days of audit logs in the system",
                  "And I need to generate a compliance report for external audit"
                ],
                "when": [
                  "I request an audit log export for the date range",
                  "And I specify CSV format with sensitive data filtering"
                ],
                "then": [
                  "The export should include all RBAC events in the date range",
                  "Sensitive data (passwords, tokens) should be redacted",
                  "The export should be digitally signed for integrity",
                  "The export request should itself be audited",
                  "The file should be encrypted during transmission"
                ]
              },
              {
                "name": "Security event alerting and monitoring",
                "given": [
                  "I have configured security alert thresholds",
                  "And suspicious activity patterns are defined"
                ],
                "when": [
                  "A user attempts 5 unauthorized actions in 1 minute",
                  "And someone tries to assign admin roles without proper permissions",
                  "And a service account is used from an unusual IP address"
                ],
                "then": [
                  "Security alerts should be triggered for unusual access patterns",
                  "Administrative notifications should be sent for privilege escalation attempts",
                  "Anomalous service account usage should be flagged",
                  "All security events should be recorded with high priority in audit logs",
                  "Automated response procedures should be initiated where configured"
                ]
              }
            ]
          }
        }
      ]
    },
    "edges": [
      {
        "id": "edge_1",
        "type": "schema_relationship",
        "source": "user_entity",
        "target": "api_key_entity",
        "relationship": "one_to_many",
        "description": "User owns multiple API keys",
        "label": "owns",
        "details": "A user can have multiple API keys for different integrations and purposes",
        "color": "#808080"
      },
      {
        "id": "edge_2",
        "type": "schema_relationship",
        "source": "user_entity",
        "target": "flow_entity",
        "relationship": "one_to_many",
        "description": "User creates and owns flows",
        "label": "creates",
        "details": "Users create and manage their own AI workflow flows",
        "color": "#808080"
      },
      {
        "id": "edge_3",
        "type": "schema_relationship",
        "source": "user_entity",
        "target": "folder_entity",
        "relationship": "one_to_many",
        "description": "User organizes content in folders",
        "label": "organizes",
        "details": "Users organize their flows and content in hierarchical folder structures",
        "color": "#808080"
      },
      {
        "id": "edge_4",
        "type": "schema_relationship",
        "source": "user_entity",
        "target": "variable_entity",
        "relationship": "one_to_many",
        "description": "User manages encrypted variables",
        "label": "manages",
        "details": "Users store sensitive configuration data in encrypted variables",
        "color": "#808080"
      },
      {
        "id": "edge_5",
        "type": "schema_relationship",
        "source": "user_entity",
        "target": "file_entity",
        "relationship": "one_to_many",
        "description": "User uploads and manages files",
        "label": "uploads",
        "details": "Users upload and manage files through the File Management V2 system",
        "color": "#808080"
      },
      {
        "id": "edge_6",
        "type": "schema_relationship",
        "source": "folder_entity",
        "target": "flow_entity",
        "relationship": "one_to_many",
        "description": "Folder contains multiple flows",
        "label": "contains",
        "details": "Folders can contain multiple flows for organizational purposes",
        "color": "#808080"
      },
      {
        "id": "edge_7",
        "type": "schema_relationship",
        "source": "flow_entity",
        "target": "transaction_entity",
        "relationship": "one_to_many",
        "description": "Flow generates execution transactions",
        "label": "generates",
        "details": "Each flow execution creates transaction records for monitoring and debugging",
        "color": "#808080"
      },
      {
        "id": "edge_8",
        "type": "schema_relationship",
        "source": "flow_entity",
        "target": "vertex_build_entity",
        "relationship": "one_to_many",
        "description": "Flow has vertex build artifacts",
        "label": "builds",
        "details": "Flows contain vertex components that get built into execution artifacts",
        "color": "#808080"
      },
      {
        "id": "edge_9",
        "type": "schema_relationship",
        "source": "flow_entity",
        "target": "message_entity",
        "relationship": "one_to_many",
        "description": "Flow processes chat messages",
        "label": "processes",
        "details": "Flows can process and respond to chat messages in playground mode",
        "color": "#808080"
      },
      {
        "id": "edge_10",
        "type": "schema_relationship",
        "source": "vertex_entity",
        "target": "edge_entity",
        "relationship": "many_to_many",
        "description": "Vertices connected by edges",
        "label": "connects",
        "details": "Graph vertices are connected through directional edges defining data flow",
        "color": "#808080"
      },
      {
        "id": "edge_11",
        "type": "interface_navigation",
        "source": "login_page",
        "target": "flow_dashboard",
        "relationship": "navigates_to",
        "description": "Login success navigates to dashboard",
        "label": "redirects",
        "details": "Successful authentication redirects users to the main dashboard",
        "color": "#808080"
      },
      {
        "id": "edge_12",
        "type": "interface_navigation",
        "source": "flow_dashboard",
        "target": "flow_editor",
        "relationship": "navigates_to",
        "description": "Dashboard opens flow editor",
        "label": "opens",
        "details": "Users can navigate from dashboard to edit specific flows",
        "color": "#808080"
      },
      {
        "id": "edge_13",
        "type": "interface_navigation",
        "source": "flow_dashboard",
        "target": "playground_interface",
        "relationship": "navigates_to",
        "description": "Dashboard opens playground",
        "label": "launches",
        "details": "Users can launch playground mode from the dashboard",
        "color": "#808080"
      },
      {
        "id": "edge_14",
        "type": "interface_navigation",
        "source": "flow_dashboard",
        "target": "settings_page",
        "relationship": "navigates_to",
        "description": "Dashboard navigates to settings",
        "label": "settings",
        "details": "Users can access settings from the main dashboard",
        "color": "#808080"
      },
      {
        "id": "edge_15",
        "type": "interface_navigation",
        "source": "flow_editor",
        "target": "playground_interface",
        "relationship": "navigates_to",
        "description": "Editor launches playground",
        "label": "tests",
        "details": "Users can test flows directly from the editor in playground mode",
        "color": "#808080"
      },
      {
        "id": "edge_16",
        "type": "interface_navigation",
        "source": "settings_page",
        "target": "file_management_page",
        "relationship": "navigates_to",
        "description": "Settings navigates to file management",
        "label": "manages",
        "details": "Users can navigate to file management from settings",
        "color": "#808080"
      },
      {
        "id": "edge_17",
        "type": "interface_navigation",
        "source": "flow_dashboard",
        "target": "store_page",
        "relationship": "navigates_to",
        "description": "Dashboard navigates to store",
        "label": "browses",
        "details": "Users can browse the component store from the dashboard",
        "color": "#808080"
      },
      {
        "id": "edge_18",
        "type": "interface_navigation",
        "source": "flow_editor",
        "target": "store_page",
        "relationship": "navigates_to",
        "description": "Editor navigates to store",
        "label": "imports",
        "details": "Users can import components from store while editing flows",
        "color": "#808080"
      },
      {
        "id": "edge_19",
        "type": "data_operation",
        "source": "flow_dashboard",
        "target": "flow_entity",
        "relationship": "reads",
        "description": "Dashboard reads flow data",
        "label": "displays",
        "details": "Flow dashboard performs read operations on flow entities to display user flows",
        "color": "#808080"
      },
      {
        "id": "edge_20",
        "type": "data_operation",
        "source": "flow_editor",
        "target": "flow_entity",
        "relationship": "writes",
        "description": "Editor writes flow data",
        "label": "saves",
        "details": "Flow editor performs write operations to save flow modifications to database",
        "color": "#808080"
      },
      {
        "id": "edge_21",
        "type": "data_operation",
        "source": "flow_editor",
        "target": "component_entity",
        "relationship": "reads",
        "description": "Editor reads component data",
        "label": "loads",
        "details": "Flow editor reads component definitions to populate component library",
        "color": "#808080"
      },
      {
        "id": "edge_22",
        "type": "data_operation",
        "source": "playground_interface",
        "target": "message_entity",
        "relationship": "writes",
        "description": "Playground writes message data",
        "label": "creates",
        "details": "Playground interface creates and stores chat messages during interactions",
        "color": "#808080"
      },
      {
        "id": "edge_23",
        "type": "data_operation",
        "source": "component_sidebar",
        "target": "component_entity",
        "relationship": "reads",
        "description": "Sidebar reads component data",
        "label": "lists",
        "details": "Component sidebar reads component data to display available components",
        "color": "#808080"
      },
      {
        "id": "edge_24",
        "type": "data_operation",
        "source": "reactflow_canvas",
        "target": "vertex_entity",
        "relationship": "reads",
        "description": "Canvas reads vertex data",
        "label": "renders",
        "details": "React Flow canvas reads vertex data to render flow nodes visually",
        "color": "#808080"
      },
      {
        "id": "edge_25",
        "type": "logic_dependency",
        "source": "application_lifecycle",
        "target": "authentication_system",
        "relationship": "depends_on",
        "description": "App lifecycle depends on auth system",
        "label": "requires",
        "details": "Application lifecycle management requires authentication system for user session management",
        "color": "#808080"
      },
      {
        "id": "edge_26",
        "type": "logic_dependency",
        "source": "flow_execution_engine",
        "target": "component_management",
        "relationship": "depends_on",
        "description": "Execution engine depends on component management",
        "label": "loads",
        "details": "Flow execution engine depends on component management for loading and instantiating components",
        "color": "#808080"
      },
      {
        "id": "edge_27",
        "type": "logic_dependency",
        "source": "flow_execution_engine",
        "target": "graph_state_management",
        "relationship": "depends_on",
        "description": "Execution engine depends on state management",
        "label": "tracks",
        "details": "Flow execution engine depends on state management for tracking execution progress",
        "color": "#808080"
      },
      {
        "id": "edge_28",
        "type": "logic_dependency",
        "source": "job_queue_system",
        "target": "flow_execution_engine",
        "relationship": "depends_on",
        "description": "Job queue depends on execution engine",
        "label": "executes",
        "details": "Job queue system depends on execution engine for processing queued flow executions",
        "color": "#808080"
      },
      {
        "id": "edge_29",
        "type": "logic_dependency",
        "source": "authentication_system",
        "target": "security_access_control",
        "relationship": "depends_on",
        "description": "Auth system depends on access control",
        "label": "enforces",
        "details": "Authentication system depends on access control for permission enforcement",
        "color": "#808080"
      },
      {
        "id": "edge_30",
        "type": "data_operation",
        "source": "authentication_system",
        "target": "user_entity",
        "relationship": "reads",
        "description": "Auth system reads user data",
        "label": "validates",
        "details": "Authentication system reads user data for credential validation",
        "color": "#808080"
      },
      {
        "id": "edge_31",
        "type": "logic_dependency",
        "source": "real_time_event_system",
        "target": "websocket_sse_communication",
        "relationship": "depends_on",
        "description": "Event system depends on communication",
        "label": "transmits",
        "details": "Real-time event system depends on WebSocket/SSE for message transmission",
        "color": "#808080"
      },
      {
        "id": "edge_32",
        "type": "logic_dependency",
        "source": "component_management",
        "target": "caching_system",
        "relationship": "depends_on",
        "description": "Component management depends on caching",
        "label": "caches",
        "details": "Component management depends on caching system for performance optimization",
        "color": "#808080"
      },
      {
        "id": "edge_33",
        "type": "data_operation",
        "source": "graph_state_management",
        "target": "vertex_build_entity",
        "relationship": "writes",
        "description": "State management writes build data",
        "label": "tracks",
        "details": "Graph state management writes vertex build data for execution tracking",
        "color": "#808080"
      },
      {
        "id": "edge_34",
        "type": "logic_dependency",
        "source": "validation_engine",
        "target": "error_handling_system",
        "relationship": "depends_on",
        "description": "Validation depends on error handling",
        "label": "reports",
        "details": "Validation engine depends on error handling system for reporting validation failures",
        "color": "#808080"
      },
      {
        "id": "edge_35",
        "type": "logic_dependency",
        "source": "caching_system",
        "target": "configuration_management",
        "relationship": "depends_on",
        "description": "Caching depends on configuration",
        "label": "configures",
        "details": "Caching system depends on configuration management for cache settings",
        "color": "#808080"
      },
      {
        "id": "edge_36",
        "type": "data_operation",
        "source": "error_handling_system",
        "target": "transaction_entity",
        "relationship": "writes",
        "description": "Error system writes error logs",
        "label": "logs",
        "details": "Error handling system writes error information to transaction logs",
        "color": "#808080"
      },
      {
        "id": "edge_37",
        "type": "data_operation",
        "source": "security_access_control",
        "target": "user_entity",
        "relationship": "reads",
        "description": "Security reads user permissions",
        "label": "authorizes",
        "details": "Security system reads user data to determine access permissions",
        "color": "#808080"
      },
      {
        "id": "edge_38",
        "type": "data_operation",
        "source": "websocket_sse_communication",
        "target": "message_entity",
        "relationship": "reads",
        "description": "Communication reads message data",
        "label": "transmits",
        "details": "WebSocket communication reads message data for real-time transmission",
        "color": "#808080"
      },
      {
        "id": "edge_39",
        "type": "data_operation",
        "source": "frontend_state_management",
        "target": "flow_entity",
        "relationship": "reads",
        "description": "Frontend reads flow state",
        "label": "syncs",
        "details": "Frontend state management reads flow data to maintain synchronized state",
        "color": "#808080"
      },
      {
        "id": "edge_40",
        "type": "logic_dependency",
        "source": "mcp_integration_system",
        "target": "component_management",
        "relationship": "depends_on",
        "description": "MCP integration depends on components",
        "label": "extends",
        "details": "MCP integration system depends on component management to extend component capabilities",
        "color": "#808080"
      },
      {
        "id": "edge_41",
        "type": "logic_dependency",
        "source": "voice_mode_system",
        "target": "real_time_event_system",
        "relationship": "depends_on",
        "description": "Voice mode depends on real-time events",
        "label": "streams",
        "details": "Voice mode system depends on real-time events for audio streaming",
        "color": "#808080"
      },
      {
        "id": "edge_42",
        "type": "logic_dependency",
        "source": "file_management_system",
        "target": "security_access_control",
        "relationship": "depends_on",
        "description": "File management depends on access control",
        "label": "secures",
        "details": "File management system depends on access control for secure file operations",
        "color": "#808080"
      },
      {
        "id": "edge_43",
        "type": "logic_dependency",
        "source": "store_integration_system",
        "target": "authentication_system",
        "relationship": "depends_on",
        "description": "Store integration depends on authentication",
        "label": "authenticates",
        "details": "Store integration system depends on authentication for user verification",
        "color": "#808080"
      },
      {
        "id": "edge_44",
        "type": "logic_dependency",
        "source": "session_management_system",
        "target": "caching_system",
        "relationship": "depends_on",
        "description": "Session management depends on caching",
        "label": "stores",
        "details": "Session management system depends on caching for session storage and retrieval",
        "color": "#808080"
      },
      {
        "id": "edge_45",
        "type": "test_validation",
        "source": "flow_management_tests",
        "target": "flow_entity",
        "relationship": "validates",
        "description": "Tests validate flow management",
        "label": "tests",
        "details": "Flow management tests validate CRUD operations on flow entities",
        "color": "#808080"
      },
      {
        "id": "edge_46",
        "type": "test_validation",
        "source": "authentication_authorization_tests",
        "target": "user_entity",
        "relationship": "validates",
        "description": "Tests validate user authentication",
        "label": "tests",
        "details": "Authentication tests validate user login and authorization workflows",
        "color": "#808080"
      },
      {
        "id": "edge_47",
        "type": "test_validation",
        "source": "graph_execution_tests",
        "target": "vertex_entity",
        "relationship": "validates",
        "description": "Tests validate graph execution",
        "label": "tests",
        "details": "Graph execution tests validate vertex processing and execution logic",
        "color": "#808080"
      },
      {
        "id": "edge_48",
        "type": "test_validation",
        "source": "component_integration_tests",
        "target": "component_entity",
        "relationship": "validates",
        "description": "Tests validate component integration",
        "label": "tests",
        "details": "Component integration tests validate component loading and execution",
        "color": "#808080"
      },
      {
        "id": "edge_49",
        "type": "test_validation",
        "source": "real_time_communication_tests",
        "target": "message_entity",
        "relationship": "validates",
        "description": "Tests validate message communication",
        "label": "tests",
        "details": "Real-time communication tests validate message transmission and delivery",
        "color": "#808080"
      },
      {
        "id": "edge_50",
        "type": "test_validation",
        "source": "job_queue_tests",
        "target": "transaction_entity",
        "relationship": "validates",
        "description": "Tests validate job processing",
        "label": "tests",
        "details": "Job queue tests validate transaction processing and queue management",
        "color": "#808080"
      },
      {
        "id": "edge_51",
        "type": "test_validation",
        "source": "validation_engine_tests",
        "target": "flow_entity",
        "relationship": "validates",
        "description": "Tests validate input validation",
        "label": "tests",
        "details": "Validation engine tests validate flow data integrity and validation rules",
        "color": "#808080"
      },
      {
        "id": "edge_52",
        "type": "test_validation",
        "source": "caching_system_tests",
        "target": "component_entity",
        "relationship": "validates",
        "description": "Tests validate caching behavior",
        "label": "tests",
        "details": "Caching system tests validate component caching and performance optimization",
        "color": "#808080"
      },
      {
        "id": "edge_53",
        "type": "test_validation",
        "source": "error_handling_tests",
        "target": "transaction_entity",
        "relationship": "validates",
        "description": "Tests validate error handling",
        "label": "tests",
        "details": "Error handling tests validate error processing and recovery mechanisms",
        "color": "#808080"
      },
      {
        "id": "edge_54",
        "type": "test_validation",
        "source": "security_access_control_tests",
        "target": "user_entity",
        "relationship": "validates",
        "description": "Tests validate security controls",
        "label": "tests",
        "details": "Security tests validate access control and permission enforcement",
        "color": "#808080"
      },
      {
        "id": "edge_55",
        "type": "test_validation",
        "source": "mcp_integration_tests",
        "target": "flow_entity",
        "relationship": "validates",
        "description": "Tests validate MCP integration",
        "label": "tests",
        "details": "MCP integration tests validate server protocol integration",
        "color": "#808080"
      },
      {
        "id": "edge_56",
        "type": "test_validation",
        "source": "voice_mode_tests",
        "target": "message_entity",
        "relationship": "validates",
        "description": "Tests validate voice processing",
        "label": "tests",
        "details": "Voice mode tests validate audio processing and transcription",
        "color": "#808080"
      },
      {
        "id": "edge_57",
        "type": "test_validation",
        "source": "file_management_tests",
        "target": "file_entity",
        "relationship": "validates",
        "description": "Tests validate file management",
        "label": "tests",
        "details": "File management tests validate file upload and storage operations",
        "color": "#808080"
      },
      {
        "id": "edge_58",
        "type": "test_validation",
        "source": "frontend_ui_tests",
        "target": "login_page",
        "relationship": "validates",
        "description": "Tests validate UI components",
        "label": "tests",
        "details": "UI tests validate frontend component behavior and rendering",
        "color": "#808080"
      },
      {
        "id": "edge_59",
        "type": "test_validation",
        "source": "e2e_workflow_tests",
        "target": "flow_dashboard",
        "relationship": "validates",
        "description": "Tests validate complete workflows",
        "label": "tests",
        "details": "End-to-end tests validate complete user workflows",
        "color": "#808080"
      },
      {
        "id": "edge_60",
        "type": "test_validation",
        "source": "performance_benchmark_tests",
        "target": "flow_execution_engine",
        "relationship": "validates",
        "description": "Tests validate system performance",
        "label": "tests",
        "details": "Performance tests validate system scalability and response times",
        "color": "#808080"
      },
      {
        "id": "edge_61",
        "type": "test_validation",
        "source": "api_integration_tests",
        "target": "flow_entity",
        "relationship": "validates",
        "description": "Tests validate API functionality",
        "label": "tests",
        "details": "API integration tests validate REST API endpoints and responses",
        "color": "#808080"
      },
      {
        "id": "edge_62",
        "type": "test_validation",
        "source": "database_integration_tests",
        "target": "user_entity",
        "relationship": "validates",
        "description": "Tests validate database operations",
        "label": "tests",
        "details": "Database tests validate data persistence and CRUD operations",
        "color": "#808080"
      },
      {
        "id": "edge_63",
        "type": "test_validation",
        "source": "deployment_validation_tests",
        "target": "application_lifecycle",
        "relationship": "validates",
        "description": "Tests validate deployment process",
        "label": "tests",
        "details": "Deployment tests validate application startup and configuration",
        "color": "#808080"
      },
      {
        "id": "edge_64",
        "type": "test_validation",
        "source": "regression_test_suite",
        "target": "flow_entity",
        "relationship": "validates",
        "description": "Tests prevent feature regression",
        "label": "tests",
        "details": "Regression tests ensure existing functionality remains intact",
        "color": "#808080"
      },
      {
        "id": "edge_65",
        "type": "schema_relationship",
        "source": "folder_entity",
        "target": "folder_entity",
        "relationship": "self_reference",
        "description": "Folder has parent-child hierarchy",
        "label": "parent_of",
        "details": "Folders can contain other folders creating hierarchical organization",
        "color": "#808080"
      },
      {
        "id": "edge_66",
        "type": "schema_relationship",
        "source": "user_entity",
        "target": "credential_entity",
        "relationship": "one_to_many",
        "description": "User manages credentials",
        "label": "credentials",
        "details": "Users store and manage authentication credentials for external services",
        "color": "#808080"
      },
      {
        "id": "edge_67",
        "type": "schema_relationship",
        "source": "user_entity",
        "target": "store_entity",
        "relationship": "one_to_many",
        "description": "User contributes to store",
        "label": "contributes",
        "details": "Users can contribute components and flows to the marketplace store",
        "color": "#808080"
      },
      {
        "id": "edge_68",
        "type": "schema_relationship",
        "source": "credential_entity",
        "target": "variable_entity",
        "relationship": "related_to",
        "description": "Credentials relate to variables",
        "label": "relates",
        "details": "Credentials can be stored as encrypted variables for security",
        "color": "#808080"
      },
      {
        "id": "edge_69",
        "type": "schema_relationship",
        "source": "store_entity",
        "target": "component_entity",
        "relationship": "contains",
        "description": "Store contains components",
        "label": "contains",
        "details": "The marketplace store contains community-contributed components",
        "color": "#808080"
      },
      {
        "id": "edge_70",
        "type": "schema_relationship",
        "source": "global_variable_entity",
        "target": "user_entity",
        "relationship": "many_to_one",
        "description": "Global variables can be user-scoped",
        "label": "scoped_to",
        "details": "Global variables can be scoped to specific users for personalization",
        "color": "#808080"
      },
      {
        "id": "edge_71",
        "type": "interface_composition",
        "source": "playground_interface",
        "target": "io_modal",
        "relationship": "contains",
        "description": "Playground contains IO modal",
        "label": "embeds",
        "details": "IO modal is embedded within the playground interface for input/output display",
        "color": "#808080"
      },
      {
        "id": "edge_72",
        "type": "interface_composition",
        "source": "voice_assistant",
        "target": "chat_input",
        "relationship": "integrates_with",
        "description": "Voice assistant integrates with chat input",
        "label": "enhances",
        "details": "Voice assistant enhances chat input with speech recognition capabilities",
        "color": "#808080"
      },
      {
        "id": "edge_73",
        "type": "interface_composition",
        "source": "folder_sidebar",
        "target": "flow_grid",
        "relationship": "controls",
        "description": "Folder sidebar controls flow grid",
        "label": "filters",
        "details": "Folder sidebar filters and controls the display of flows in the grid",
        "color": "#808080"
      },
      {
        "id": "edge_74",
        "type": "interface_composition",
        "source": "component_sidebar",
        "target": "component_grid",
        "relationship": "populates",
        "description": "Component sidebar populated by grid",
        "label": "displays",
        "details": "Component grid data populates the sidebar component browser",
        "color": "#808080"
      },
      {
        "id": "edge_75",
        "type": "interface_composition",
        "source": "mcp_server_tab",
        "target": "add_mcp_server_modal",
        "relationship": "triggers",
        "description": "MCP tab triggers add modal",
        "label": "opens",
        "details": "MCP server tab contains functionality to open the add server modal",
        "color": "#808080"
      },
      {
        "id": "edge_76",
        "type": "interface_composition",
        "source": "settings_page",
        "target": "api_keys_settings",
        "relationship": "contains",
        "description": "Settings page contains API keys tab",
        "label": "includes",
        "details": "API keys settings is a tab within the main settings page",
        "color": "#808080"
      },
      {
        "id": "edge_77",
        "type": "interface_composition",
        "source": "settings_page",
        "target": "global_variables_settings",
        "relationship": "contains",
        "description": "Settings page contains variables tab",
        "label": "includes",
        "details": "Global variables settings is a tab within the main settings page",
        "color": "#808080"
      },
      {
        "id": "edge_78",
        "type": "interface_composition",
        "source": "header_component",
        "target": "notification_system",
        "relationship": "contains",
        "description": "Header contains notification system",
        "label": "displays",
        "details": "Header component contains and displays the notification system",
        "color": "#808080"
      },
      {
        "id": "edge_79",
        "type": "interface_composition",
        "source": "error_boundary",
        "target": "loading_states",
        "relationship": "manages",
        "description": "Error boundary manages loading states",
        "label": "controls",
        "details": "Error boundary component manages and controls loading state displays",
        "color": "#808080"
      },
      {
        "id": "edge_80",
        "type": "interface_composition",
        "source": "theme_provider",
        "target": "header_component",
        "relationship": "provides_theme",
        "description": "Theme provider styles header",
        "label": "themes",
        "details": "Theme provider supplies styling context to header component",
        "color": "#808080"
      },
      {
        "id": "edge_81",
        "type": "interface_navigation",
        "source": "auth_guard",
        "target": "login_page",
        "relationship": "redirects_to",
        "description": "Auth guard redirects to login",
        "label": "protects",
        "details": "Authentication guard redirects unauthorized users to login",
        "color": "#808080"
      },
      {
        "id": "edge_82",
        "type": "logic_dependency",
        "source": "websocket_manager",
        "target": "real_time_event_system",
        "relationship": "implements",
        "description": "WebSocket manager implements event system",
        "label": "provides",
        "details": "WebSocket manager provides the underlying implementation for real-time event system",
        "color": "#808080"
      },
      {
        "id": "edge_83",
        "type": "interface_composition",
        "source": "file_management_page",
        "target": "data_table",
        "relationship": "contains",
        "description": "File page contains data table",
        "label": "displays",
        "details": "File management page uses data table component to display file listings",
        "color": "#808080"
      },
      {
        "id": "edge_84",
        "type": "interface_composition",
        "source": "add_mcp_server_modal",
        "target": "form_builder",
        "relationship": "contains",
        "description": "MCP modal contains form builder",
        "label": "uses",
        "details": "Add MCP server modal uses form builder for server configuration",
        "color": "#808080"
      },
      {
        "id": "edge_85",
        "type": "interface_composition",
        "source": "flow_dashboard",
        "target": "search_interface",
        "relationship": "contains",
        "description": "Dashboard contains search interface",
        "label": "includes",
        "details": "Flow dashboard includes integrated search interface for finding flows",
        "color": "#808080"
      },
      {
        "id": "edge_86",
        "type": "schema_relationship",
        "source": "flow_entity",
        "target": "component_entity",
        "relationship": "contains",
        "description": "Flow contains component instances",
        "label": "contains",
        "details": "Flows are composed of multiple interconnected component instances",
        "color": "#808080"
      },
      {
        "id": "edge_87",
        "type": "schema_relationship",
        "source": "transaction_entity",
        "target": "vertex_entity",
        "relationship": "many_to_one",
        "description": "Transaction tracks vertex execution",
        "label": "tracks",
        "details": "Each transaction record tracks the execution of specific vertices",
        "color": "#808080"
      },
      {
        "id": "edge_88",
        "type": "schema_relationship",
        "source": "message_entity",
        "target": "user_entity",
        "relationship": "many_to_one",
        "description": "Message belongs to user session",
        "label": "belongs_to",
        "details": "Chat messages are associated with user sessions for context",
        "color": "#808080"
      },
      {
        "id": "edge_89",
        "type": "schema_relationship",
        "source": "vertex_build_entity",
        "target": "component_entity",
        "relationship": "many_to_one",
        "description": "Vertex build references component",
        "label": "references",
        "details": "Each vertex build references a specific component definition",
        "color": "#808080"
      },
      {
        "id": "edge_90",
        "type": "schema_relationship",
        "source": "file_entity",
        "target": "flow_entity",
        "relationship": "many_to_many",
        "description": "Files can be used by multiple flows",
        "label": "used_by",
        "details": "Uploaded files can be referenced and used by multiple flows",
        "color": "#808080"
      },
      {
        "id": "edge_91",
        "type": "schema_relationship",
        "source": "api_key_entity",
        "target": "transaction_entity",
        "relationship": "one_to_many",
        "description": "API key authorizes transactions",
        "label": "authorizes",
        "details": "API keys are used to authorize and track external API transactions",
        "color": "#808080"
      },
      {
        "id": "edge_92",
        "type": "schema_relationship",
        "source": "variable_entity",
        "target": "flow_entity",
        "relationship": "many_to_many",
        "description": "Variables used in flows",
        "label": "used_in",
        "details": "Encrypted variables are referenced and used within flow configurations",
        "color": "#808080"
      },
      {
        "id": "edge_93",
        "type": "schema_relationship",
        "source": "credential_entity",
        "target": "api_key_entity",
        "relationship": "one_to_many",
        "description": "Credential manages API keys",
        "label": "manages",
        "details": "Credentials can contain multiple API keys for different services",
        "color": "#808080"
      },
      {
        "id": "edge_94",
        "type": "schema_relationship",
        "source": "store_entity",
        "target": "flow_entity",
        "relationship": "one_to_many",
        "description": "Store contains shared flows",
        "label": "shares",
        "details": "The store can contain publicly shared flow templates",
        "color": "#808080"
      },
      {
        "id": "edge_95",
        "type": "interface_navigation",
        "source": "store_page",
        "target": "flow_editor",
        "relationship": "navigates_to",
        "description": "Store imports to editor",
        "label": "imports",
        "details": "Users can import store components directly into the flow editor",
        "color": "#808080"
      },
      {
        "id": "edge_96",
        "type": "interface_navigation",
        "source": "playground_interface",
        "target": "flow_editor",
        "relationship": "navigates_to",
        "description": "Playground returns to editor",
        "label": "edits",
        "details": "Users can return to flow editor from playground for modifications",
        "color": "#808080"
      },
      {
        "id": "edge_97",
        "type": "interface_navigation",
        "source": "file_management_page",
        "target": "flow_editor",
        "relationship": "navigates_to",
        "description": "File management to editor",
        "label": "uses",
        "details": "Users can use managed files directly in flow editor",
        "color": "#808080"
      },
      {
        "id": "edge_98",
        "type": "interface_navigation",
        "source": "settings_page",
        "target": "admin_page",
        "relationship": "navigates_to",
        "description": "Settings to admin panel",
        "label": "admin",
        "details": "Admin users can access admin panel from settings",
        "color": "#808080"
      },
      {
        "id": "edge_99",
        "type": "interface_navigation",
        "source": "flow_dashboard",
        "target": "template_gallery",
        "relationship": "navigates_to",
        "description": "Dashboard to template gallery",
        "label": "templates",
        "details": "Users can browse flow templates from the dashboard",
        "color": "#808080"
      },
      {
        "id": "edge_100",
        "type": "interface_navigation",
        "source": "template_gallery",
        "target": "flow_editor",
        "relationship": "navigates_to",
        "description": "Template opens in editor",
        "label": "creates",
        "details": "Selected templates create new flows in the editor",
        "color": "#808080"
      },
      {
        "id": "edge_101",
        "type": "interface_composition",
        "source": "flow_editor",
        "target": "reactflow_canvas",
        "relationship": "contains",
        "description": "Editor contains React Flow canvas",
        "label": "displays",
        "details": "Flow editor contains the main React Flow canvas for visual editing",
        "color": "#808080"
      },
      {
        "id": "edge_102",
        "type": "interface_composition",
        "source": "flow_editor",
        "target": "component_sidebar",
        "relationship": "contains",
        "description": "Editor contains component sidebar",
        "label": "includes",
        "details": "Flow editor includes component sidebar for drag-and-drop functionality",
        "color": "#808080"
      },
      {
        "id": "edge_103",
        "type": "interface_composition",
        "source": "flow_editor",
        "target": "flow_toolbar",
        "relationship": "contains",
        "description": "Editor contains toolbar",
        "label": "includes",
        "details": "Flow editor includes toolbar with editing controls and actions",
        "color": "#808080"
      },
      {
        "id": "edge_104",
        "type": "interface_composition",
        "source": "playground_interface",
        "target": "message_list",
        "relationship": "contains",
        "description": "Playground contains message list",
        "label": "displays",
        "details": "Playground interface contains message list for chat interactions",
        "color": "#808080"
      },
      {
        "id": "edge_105",
        "type": "interface_composition",
        "source": "flow_dashboard",
        "target": "workspace_switcher",
        "relationship": "contains",
        "description": "Dashboard contains workspace switcher",
        "label": "includes",
        "details": "Dashboard includes workspace switcher for multi-workspace support",
        "color": "#808080"
      },
      {
        "id": "edge_106",
        "type": "interface_composition",
        "source": "settings_page",
        "target": "mcp_server_tab",
        "relationship": "contains",
        "description": "Settings contains MCP server tab",
        "label": "includes",
        "details": "Settings page includes MCP server configuration tab",
        "color": "#808080"
      },
      {
        "id": "edge_107",
        "type": "interface_composition",
        "source": "store_page",
        "target": "paginator_component",
        "relationship": "contains",
        "description": "Store page contains pagination",
        "label": "includes",
        "details": "Store page includes pagination component for browsing components",
        "color": "#808080"
      },
      {
        "id": "edge_108",
        "type": "logic_dependency",
        "source": "telemetry_analytics_system",
        "target": "logging_monitoring_system",
        "relationship": "depends_on",
        "description": "Telemetry depends on logging",
        "label": "aggregates",
        "details": "Telemetry system depends on logging system for data aggregation",
        "color": "#808080"
      },
      {
        "id": "edge_109",
        "type": "logic_dependency",
        "source": "dependency_injection_system",
        "target": "configuration_management",
        "relationship": "depends_on",
        "description": "DI depends on configuration",
        "label": "configures",
        "details": "Dependency injection system depends on configuration management for service setup",
        "color": "#808080"
      },
      {
        "id": "edge_110",
        "type": "logic_dependency",
        "source": "deployment_orchestration",
        "target": "validation_engine",
        "relationship": "depends_on",
        "description": "Deployment depends on validation",
        "label": "validates",
        "details": "Deployment orchestration depends on validation engine for pre-deployment checks",
        "color": "#808080"
      },
      {
        "id": "edge_111",
        "type": "data_operation",
        "source": "settings_page",
        "target": "api_key_entity",
        "relationship": "writes",
        "description": "Settings manages API keys",
        "label": "configures",
        "details": "Settings page performs CRUD operations on user API keys",
        "color": "#808080"
      },
      {
        "id": "edge_112",
        "type": "data_operation",
        "source": "settings_page",
        "target": "variable_entity",
        "relationship": "writes",
        "description": "Settings manages variables",
        "label": "configures",
        "details": "Settings page performs CRUD operations on user variables",
        "color": "#808080"
      },
      {
        "id": "edge_113",
        "type": "data_operation",
        "source": "file_management_page",
        "target": "file_entity",
        "relationship": "writes",
        "description": "File page manages files",
        "label": "uploads",
        "details": "File management page performs file upload and management operations",
        "color": "#808080"
      },
      {
        "id": "edge_114",
        "type": "data_operation",
        "source": "store_page",
        "target": "store_entity",
        "relationship": "reads",
        "description": "Store page reads marketplace data",
        "label": "browses",
        "details": "Store page reads marketplace data to display available components",
        "color": "#808080"
      },
      {
        "id": "edge_115",
        "type": "data_operation",
        "source": "login_page",
        "target": "user_entity",
        "relationship": "reads",
        "description": "Login validates user credentials",
        "label": "authenticates",
        "details": "Login page reads user data for authentication validation",
        "color": "#808080"
      },
      {
        "id": "edge_116",
        "type": "data_operation",
        "source": "flow_execution_engine",
        "target": "transaction_entity",
        "relationship": "writes",
        "description": "Execution engine logs transactions",
        "label": "records",
        "details": "Flow execution engine writes transaction records for monitoring",
        "color": "#808080"
      },
      {
        "id": "edge_117",
        "type": "data_operation",
        "source": "job_queue_system",
        "target": "vertex_build_entity",
        "relationship": "reads",
        "description": "Job queue reads build artifacts",
        "label": "executes",
        "details": "Job queue system reads vertex build artifacts for execution",
        "color": "#808080"
      },
      {
        "id": "edge_118",
        "type": "data_operation",
        "source": "voice_assistant",
        "target": "message_entity",
        "relationship": "writes",
        "description": "Voice assistant creates messages",
        "label": "transcribes",
        "details": "Voice assistant writes transcribed voice input as messages",
        "color": "#808080"
      },
      {
        "id": "edge_119",
        "type": "data_operation",
        "source": "mcp_integration_system",
        "target": "flow_entity",
        "relationship": "reads",
        "description": "MCP system reads flow configurations",
        "label": "exposes",
        "details": "MCP integration system reads flow data to expose as MCP services",
        "color": "#808080"
      },
      {
        "id": "edge_120",
        "type": "data_operation",
        "source": "admin_page",
        "target": "user_entity",
        "relationship": "writes",
        "description": "Admin manages user accounts",
        "label": "administers",
        "details": "Admin page performs user management operations including creation and updates",
        "color": "#808080"
      },
      {
        "id": "rbac_edge_001",
        "type": "schema_relationship",
        "source": "user_entity",
        "target": "role_entity",
        "label": "user_creates_roles",
        "color": "#0000FF",
        "rbac_feature": "Role creation relationship",
        "relationship": "one_to_many",
        "details": "Users with admin permissions can create custom roles"
      },
      {
        "id": "rbac_edge_002",
        "type": "schema_relationship",
        "source": "role_entity",
        "target": "permission_entity",
        "label": "role_has_permissions",
        "color": "#0000FF",
        "rbac_feature": "Role-permission mapping",
        "relationship": "many_to_many",
        "details": "Roles can have multiple permissions through RolePermission junction table"
      },
      {
        "id": "rbac_edge_003",
        "type": "schema_relationship",
        "source": "user_entity",
        "target": "role_assignment_entity",
        "label": "user_has_role_assignments",
        "color": "#0000FF",
        "rbac_feature": "User role assignments",
        "relationship": "one_to_many",
        "details": "Users can have multiple role assignments with different scopes"
      },
      {
        "id": "rbac_edge_004",
        "type": "schema_relationship",
        "source": "role_entity",
        "target": "role_assignment_entity",
        "label": "role_assigned_to_users",
        "color": "#0000FF",
        "rbac_feature": "Role assignment tracking",
        "relationship": "one_to_many",
        "details": "Roles can be assigned to multiple users and groups"
      },
      {
        "id": "rbac_edge_005",
        "type": "schema_relationship",
        "source": "permission_entity",
        "target": "permission_scope_entity",
        "label": "permission_has_scopes",
        "color": "#0000FF",
        "rbac_feature": "Permission scoping",
        "relationship": "one_to_many",
        "details": "Permissions can be scoped to different levels (global, workspace, resource)"
      },
      {
        "id": "rbac_edge_006",
        "type": "schema_relationship",
        "source": "group_entity",
        "target": "user_entity",
        "label": "group_contains_users",
        "color": "#0000FF",
        "rbac_feature": "Group membership",
        "relationship": "many_to_many",
        "details": "Groups contain multiple users through GroupMember junction table"
      },
      {
        "id": "rbac_edge_007",
        "type": "schema_relationship",
        "source": "group_entity",
        "target": "role_assignment_entity",
        "label": "group_has_role_assignments",
        "color": "#0000FF",
        "rbac_feature": "Group-based role assignment",
        "relationship": "one_to_many",
        "details": "Groups can have roles assigned that are inherited by all members"
      },
      {
        "id": "rbac_edge_008",
        "type": "schema_relationship",
        "source": "user_entity",
        "target": "audit_log_entity",
        "label": "user_generates_audit_events",
        "color": "#0000FF",
        "rbac_feature": "Audit trail tracking",
        "relationship": "one_to_many",
        "details": "User actions generate audit log entries for compliance"
      },
      {
        "id": "rbac_edge_009",
        "type": "schema_relationship",
        "source": "flow_entity",
        "target": "permission_scope_entity",
        "label": "flow_has_permission_scopes",
        "color": "#FF00FF",
        "rbac_feature": "Flow-level permissions",
        "relationship": "one_to_many",
        "details": "Flows can have specific permission scopes for fine-grained access control"
      },
      {
        "id": "rbac_edge_010",
        "type": "schema_relationship",
        "source": "flow_entity",
        "target": "user_entity",
        "label": "flow_has_owner",
        "color": "#FF00FF",
        "rbac_feature": "Flow ownership",
        "relationship": "many_to_one",
        "details": "Each flow has an explicit owner with full permissions"
      },
      {
        "id": "rbac_edge_011",
        "type": "schema_relationship",
        "source": "folder_entity",
        "target": "permission_scope_entity",
        "label": "workspace_has_permissions",
        "color": "#FF00FF",
        "rbac_feature": "Workspace permissions",
        "relationship": "one_to_many",
        "details": "Workspaces can define permission templates and inheritance rules"
      },
      {
        "id": "rbac_edge_012",
        "type": "interface_navigation",
        "source": "admin_page",
        "target": "role_management_page",
        "label": "navigate_to_role_management",
        "color": "#0000FF",
        "rbac_feature": "Admin navigation to RBAC",
        "relationship": "navigation",
        "details": "Admin users can navigate to role management from main admin page"
      },
      {
        "id": "rbac_edge_013",
        "type": "interface_navigation",
        "source": "role_management_page",
        "target": "permission_editor",
        "label": "open_permission_editor",
        "color": "#0000FF",
        "rbac_feature": "Role permission configuration",
        "relationship": "modal_open",
        "details": "Role management opens permission editor for configuring role permissions"
      },
      {
        "id": "rbac_edge_014",
        "type": "interface_navigation",
        "source": "admin_page",
        "target": "user_group_manager",
        "label": "navigate_to_group_management",
        "color": "#0000FF",
        "rbac_feature": "Group management navigation",
        "relationship": "navigation",
        "details": "Admin access to user group management interface"
      },
      {
        "id": "rbac_edge_015",
        "type": "interface_navigation",
        "source": "user_group_manager",
        "target": "role_assignment_modal",
        "label": "assign_roles_to_group",
        "color": "#0000FF",
        "rbac_feature": "Bulk role assignment",
        "relationship": "modal_open",
        "details": "Group management can open role assignment modal for bulk assignments"
      },
      {
        "id": "rbac_edge_016",
        "type": "interface_navigation",
        "source": "settings_page",
        "target": "sso_integration_settings",
        "label": "configure_sso_integration",
        "color": "#FF00FF",
        "rbac_feature": "SSO configuration access",
        "relationship": "navigation",
        "details": "Settings page provides access to SSO integration configuration"
      },
      {
        "id": "rbac_edge_017",
        "type": "interface_navigation",
        "source": "access_control_panel",
        "target": "audit_log_viewer",
        "label": "view_detailed_audit_logs",
        "color": "#0000FF",
        "rbac_feature": "Audit log access",
        "relationship": "navigation",
        "details": "Access control panel links to detailed audit log viewer"
      },
      {
        "id": "rbac_edge_018",
        "type": "logic_dependency",
        "source": "user_authentication",
        "target": "role_based_access_control",
        "label": "authentication_triggers_rbac",
        "color": "#FF00FF",
        "rbac_feature": "Auth-RBAC integration",
        "relationship": "service_call",
        "details": "User authentication triggers RBAC role resolution and permission loading"
      },
      {
        "id": "rbac_edge_019",
        "type": "logic_dependency",
        "source": "role_based_access_control",
        "target": "permission_evaluator",
        "label": "rbac_delegates_permission_evaluation",
        "color": "#0000FF",
        "rbac_feature": "Permission evaluation delegation",
        "relationship": "service_call",
        "details": "RBAC engine delegates complex permission evaluation to specialized evaluator"
      },
      {
        "id": "rbac_edge_020",
        "type": "logic_dependency",
        "source": "permission_evaluator",
        "target": "group_management",
        "label": "permission_checks_group_membership",
        "color": "#0000FF",
        "rbac_feature": "Group permission resolution",
        "relationship": "service_call",
        "details": "Permission evaluator queries group management for user group memberships"
      },
      {
        "id": "rbac_edge_021",
        "type": "logic_dependency",
        "source": "role_based_access_control",
        "target": "audit_logger",
        "label": "rbac_logs_access_decisions",
        "color": "#0000FF",
        "rbac_feature": "Access decision auditing",
        "relationship": "event_emission",
        "details": "All RBAC access decisions are logged for compliance and monitoring"
      },
      {
        "id": "rbac_edge_022",
        "type": "logic_dependency",
        "source": "sso_role_sync",
        "target": "group_management",
        "label": "sso_syncs_group_memberships",
        "color": "#0000FF",
        "rbac_feature": "SSO group synchronization",
        "relationship": "service_call",
        "details": "SSO sync updates local group memberships based on external identity provider"
      },
      {
        "id": "rbac_edge_023",
        "type": "logic_dependency",
        "source": "sso_role_sync",
        "target": "role_based_access_control",
        "label": "sso_updates_user_roles",
        "color": "#0000FF",
        "rbac_feature": "SSO role mapping",
        "relationship": "service_call",
        "details": "SSO sync triggers role updates based on external group mappings"
      },
      {
        "id": "rbac_edge_024",
        "type": "data_operation",
        "source": "role_based_access_control",
        "target": "role_assignment_entity",
        "label": "rbac_queries_role_assignments",
        "color": "#0000FF",
        "rbac_feature": "Role assignment queries",
        "relationship": "database_read",
        "details": "RBAC engine queries role assignments to determine user permissions"
      },
      {
        "id": "rbac_edge_025",
        "type": "data_operation",
        "source": "permission_evaluator",
        "target": "permission_entity",
        "label": "evaluator_queries_permissions",
        "color": "#0000FF",
        "rbac_feature": "Permission data access",
        "relationship": "database_read",
        "details": "Permission evaluator queries permission definitions and scopes"
      },
      {
        "id": "rbac_edge_026",
        "type": "data_operation",
        "source": "group_management",
        "target": "group_entity",
        "label": "group_mgmt_manages_groups",
        "color": "#0000FF",
        "rbac_feature": "Group data management",
        "relationship": "database_crud",
        "details": "Group management service performs CRUD operations on group entities"
      },
      {
        "id": "rbac_edge_027",
        "type": "data_operation",
        "source": "audit_logger",
        "target": "audit_log_entity",
        "label": "logger_writes_audit_entries",
        "color": "#0000FF",
        "rbac_feature": "Audit log persistence",
        "relationship": "database_write",
        "details": "Audit logger persists all RBAC events for compliance tracking"
      },
      {
        "id": "rbac_edge_028",
        "type": "data_operation",
        "source": "sso_role_sync",
        "target": "user_entity",
        "label": "sso_updates_user_data",
        "color": "#0000FF",
        "rbac_feature": "SSO user provisioning",
        "relationship": "database_write",
        "details": "SSO sync updates user profiles and external identity mappings"
      },
      {
        "id": "rbac_edge_029",
        "type": "interface_logic",
        "source": "role_management_page",
        "target": "role_based_access_control",
        "label": "role_ui_calls_rbac_service",
        "color": "#0000FF",
        "rbac_feature": "Role management API calls",
        "relationship": "api_call",
        "details": "Role management UI makes API calls to RBAC service for role operations"
      },
      {
        "id": "rbac_edge_030",
        "type": "interface_logic",
        "source": "permission_editor",
        "target": "permission_evaluator",
        "label": "permission_ui_tests_permissions",
        "color": "#0000FF",
        "rbac_feature": "Permission testing interface",
        "relationship": "api_call",
        "details": "Permission editor can test permission combinations before saving"
      },
      {
        "id": "rbac_edge_031",
        "type": "interface_logic",
        "source": "user_group_manager",
        "target": "group_management",
        "label": "group_ui_manages_groups",
        "color": "#0000FF",
        "rbac_feature": "Group management API",
        "relationship": "api_call",
        "details": "Group management UI performs group and membership operations"
      },
      {
        "id": "rbac_edge_032",
        "type": "interface_logic",
        "source": "audit_log_viewer",
        "target": "audit_logger",
        "label": "audit_ui_queries_logs",
        "color": "#0000FF",
        "rbac_feature": "Audit log queries",
        "relationship": "api_call",
        "details": "Audit viewer queries and exports audit log data for compliance"
      },
      {
        "id": "rbac_edge_033",
        "type": "interface_logic",
        "source": "sso_integration_settings",
        "target": "sso_role_sync",
        "label": "sso_ui_configures_sync",
        "color": "#0000FF",
        "rbac_feature": "SSO configuration API",
        "relationship": "api_call",
        "details": "SSO settings UI configures synchronization rules and triggers manual syncs"
      },
      {
        "id": "rbac_edge_034",
        "type": "data_operation",
        "source": "flow_service",
        "target": "permission_evaluator",
        "label": "flow_service_checks_permissions",
        "color": "#FF00FF",
        "rbac_feature": "Flow permission enforcement",
        "relationship": "service_call",
        "details": "Flow service checks user permissions before allowing flow operations"
      },
      {
        "id": "rbac_edge_035",
        "type": "data_operation",
        "source": "user_service",
        "target": "role_based_access_control",
        "label": "user_service_manages_roles",
        "color": "#FF00FF",
        "rbac_feature": "User role management",
        "relationship": "service_call",
        "details": "User service integrates with RBAC for user role and group management"
      },
      {
        "id": "rbac_edge_036",
        "type": "interface_logic",
        "source": "flow_dashboard",
        "target": "permission_evaluator",
        "label": "dashboard_filters_by_permissions",
        "color": "#FF00FF",
        "rbac_feature": "Permission-based visibility",
        "relationship": "api_call",
        "details": "Flow dashboard filters visible flows based on user permissions"
      },
      {
        "id": "rbac_edge_037",
        "type": "interface_logic",
        "source": "settings_page",
        "target": "role_based_access_control",
        "label": "settings_shows_rbac_sections",
        "color": "#FF00FF",
        "rbac_feature": "Settings RBAC integration",
        "relationship": "api_call",
        "details": "Settings page conditionally shows RBAC sections based on user permissions"
      },
      {
        "id": "rbac_edge_038",
        "type": "test_validation",
        "source": "rbac_permission_tests",
        "target": "permission_evaluator",
        "label": "tests_validate_permission_logic",
        "color": "#0000FF",
        "rbac_feature": "Permission logic testing",
        "relationship": "test_coverage",
        "details": "RBAC permission tests validate permission evaluation logic"
      },
      {
        "id": "rbac_edge_039",
        "type": "test_validation",
        "source": "role_management_tests",
        "target": "role_based_access_control",
        "label": "tests_validate_role_operations",
        "color": "#0000FF",
        "rbac_feature": "Role management testing",
        "relationship": "test_coverage",
        "details": "Role management tests validate role creation, assignment, and lifecycle"
      },
      {
        "id": "rbac_edge_040",
        "type": "test_validation",
        "source": "group_access_tests",
        "target": "group_management",
        "label": "tests_validate_group_access",
        "color": "#0000FF",
        "rbac_feature": "Group access testing",
        "relationship": "test_coverage",
        "details": "Group access tests validate group-based permission inheritance"
      },
      {
        "id": "rbac_edge_041",
        "type": "test_validation",
        "source": "audit_compliance_tests",
        "target": "audit_logger",
        "label": "tests_validate_audit_compliance",
        "color": "#0000FF",
        "rbac_feature": "Audit compliance testing",
        "relationship": "test_coverage",
        "details": "Audit compliance tests validate logging completeness and regulatory compliance"
      },
      {
        "id": "edge_162",
        "type": "interface_composition",
        "source": "code_editor",
        "target": "flow_editor",
        "relationship": "contains",
        "description": "Code Editor is contained within Flow Editor",
        "label": "integrated_in",
        "details": "Code editing functionality is integrated as part of the flow editing interface"
      },
      {
        "id": "edge_163",
        "type": "logic_dependencies",
        "source": "api_versioning_system",
        "target": "api_management_service",
        "relationship": "depends_on",
        "description": "API Versioning System depends on API Management Service",
        "label": "extends",
        "details": "API versioning extends the core API management functionality with version control"
      },
      {
        "id": "edge_164",
        "type": "interface_logic_calls",
        "source": "permission_scope_selector",
        "target": "permission_manager",
        "relationship": "invokes",
        "description": "Permission Scope Selector invokes Permission Manager for scope validation",
        "label": "validates_with",
        "details": "UI component validates permission scopes through the permission management service"
      },
      {
        "id": "edge_165",
        "type": "logic_dependencies",
        "source": "testing_quality_assurance",
        "target": "continuous_integration",
        "relationship": "depends_on",
        "description": "Testing Quality Assurance depends on Continuous Integration system",
        "label": "integrates_with",
        "details": "Quality assurance processes are integrated with CI/CD pipeline for automated testing"
      }
    ]
  }
}