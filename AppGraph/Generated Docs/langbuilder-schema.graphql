# LangBuilder GraphQL Schema
# Standard GraphQL schema without database-specific directives

# Scalar types
scalar UUID
scalar DateTime
scalar JSON

# User Management
type User {
  id: UUID!
  username: String!
  password: String!
  email: String
  is_active: Boolean!
  is_superuser: Boolean!
  profile_image: String
  created_at: DateTime!
  updated_at: DateTime!
  last_login_at: DateTime
  store_api_key: String
  optins: JSON
  
  # Relationships
  api_keys: [ApiKey!]!
  flows: [Flow!]!
  variables: [Variable!]!
  folders: [Folder!]!
  files: [File!]!
}

type ApiKey {
  id: UUID!
  name: String
  api_key: String!
  created_at: DateTime!
  last_used_at: DateTime
  total_uses: Int!
  is_active: Boolean!
  
  # Relationships
  user_id: UUID!
  user: User!
}

# Flow Management
type Flow {
  id: UUID!
  name: String!
  description: String
  data: JSON  # Contains nodes and edges structure
  icon: String  # Emoji or lucide icon
  icon_bg_color: String  # Hex color starting with #
  gradient: String
  is_component: Boolean
  updated_at: DateTime
  webhook: Boolean
  endpoint_name: String  # Alphanumeric with hyphens/underscores
  tags: [String!]
  locked: Boolean
  mcp_enabled: Boolean  # MCP server exposure
  action_name: String
  action_description: String
  access_type: AccessTypeEnum!  # PRIVATE or PUBLIC
  fs_path: String  # File system path
  
  # Relationships
  user_id: UUID
  user: User!
  folder_id: UUID
  folder: Folder
}

type Folder {
  id: UUID!
  name: String!
  description: String
  auth_settings: JSON  # Authentication settings for the folder/project
  
  # Relationships
  parent_id: UUID
  parent: Folder
  user_id: UUID
  user: User!
  children: [Folder!]!
  flows: [Flow!]!
}

# Variables and Configuration
type Variable {
  id: UUID!
  name: String!
  value: String!  # Encrypted value
  type: String  # e.g., "CREDENTIAL"
  default_fields: [String!]
  created_at: DateTime
  updated_at: DateTime
  
  # Relationships
  user_id: UUID!
  user: User!
}

type GlobalVariable {
  id: UUID!
  name: String!
  value: String!
  type: GlobalVariableType!
  description: String
  is_secret: Boolean!
  created_at: DateTime!
  updated_at: DateTime!
  
  # Relationships
  user_id: UUID  # null for system-wide variables
  user: User
}

# Messaging and Communication
type Message {
  id: UUID!
  timestamp: DateTime!
  sender: String!
  sender_name: String!
  session_id: String!
  text: String!
  files: [String!]
  error: Boolean!
  edit: Boolean!
  properties: JSON  # Properties object
  category: String!
  content_blocks: [JSON!]  # Voice Mode support
  
  # Relationships
  flow_id: UUID
}

# Execution and Monitoring
type Transaction {
  id: UUID!
  timestamp: DateTime!
  vertex_id: String!  # ID of the vertex/node in the flow
  target_id: String
  inputs: JSON  # Serialized with length limits
  outputs: JSON  # Serialized with length limits
  status: String!
  error: String
  
  # Relationships
  flow_id: UUID!
}

type VertexBuild {
  build_id: UUID!
  id: String!  # Vertex/component ID
  timestamp: DateTime!
  data: JSON  # Serialized with limits
  artifacts: JSON  # Serialized with limits
  params: String  # Serialized parameters
  valid: Boolean!
  
  # Relationships
  flow_id: UUID!
}

# File Management
type File {
  id: UUID!
  name: String!
  path: String!
  size: Int!
  provider: String  # Storage provider (e.g., 'local', 's3')
  created_at: DateTime!
  updated_at: DateTime!
  
  # Relationships
  user_id: UUID!
  user: User!
}

# Component System
type Component {
  display_name: String!
  description: String!
  icon: String
  category: ComponentCategory!
  inputs: [ComponentInput!]!
  outputs: [ComponentOutput!]!
  code: String!
  template: JSON
  documentation: String
  beta: Boolean!
  experimental: Boolean!
}

type ComponentInput {
  name: String!
  type: String!
  required: Boolean!
  description: String
  default: String
}

type ComponentOutput {
  name: String!
  type: String!
  description: String
}

# Graph Runtime
type Vertex {
  id: String!
  display_name: String!
  description: String
  base_type: ComponentType!
  inputs: [VertexInput!]!
  outputs: [VertexOutput!]!
  params: JSON
  frozen: Boolean!
  is_input: Boolean!
  is_output: Boolean!
  is_state: Boolean!
  edges: [Edge!]!
}

type VertexInput {
  name: String!
  type: String!
  value: String
  required: Boolean!
}

type VertexOutput {
  name: String!
  type: String!
  value: String
}

type Edge {
  id: String!
  source: Vertex!
  target: Vertex!
  source_handle: String!
  target_handle: String!
  data: JSON
}

# Security and Credentials
type Credential {
  id: UUID!
  name: String!
  credential_type: CredentialType!
  encrypted_value: String!
  metadata: JSON
  created_at: DateTime!
  updated_at: DateTime!
  expires_at: DateTime
  is_active: Boolean!
  
  # Relationships
  user_id: UUID!
  user: User!
}

# Store and Marketplace
type Store {
  id: UUID!
  name: String!
  description: String!
  flow_data: JSON!
  tags: [String!]!
  is_public: Boolean!
  downloads: Int!
  likes: Int!
  version: String!
  author: String!
  created_at: DateTime!
  updated_at: DateTime!
  
  # Relationships
  user_id: UUID!
  user: User!
}

type StoreRating {
  id: UUID!
  rating: Int!
  review: String
  created_at: DateTime!
  
  # Relationships
  store_id: UUID!
  user_id: UUID!
  store: Store!
  user: User!
}

# Enums
enum AccessType {
  PRIVATE
  PUBLIC
}

enum AccessTypeEnum {
  PRIVATE
  PUBLIC
}

enum ComponentCategory {
  INPUT_OUTPUT
  TEXT_PROCESSING
  AGENTS
  CHAINS
  DATA
  EMBEDDINGS
  LLMS
  MEMORIES
  TOOLS
  RETRIEVERS
  LOGIC
  HELPERS
  CUSTOM
}

enum ComponentType {
  COMPONENT
  CHAT_INPUT
  CHAT_OUTPUT
  TEXT_INPUT
  TEXT_OUTPUT
  DATA_INPUT
  DATA_OUTPUT
}

enum CredentialType {
  API_KEY
  OAUTH_TOKEN
  DATABASE_CONNECTION
  WEBHOOK_SECRET
  CERTIFICATE
  SSH_KEY
}

enum GlobalVariableType {
  STRING
  INTEGER
  FLOAT
  BOOLEAN
  JSON
  SECRET
}