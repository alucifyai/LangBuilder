{
  "metadata": {
    "application": "LangBuilder",
    "description": "Complete partitioned App Graph with comprehensive RBAC enhancement - enterprise-ready with granular access control",
    "version": "2.0.0-RBAC-Partitioned",
    "generated_at": "2025-01-29",
    "partitioning_strategy": "Domain-based decomposition with RBAC security boundaries",
    "base_version": "1.2.0",
    "subsystem_count": 6,
    "total_nodes": 98,
    "total_edges": 135,
    "rbac_enhancement": true,
    "rbac_additions": {
      "new_rbac_subsystem": "Added complete RBAC & Security Subsystem",
      "modified_subsystems": 5,
      "new_cross_subsystem_edges": 25,
      "enhanced_interfaces": 8
    },
    "sync_status": "Enhanced from langbuilder-complete-partitioned-appgraph-final.json with full RBAC integration"
  },
  "subsystems": [
    {
      "subsystem_id": "rbac_security_subsystem",
      "subsystem_name": "RBAC & Security Subsystem",
      "subsystem_description": "Comprehensive Role-Based Access Control system with fine-grained permissions, audit logging, multi-tenant workspaces, and enterprise security features",
      "rbac_status": "new",
      "color": "#FF4757",
      "subsystem_appgraph": {
        "nodes": {
          "schema": [
            {
              "id": "schema_role",
              "type": "entity",
              "name": "Role",
              "rbac_status": "new",
              "color": "#FF6B6B",
              "graphql_schema": "type Role {\n  id: ID!\n  name: String! @unique\n  display_name: String!\n  description: String\n  is_system_role: Boolean!\n  is_active: Boolean!\n  created_at: DateTime!\n  updated_at: DateTime!\n  created_by: User! @relation(name: \"RoleCreator\")\n  roleAssignments: [RoleAssignment!]! @relation(name: \"RoleAssignments\")\n  resourcePermissions: [ResourcePermission!]! @relation(name: \"RoleResourcePermissions\")\n  permissions: [Permission!]! @relation(name: \"RolePermissions\")\n}",
              "implementation_details": {
                "default_roles": ["Owner", "Admin", "Editor", "Viewer", "Service", "Account"],
                "api_endpoints": "Full CRUD: GET /roles, POST /roles, PUT /roles/:id, DELETE /roles/:id"
              }
            },
            {
              "id": "schema_permission",
              "type": "entity",
              "name": "Permission",
              "rbac_status": "new",
              "color": "#FF6B6B",
              "graphql_schema": "type Permission {\n  id: ID!\n  name: String! @unique\n  display_name: String!\n  description: String\n  category: String!\n  resource_type: String!\n  action: String!\n  is_system_permission: Boolean!\n  created_at: DateTime!\n  roles: [Role!]! @relation(name: \"RolePermissions\")\n  resourcePermissions: [ResourcePermission!]! @relation(name: \"PermissionResourcePermissions\")\n}",
              "implementation_details": {
                "permission_categories": ["flow", "component", "environment", "workspace", "api_token", "user_management", "system"]
              }
            },
            {
              "id": "schema_role_assignment",
              "type": "entity",
              "name": "RoleAssignment",
              "rbac_status": "new",
              "color": "#FF6B6B",
              "graphql_schema": "type RoleAssignment {\n  id: ID!\n  user: User! @relation(name: \"UserRoleAssignments\")\n  role: Role! @relation(name: \"RoleAssignments\")\n  scope_type: String!\n  scope_id: String\n  granted_by: User! @relation(name: \"RoleGranter\")\n  granted_at: DateTime!\n  expires_at: DateTime\n  is_active: Boolean!\n  workspace: Workspace @relation(name: \"WorkspaceRoleAssignments\")\n}",
              "implementation_details": {
                "scope_types": ["global", "workspace", "flow", "component", "environment"]
              }
            },
            {
              "id": "schema_workspace",
              "type": "entity",
              "name": "Workspace",
              "rbac_status": "new",
              "color": "#FF6B6B",
              "graphql_schema": "type Workspace {\n  id: ID!\n  name: String! @unique\n  display_name: String!\n  description: String\n  is_active: Boolean!\n  created_at: DateTime!\n  updated_at: DateTime!\n  owner: User! @relation(name: \"WorkspaceOwner\")\n  roleAssignments: [RoleAssignment!]! @relation(name: \"WorkspaceRoleAssignments\")\n  flows: [Flow!]! @relation(name: \"WorkspaceFlows\")\n  apiKeys: [ApiKey!]! @relation(name: \"WorkspaceApiKeys\")\n  credentials: [Credential!]! @relation(name: \"WorkspaceCredentials\")\n}",
              "implementation_details": {
                "multi_tenant": "Complete workspace isolation for enterprise customers"
              }
            },
            {
              "id": "schema_audit_log",
              "type": "entity",
              "name": "AuditLog",
              "rbac_status": "new",
              "color": "#FF6B6B",
              "graphql_schema": "type AuditLog {\n  id: ID!\n  actor: User! @relation(name: \"UserAuditLogs\")\n  action: String!\n  resource_type: String!\n  resource_id: String!\n  old_values: JSON\n  new_values: JSON\n  ip_address: String\n  user_agent: String\n  timestamp: DateTime!\n  workspace: Workspace @relation(name: \"WorkspaceAuditLogs\")\n  severity: String!\n  status: String!\n}",
              "implementation_details": {
                "compliance": ["SOC2", "GDPR", "HIPAA"],
                "retention_policy": "7 years for audit compliance"
              }
            }
          ],
          "interface": [
            {
              "id": "interface_rbac_dashboard",
              "type": "screen",
              "name": "RBAC Management Dashboard",
              "rbac_status": "new",
              "color": "#4ECDC4"
            },
            {
              "id": "interface_role_editor",
              "type": "component",
              "name": "Role Editor Interface",
              "rbac_status": "new",
              "color": "#4ECDC4"
            },
            {
              "id": "interface_audit_viewer",
              "type": "component",
              "name": "Audit Log Viewer",
              "rbac_status": "new",
              "color": "#4ECDC4"
            }
          ],
          "logic": [
            {
              "id": "logic_rbac_authorization",
              "type": "service",
              "name": "RBAC Authorization Engine",
              "rbac_status": "new",
              "color": "#45B7D1",
              "implementation_details": {
                "core_functions": [
                  "checkPermission(user, action, resource, context)",
                  "getUserRoles(user, scope)",
                  "evaluateResourceAccess(user, resource_type, resource_id)"
                ],
                "performance": "Sub-10ms permission checks with Redis caching",
                "fallback_behavior": "Fail-secure: deny access when permission check fails"
              }
            },
            {
              "id": "logic_role_management",
              "type": "service",
              "name": "Role Management Service",
              "rbac_status": "new",
              "color": "#45B7D1"
            },
            {
              "id": "logic_audit_logging",
              "type": "service",
              "name": "Audit Logging Service",
              "rbac_status": "new",
              "color": "#45B7D1"
            }
          ],
          "test": [
            {
              "id": "test_rbac_role_creation",
              "type": "acceptance_test",
              "name": "Role Creation and Management",
              "rbac_status": "new",
              "color": "#B8860B"
            },
            {
              "id": "test_rbac_permission_enforcement",
              "type": "acceptance_test",
              "name": "Permission Enforcement Across Resources",
              "rbac_status": "new",
              "color": "#B8860B"
            }
          ]
        },
        "edges": [
          {
            "id": "edge_role_permissions_internal",
            "type": "many_to_many",
            "source": "schema_role",
            "target": "schema_permission",
            "label": "has_permissions",
            "rbac_status": "new",
            "color": "#FFE66D",
            "details": "Roles can have multiple permissions"
          },
          {
            "id": "edge_role_assignment_role_internal",
            "type": "many_to_one",
            "source": "schema_role_assignment",
            "target": "schema_role",
            "label": "assigned_role",
            "rbac_status": "new",
            "color": "#FFE66D",
            "details": "Each role assignment references a specific role"
          },
          {
            "id": "edge_workspace_role_assignments_internal",
            "type": "one_to_many",
            "source": "schema_workspace",
            "target": "schema_role_assignment",
            "label": "scopes_role_assignments",
            "rbac_status": "new",
            "color": "#FFE66D",
            "details": "Workspace scopes role assignments"
          },
          {
            "id": "edge_rbac_dashboard_role_editor_internal",
            "type": "contains",
            "source": "interface_rbac_dashboard",
            "target": "interface_role_editor",
            "label": "includes",
            "rbac_status": "new",
            "color": "#FFE66D",
            "details": "RBAC dashboard includes role editor interface"
          },
          {
            "id": "edge_rbac_authorization_role_management_internal",
            "type": "depends_on",
            "source": "logic_rbac_authorization",
            "target": "logic_role_management",
            "label": "queries",
            "rbac_status": "new",
            "color": "#FFE66D",
            "details": "RBAC authorization engine queries role management service"
          },
          {
            "id": "edge_role_management_audit_logging_internal",
            "type": "triggers",
            "source": "logic_role_management",
            "target": "logic_audit_logging",
            "label": "logs_actions",
            "rbac_status": "new",
            "color": "#FFE66D",
            "details": "Role management service logs actions to audit service"
          },
          {
            "id": "edge_audit_logging_audit_log_internal",
            "type": "writes_to",
            "source": "logic_audit_logging",
            "target": "schema_audit_log",
            "label": "creates_entries",
            "rbac_status": "new",
            "color": "#FFE66D",
            "details": "Audit logging service writes to audit log schema"
          },
          {
            "id": "edge_test_rbac_role_creation_role_management_internal",
            "type": "validates",
            "source": "test_rbac_role_creation",
            "target": "logic_role_management",
            "label": "tests",
            "rbac_status": "new",
            "color": "#FFE66D",
            "details": "RBAC role creation test validates role management service"
          },
          {
            "id": "edge_test_rbac_permission_enforcement_rbac_authorization_internal",
            "type": "validates",
            "source": "test_rbac_permission_enforcement",
            "target": "logic_rbac_authorization",
            "label": "tests",
            "rbac_status": "new",
            "color": "#FFE66D",
            "details": "Permission enforcement test validates RBAC authorization engine"
          }
        ]
      }
    },
    {
      "subsystem_id": "auth_subsystem",
      "subsystem_name": "Authentication & Authorization Subsystem",
      "subsystem_description": "Enhanced authentication with RBAC integration, SSO support, and enterprise security features including workspace-scoped authentication",
      "rbac_status": "modified",
      "color": "#FFA726",
      "subsystem_appgraph": {
        "nodes": {
          "schema": [
            {
              "id": "schema_user",
              "type": "entity",
              "name": "User",
              "rbac_status": "modified",
              "color": "#96CEB4",
              "graphql_schema": "type User {\n  id: ID!\n  username: String! @unique\n  password: String!\n  profile_image: String\n  is_active: Boolean!\n  is_superuser: Boolean!\n  is_verified: Boolean\n  created_at: DateTime!\n  updated_at: DateTime!\n  last_login_at: DateTime\n  flows: [Flow!]! @relation(name: \"UserFlows\")\n  folders: [Folder!]! @relation(name: \"UserFolders\")\n  apiKeys: [ApiKey!]! @relation(name: \"UserApiKeys\")\n  variables: [Variable!]! @relation(name: \"UserVariables\")\n  flowRuns: [FlowRun!]! @relation(name: \"UserFlowRuns\")\n  roleAssignments: [RoleAssignment!]! @relation(name: \"UserRoleAssignments\")\n  auditLogs: [AuditLog!]! @relation(name: \"UserAuditLogs\")\n}",
              "rbac_enhancements": [
                "Added role_assignments relationship",
                "Added audit_logs relationship",
                "Enhanced with workspace context"
              ],
              "attributes": {
                "primary_key": "id",
                "indexes": ["username"],
                "constraints": ["username_unique", "password_required"]
              }
            },
            {
              "id": "schema_apikey",
              "type": "entity",
              "name": "ApiKey",
              "rbac_status": "modified",
              "color": "#96CEB4",
              "graphql_schema": "type ApiKey {\n  id: ID!\n  name: String!\n  api_key: String! @unique\n  created_at: DateTime!\n  last_used_at: DateTime\n  total_uses: Int!\n  is_active: Boolean!\n  user: User! @relation(name: \"UserApiKeys\")\n  flows: [Flow!]!\n  scope_permissions: JSON\n  workspace: Workspace @relation(name: \"WorkspaceApiKeys\")\n}",
              "rbac_enhancements": [
                "Added scope_permissions field",
                "Added workspace_id relationship",
                "Enhanced with fine-grained API permissions"
              ],
              "attributes": {
                "primary_key": "id",
                "indexes": ["api_key", "user_id"],
                "constraints": ["api_key_unique", "name_unique_per_user"]
              }
            },
            {
              "id": "schema_credential",
              "type": "entity",
              "name": "Credential",
              "rbac_status": "modified",
              "color": "#96CEB4",
              "graphql_schema": "type Credential {\n  id: ID!\n  name: String!\n  provider: String!\n  encrypted_data: String!\n  user: User!\n  created_at: DateTime!\n  updated_at: DateTime!\n  workspace: Workspace @relation(name: \"WorkspaceCredentials\")\n  access_permissions: JSON\n}",
              "rbac_enhancements": [
                "Added workspace_id scope",
                "Enhanced with access permissions",
                "Added sharing restrictions"
              ],
              "attributes": {
                "primary_key": "id",
                "indexes": ["user_id", "provider"],
                "constraints": ["name_unique_per_user", "encryption_required"]
              }
            }
          ],
          "interface": [
            {
              "id": "ui_login_page",
              "type": "page",
              "name": "LoginPage",
              "rbac_status": "modified",
              "color": "#96CEB4",
              "uidl": {
                "name": "LoginPage",
                "type": "page",
                "content": {
                  "elementType": "container",
                  "children": [
                    {
                      "elementType": "form",
                      "name": "LoginForm",
                      "attrs": {
                        "onSubmit": "handleLogin"
                      },
                      "children": [
                        {
                          "elementType": "input",
                          "name": "UsernameInput",
                          "attrs": {
                            "type": "text",
                            "placeholder": "Username",
                            "required": true
                          }
                        },
                        {
                          "elementType": "input",
                          "name": "PasswordInput",
                          "attrs": {
                            "type": "password",
                            "placeholder": "Password",
                            "required": true
                          }
                        },
                        {
                          "elementType": "checkbox",
                          "name": "AutoLoginCheckbox",
                          "attrs": {
                            "label": "Keep me logged in"
                          }
                        },
                        {
                          "elementType": "select",
                          "name": "WorkspaceSelector",
                          "attrs": {
                            "label": "Workspace (Optional)",
                            "placeholder": "Select workspace to log into"
                          }
                        },
                        {
                          "elementType": "button",
                          "name": "SubmitButton",
                          "attrs": {
                            "type": "submit",
                            "text": "Sign In"
                          }
                        },
                        {
                          "elementType": "button",
                          "name": "SSOLoginButton",
                          "attrs": {
                            "text": "Login with SSO"
                          }
                        }
                      ]
                    }
                  ]
                },
                "stateDefinitions": {
                  "username": {
                    "type": "string",
                    "defaultValue": ""
                  },
                  "password": {
                    "type": "string",
                    "defaultValue": ""
                  },
                  "autoLogin": {
                    "type": "boolean",
                    "defaultValue": false
                  },
                  "isLoading": {
                    "type": "boolean",
                    "defaultValue": false
                  }
                }
              }
            },
            {
              "id": "ui_auth_store",
              "type": "store",
              "name": "AuthStore",
              "uidl": {
                "name": "AuthStore",
                "type": "store",
                "state": {
                  "user": null,
                  "isAuthenticated": false,
                  "accessToken": null,
                  "refreshToken": null,
                  "autoLogin": false,
                  "userRoles": [],
                  "userPermissions": [],
                  "currentWorkspace": null,
                  "availableWorkspaces": []
                },
                "actions": [
                  "login",
                  "logout",
                  "refreshToken",
                  "setUser",
                  "checkAutoLogin",
                  "loadUserRoles",
                  "checkPermission",
                  "switchWorkspace"
                ]
              }
            },
            {
              "id": "ui_api_keys_store",
              "type": "store",
              "name": "ApiKeysStore",
              "uidl": {
                "name": "ApiKeysStore",
                "type": "store",
                "state": {
                  "apiKeys": [],
                  "selectedKey": null
                },
                "actions": [
                  "loadApiKeys",
                  "createApiKey",
                  "deleteApiKey",
                  "toggleApiKey"
                ]
              }
            }
          ],
          "logic": [
            {
              "id": "logic_auth_flow",
              "type": "statechart",
              "name": "AuthenticationFlow",
              "rbac_status": "modified",
              "color": "#96CEB4",
              "statechart": {
                "initial": "unauthenticated",
                "states": {
                  "unauthenticated": {
                    "on": {
                      "LOGIN": {
                        "target": "authenticating",
                        "actions": ["validateCredentials"]
                      }
                    }
                  },
                  "authenticating": {
                    "invoke": {
                      "src": "authenticateUser",
                      "onDone": {
                        "target": "authenticated",
                        "actions": ["storeTokens", "loadUserData"]
                      },
                      "onError": {
                        "target": "unauthenticated",
                        "actions": ["showError"]
                      }
                    }
                  },
                  "authenticated": {
                    "on": {
                      "LOGOUT": {
                        "target": "unauthenticated",
                        "actions": ["clearTokens", "clearUserData"]
                      },
                      "TOKEN_EXPIRED": {
                        "target": "refreshing"
                      }
                    }
                  },
                  "refreshing": {
                    "invoke": {
                      "src": "refreshAccessToken",
                      "onDone": {
                        "target": "authenticated",
                        "actions": ["updateTokens"]
                      },
                      "onError": {
                        "target": "unauthenticated",
                        "actions": ["clearTokens"]
                      }
                    }
                  }
                }
              }
            },
            {
              "id": "logic_user_service",
              "type": "service",
              "name": "UserService",
              "operations": [
                {
                  "name": "createUser",
                  "input": ["userData"],
                  "output": "userId",
                  "actions": ["validateUserData", "hashPassword", "createUserRecord", "sendWelcomeEmail"]
                },
                {
                  "name": "authenticateUser",
                  "input": ["credentials"],
                  "output": "authTokens",
                  "actions": ["verifyCredentials", "generateTokens", "updateLastLogin"]
                },
                {
                  "name": "updateUserProfile",
                  "input": ["userId", "profileData"],
                  "output": "success",
                  "actions": ["validateProfileData", "updateUserRecord", "invalidateCache"]
                }
              ]
            },
            {
              "id": "logic_session_manager",
              "type": "service",
              "name": "SessionManager",
              "operations": [
                {
                  "name": "createSession",
                  "input": ["userId"],
                  "output": "sessionId",
                  "actions": ["generateSessionId", "initializeSessionData", "storeSession"]
                },
                {
                  "name": "getSession",
                  "input": ["sessionId"],
                  "output": "sessionData",
                  "actions": ["retrieveSession", "validateExpiry", "extendExpiry"]
                },
                {
                  "name": "destroySession",
                  "input": ["sessionId"],
                  "actions": ["deleteSession", "cleanupResources"]
                }
              ]
            },
            {
              "id": "logic_rate_limiter",
              "type": "service",
              "name": "RateLimiter",
              "operations": [
                {
                  "name": "checkLimit",
                  "input": ["userId", "resource"],
                  "output": "allowed",
                  "actions": ["getCounter", "incrementCounter", "checkThreshold", "resetIfExpired"]
                },
                {
                  "name": "getRemainingQuota",
                  "input": ["userId", "resource"],
                  "output": "quota",
                  "actions": ["calculateRemaining", "getResetTime"]
                }
              ]
            }
          ],
          "test": [
            {
              "id": "test_user_authentication",
              "type": "acceptance",
              "name": "UserAuthenticationTest",
              "gherkin": "Feature: User Authentication\n  As a user\n  I want to log in securely\n  So that I can access my flows\n\n  Scenario: Successful login\n    Given I am on the login page\n    When I enter valid credentials\n    And I click \"Sign In\"\n    Then I should be redirected to the home page\n    And I should see my user profile\n\n  Scenario: Failed login with invalid credentials\n    Given I am on the login page\n    When I enter invalid credentials\n    And I click \"Sign In\"\n    Then I should see an error message\n    And I should remain on the login page\n\n  Scenario: Auto-login functionality\n    Given I previously logged in with \"Keep me logged in\" checked\n    When I visit the application\n    Then I should be automatically authenticated\n    And redirected to the home page"
            },
            {
              "id": "test_user_isolation",
              "type": "security",
              "name": "UserIsolationTest",
              "gherkin": "Feature: User Data Isolation\n  As the system\n  I want to isolate user data\n  So that users cannot access each other's resources\n\n  Scenario: Prevent cross-user flow access\n    Given User A has created a flow\n    When User B tries to access User A's flow\n    Then access should be denied\n    And a 403 Forbidden response should be returned\n\n  Scenario: Filter flows by user\n    Given multiple users have flows in the system\n    When a user requests their flow list\n    Then only their own flows should be returned\n    And no other user's flows should be visible"
            },
            {
              "id": "test_api_key_management",
              "type": "acceptance",
              "name": "ApiKeyManagementTest",
              "gherkin": "Feature: API Key Management\n  As a user\n  I want to manage my API keys\n  So that I can control API access\n\n  Scenario: Create new API key\n    Given I am on the API keys settings page\n    When I click \"Create New Key\"\n    And enter a key name\n    Then a new API key should be generated\n    And displayed once for copying\n    And added to my key list\n\n  Scenario: Revoke API key\n    Given I have an active API key\n    When I click \"Revoke\" on the key\n    Then the key should be deactivated\n    And API calls with that key should fail"
            }
          ]
        },
        "edges": [
          {
            "id": "auth_user_apikeys",
            "type": "one_to_many",
            "source": "schema_user",
            "target": "schema_apikey",
            "label": "owns",
            "details": "User owns multiple API keys"
          },
          {
            "id": "auth_user_credentials",
            "type": "one_to_many",
            "source": "schema_user",
            "target": "schema_credential",
            "label": "owns",
            "details": "User owns multiple credentials"
          },
          {
            "id": "auth_login_flow",
            "type": "triggers",
            "source": "ui_login_page",
            "target": "logic_auth_flow",
            "label": "initiates",
            "details": "Login page initiates authentication flow"
          },
          {
            "id": "auth_store_service",
            "type": "uses",
            "source": "ui_auth_store",
            "target": "logic_user_service",
            "label": "calls",
            "details": "Auth store calls user service for authentication"
          },
          {
            "id": "test_auth_validates",
            "type": "validates",
            "source": "test_user_authentication",
            "target": "logic_auth_flow",
            "label": "tests",
            "details": "Tests authentication flow"
          },
          {
            "id": "test_isolation_validates",
            "type": "validates",
            "source": "test_user_isolation",
            "target": "logic_user_service",
            "label": "verifies",
            "details": "Tests verify user data isolation"
          },
          {
            "id": "test_apikey_validates",
            "type": "validates",
            "source": "test_api_key_management",
            "target": "ui_api_keys_store",
            "label": "tests",
            "details": "Tests API key management functionality"
          },
          {
            "id": "user_service_schema",
            "type": "accesses",
            "source": "logic_user_service",
            "target": "schema_user",
            "label": "manages",
            "details": "User service manages user records"
          },
          {
            "id": "api_keys_store_schema",
            "type": "manages",
            "source": "ui_api_keys_store",
            "target": "schema_apikey",
            "label": "stores",
            "details": "API keys store manages API key data"
          }
        ]
      }
    },
    {
      "subsystem_id": "flow_management_subsystem",
      "subsystem_name": "Flow Management Subsystem",
      "subsystem_description": "Core flow creation, editing, storage, and organization functionality including hierarchical folder structure, flow versioning, and data persistence",
      "subsystem_appgraph": {
        "nodes": {
          "schema": [
            {
              "id": "schema_flow",
              "type": "entity",
              "name": "Flow",
              "graphql_schema": "type Flow {\n  id: ID!\n  name: String!\n  description: String\n  data: JSON!\n  is_component: Boolean!\n  icon: String\n  icon_bg_color: String\n  gradient: String\n  updated_at: DateTime!\n  webhook: Boolean\n  endpoint_name: String @unique\n  is_public: Boolean!\n  user: User! @relation(name: \"UserFlows\")\n  folder: Folder @relation(name: \"FolderFlows\")\n  flowRuns: [FlowRun!]! @relation(name: \"FlowRuns\")\n  messages: [Message!]! @relation(name: \"FlowMessages\")\n}",
              "attributes": {
                "primary_key": "id",
                "indexes": ["name", "user_id", "endpoint_name"],
                "constraints": ["name_unique_per_user", "endpoint_name_unique"]
              }
            },
            {
              "id": "schema_folder",
              "type": "entity",
              "name": "Folder",
              "graphql_schema": "type Folder {\n  id: ID!\n  name: String!\n  description: String\n  parent_folder_id: ID\n  user: User! @relation(name: \"UserFolders\")\n  flows: [Flow!]! @relation(name: \"FolderFlows\")\n  parent: Folder @relation(name: \"FolderHierarchy\")\n  children: [Folder!]! @relation(name: \"FolderHierarchy\")\n  created_at: DateTime!\n  updated_at: DateTime!\n}",
              "attributes": {
                "primary_key": "id",
                "indexes": ["name", "user_id", "parent_folder_id"],
                "constraints": ["name_unique_per_user_folder", "no_circular_hierarchy"]
              }
            },
            {
              "id": "schema_flowrun",
              "type": "entity",
              "name": "FlowRun",
              "graphql_schema": "type FlowRun {\n  id: ID!\n  name: String!\n  flow: Flow! @relation(name: \"FlowRuns\")\n  user: User! @relation(name: \"UserFlowRuns\")\n  status: FlowRunStatus!\n  inputs: JSON\n  outputs: JSON\n  logs: JSON\n  artifacts: JSON\n  created_at: DateTime!\n  updated_at: DateTime!\n}\n\nenum FlowRunStatus {\n  PENDING\n  RUNNING\n  SUCCESS\n  FAILED\n  CANCELLED\n}",
              "attributes": {
                "primary_key": "id",
                "indexes": ["flow_id", "user_id", "status"],
                "constraints": ["status_enum"]
              }
            },
            {
              "id": "schema_variable",
              "type": "entity",
              "name": "Variable",
              "graphql_schema": "type Variable {\n  id: ID!\n  name: String!\n  value: String\n  default_value: String\n  type: VariableType!\n  user: User! @relation(name: \"UserVariables\")\n  created_at: DateTime!\n  updated_at: DateTime!\n}\n\nenum VariableType {\n  STRING\n  NUMBER\n  BOOLEAN\n  JSON\n  SECRET\n}",
              "attributes": {
                "primary_key": "id",
                "indexes": ["name", "user_id"],
                "constraints": ["name_unique_per_user", "type_validation"]
              }
            },
            {
              "id": "schema_store",
              "type": "entity",
              "name": "Store",
              "graphql_schema": "type Store {\n  id: ID!\n  name: String!\n  description: String\n  data: JSON!\n  is_public: Boolean!\n  user: User!\n  created_at: DateTime!\n  updated_at: DateTime!\n}",
              "attributes": {
                "primary_key": "id",
                "indexes": ["name", "user_id"],
                "constraints": ["name_unique_per_user"]
              }
            },
            {
              "id": "schema_global_variable",
              "type": "entity",
              "name": "GlobalVariable",
              "graphql_schema": "type GlobalVariable {\n  id: ID!\n  name: String! @unique\n  value: String!\n  type: VariableType!\n  created_at: DateTime!\n  updated_at: DateTime!\n}",
              "attributes": {
                "primary_key": "id",
                "indexes": ["name"],
                "constraints": ["name_unique_global"]
              }
            }
          ],
          "interface": [
            {
              "id": "ui_flow_page",
              "type": "page",
              "name": "FlowPage",
              "uidl": {
                "name": "FlowPage",
                "type": "page",
                "content": {
                  "elementType": "container",
                  "children": [
                    {
                      "elementType": "component",
                      "name": "Header",
                      "dependency": "ui_header_component"
                    },
                    {
                      "elementType": "container",
                      "name": "FlowCanvas",
                      "attrs": {
                        "className": "flow-canvas"
                      },
                      "children": [
                        {
                          "elementType": "component",
                          "name": "ReactFlow",
                          "dependency": "ui_reactflow_wrapper"
                        },
                        {
                          "elementType": "component",
                          "name": "NodeToolbar",
                          "dependency": "ui_node_toolbar"
                        }
                      ]
                    },
                    {
                      "elementType": "component",
                      "name": "Sidebar",
                      "dependency": "ui_sidebar_component"
                    }
                  ]
                },
                "stateDefinitions": {
                  "flowId": {
                    "type": "string",
                    "defaultValue": null
                  },
                  "nodes": {
                    "type": "array",
                    "defaultValue": []
                  },
                  "edges": {
                    "type": "array",
                    "defaultValue": []
                  },
                  "isExecuting": {
                    "type": "boolean",
                    "defaultValue": false
                  }
                }
              }
            },
            {
              "id": "ui_home_page",
              "type": "page",
              "name": "HomePage",
              "uidl": {
                "name": "HomePage",
                "type": "page",
                "content": {
                  "elementType": "container",
                  "children": [
                    {
                      "elementType": "component",
                      "name": "Header",
                      "dependency": "ui_header_component"
                    },
                    {
                      "elementType": "container",
                      "name": "MainContent",
                      "children": [
                        {
                          "elementType": "component",
                          "name": "FlowGrid",
                          "dependency": "ui_flow_grid"
                        },
                        {
                          "elementType": "component",
                          "name": "TemplateGallery",
                          "dependency": "ui_template_gallery"
                        }
                      ]
                    }
                  ]
                },
                "stateDefinitions": {
                  "flows": {
                    "type": "array",
                    "defaultValue": []
                  },
                  "templates": {
                    "type": "array",
                    "defaultValue": []
                  },
                  "selectedFolder": {
                    "type": "string",
                    "defaultValue": null
                  }
                }
              }
            },
            {
              "id": "ui_settings_page",
              "type": "page",
              "name": "SettingsPage",
              "uidl": {
                "name": "SettingsPage",
                "type": "page",
                "content": {
                  "elementType": "container",
                  "children": [
                    {
                      "elementType": "tabs",
                      "name": "SettingsTabs",
                      "children": [
                        {
                          "elementType": "tab",
                          "name": "GeneralSettings",
                          "attrs": {
                            "label": "General"
                          }
                        },
                        {
                          "elementType": "tab",
                          "name": "ApiKeysSettings",
                          "attrs": {
                            "label": "API Keys"
                          }
                        },
                        {
                          "elementType": "tab",
                          "name": "GlobalVariables",
                          "attrs": {
                            "label": "Variables"
                          }
                        },
                        {
                          "elementType": "tab",
                          "name": "ShortcutsSettings",
                          "attrs": {
                            "label": "Shortcuts"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "id": "ui_flow_store",
              "type": "store",
              "name": "FlowStore",
              "uidl": {
                "name": "FlowStore",
                "type": "store",
                "state": {
                  "currentFlow": null,
                  "nodes": [],
                  "edges": [],
                  "isDirty": false,
                  "executionState": "idle",
                  "history": [],
                  "historyIndex": -1
                },
                "actions": [
                  "loadFlow",
                  "saveFlow",
                  "addNode",
                  "removeNode",
                  "updateNode",
                  "addEdge",
                  "removeEdge",
                  "executeFlow",
                  "undo",
                  "redo"
                ]
              }
            },
            {
              "id": "ui_folder_store",
              "type": "store",
              "name": "FolderStore",
              "uidl": {
                "name": "FolderStore",
                "type": "store",
                "state": {
                  "folders": [],
                  "selectedFolder": null,
                  "expandedFolders": []
                },
                "actions": [
                  "loadFolders",
                  "createFolder",
                  "deleteFolder",
                  "selectFolder",
                  "toggleFolder"
                ]
              }
            },
            {
              "id": "ui_flow_grid",
              "type": "component",
              "name": "FlowGrid",
              "uidl": {
                "name": "FlowGrid",
                "type": "component",
                "content": {
                  "elementType": "grid",
                  "children": {
                    "repeat": {
                      "dataSource": "flows",
                      "element": {
                        "elementType": "component",
                        "name": "FlowCard",
                        "dependency": "ui_flow_card"
                      }
                    }
                  }
                }
              }
            },
            {
              "id": "ui_flow_card",
              "type": "component",
              "name": "FlowCard",
              "uidl": {
                "name": "FlowCard",
                "type": "component",
                "content": {
                  "elementType": "card",
                  "children": [
                    {
                      "elementType": "container",
                      "name": "CardHeader",
                      "children": [
                        {
                          "elementType": "text",
                          "name": "FlowName",
                          "attrs": {
                            "bindingPath": "flow.name"
                          }
                        },
                        {
                          "elementType": "component",
                          "name": "FlowActions",
                          "dependency": "ui_flow_actions"
                        }
                      ]
                    },
                    {
                      "elementType": "text",
                      "name": "FlowDescription",
                      "attrs": {
                        "bindingPath": "flow.description"
                      }
                    },
                    {
                      "elementType": "container",
                      "name": "CardFooter",
                      "children": [
                        {
                          "elementType": "text",
                          "name": "UpdatedAt",
                          "attrs": {
                            "bindingPath": "flow.updated_at"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "id": "ui_node_toolbar",
              "type": "component",
              "name": "NodeToolbar",
              "uidl": {
                "name": "NodeToolbar",
                "type": "component",
                "content": {
                  "elementType": "toolbar",
                  "children": [
                    {
                      "elementType": "button",
                      "name": "PlayButton",
                      "attrs": {
                        "icon": "play",
                        "onClick": "handleExecute"
                      }
                    },
                    {
                      "elementType": "button",
                      "name": "SaveButton",
                      "attrs": {
                        "icon": "save",
                        "onClick": "handleSave"
                      }
                    },
                    {
                      "elementType": "button",
                      "name": "ShareButton",
                      "attrs": {
                        "icon": "share",
                        "onClick": "handleShare"
                      }
                    },
                    {
                      "elementType": "button",
                      "name": "UndoButton",
                      "attrs": {
                        "icon": "undo",
                        "onClick": "handleUndo"
                      }
                    },
                    {
                      "elementType": "button",
                      "name": "RedoButton",
                      "attrs": {
                        "icon": "redo",
                        "onClick": "handleRedo"
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": "ui_edit_node_modal",
              "type": "modal",
              "name": "EditNodeModal",
              "uidl": {
                "name": "EditNodeModal",
                "type": "modal",
                "content": {
                  "elementType": "modal",
                  "children": [
                    {
                      "elementType": "form",
                      "name": "NodeEditForm",
                      "children": [
                        {
                          "elementType": "tabs",
                          "name": "NodeTabs",
                          "children": [
                            {
                              "elementType": "tab",
                              "name": "ParametersTab",
                              "attrs": {
                                "label": "Parameters"
                              }
                            },
                            {
                              "elementType": "tab",
                              "name": "AdvancedTab",
                              "attrs": {
                                "label": "Advanced"
                              }
                            },
                            {
                              "elementType": "tab",
                              "name": "CodeTab",
                              "attrs": {
                                "label": "Code"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "id": "ui_share_modal",
              "type": "modal",
              "name": "ShareModal",
              "uidl": {
                "name": "ShareModal",
                "type": "modal",
                "content": {
                  "elementType": "modal",
                  "children": [
                    {
                      "elementType": "form",
                      "name": "ShareForm",
                      "children": [
                        {
                          "elementType": "input",
                          "name": "ShareLink",
                          "attrs": {
                            "type": "text",
                            "readOnly": true
                          }
                        },
                        {
                          "elementType": "button",
                          "name": "CopyButton",
                          "attrs": {
                            "text": "Copy Link"
                          }
                        },
                        {
                          "elementType": "select",
                          "name": "AccessLevel",
                          "children": [
                            {
                              "elementType": "option",
                              "attrs": {
                                "value": "view",
                                "text": "View Only"
                              }
                            },
                            {
                              "elementType": "option",
                              "attrs": {
                                "value": "edit",
                                "text": "Can Edit"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "id": "ui_header_component",
              "type": "component",
              "name": "HeaderComponent",
              "uidl": {
                "name": "HeaderComponent",
                "type": "component",
                "content": {
                  "elementType": "header",
                  "children": [
                    {
                      "elementType": "component",
                      "name": "Logo"
                    },
                    {
                      "elementType": "nav",
                      "name": "Navigation",
                      "children": [
                        {
                          "elementType": "link",
                          "attrs": {
                            "href": "/",
                            "text": "My Collection"
                          }
                        },
                        {
                          "elementType": "link",
                          "attrs": {
                            "href": "/store",
                            "text": "Store"
                          }
                        },
                        {
                          "elementType": "link",
                          "attrs": {
                            "href": "/settings",
                            "text": "Settings"
                          }
                        }
                      ]
                    },
                    {
                      "elementType": "component",
                      "name": "UserMenu",
                      "dependency": "ui_user_menu"
                    }
                  ]
                }
              }
            },
            {
              "id": "ui_shortcut_store",
              "type": "store",
              "name": "ShortcutStore",
              "uidl": {
                "name": "ShortcutStore",
                "type": "store",
                "state": {
                  "shortcuts": {},
                  "customShortcuts": {}
                },
                "actions": [
                  "registerShortcut",
                  "unregisterShortcut",
                  "updateShortcut",
                  "resetToDefaults"
                ]
              }
            },
            {
              "id": "ui_location_store",
              "type": "store",
              "name": "LocationStore",
              "uidl": {
                "name": "LocationStore",
                "type": "store",
                "state": {
                  "currentPath": "/",
                  "previousPath": null,
                  "queryParams": {}
                },
                "actions": [
                  "navigate",
                  "goBack",
                  "updateQueryParams"
                ]
              }
            },
            {
              "id": "ui_dark_mode_store",
              "type": "store",
              "name": "DarkModeStore",
              "uidl": {
                "name": "DarkModeStore",
                "type": "store",
                "state": {
                  "isDarkMode": false
                },
                "actions": [
                  "toggleDarkMode",
                  "setDarkMode"
                ]
              }
            }
          ],
          "logic": [
            {
              "id": "logic_flow_service",
              "type": "service",
              "name": "FlowService",
              "operations": [
                {
                  "name": "createFlow",
                  "input": ["userId", "flowData"],
                  "output": "flowId",
                  "actions": ["validateFlowData", "generateFlowId", "saveToDatabase", "indexFlow"]
                },
                {
                  "name": "readFlows",
                  "input": ["userId", "filters"],
                  "output": "flowList",
                  "actions": ["queryDatabase", "applyFilters", "sortResults", "paginate"]
                },
                {
                  "name": "updateFlow",
                  "input": ["flowId", "updates"],
                  "output": "success",
                  "actions": ["validateOwnership", "applyUpdates", "saveChanges", "updateIndex"]
                },
                {
                  "name": "deleteFlow",
                  "input": ["flowId"],
                  "output": "success",
                  "actions": ["validateOwnership", "softDelete", "cleanupResources"]
                }
              ]
            },
            {
              "id": "logic_validation_engine",
              "type": "engine",
              "name": "ValidationEngine",
              "operations": [
                {
                  "name": "validateFlowData",
                  "input": ["flowData"],
                  "output": "validationResult",
                  "actions": ["checkSchema", "validateNodes", "validateEdges", "checkCycles"]
                },
                {
                  "name": "validateUserInput",
                  "input": ["input", "schema"],
                  "output": "validationResult",
                  "actions": ["checkTypes", "validateConstraints", "sanitize"]
                }
              ]
            },
            {
              "id": "logic_export_service",
              "type": "service",
              "name": "ExportService",
              "operations": [
                {
                  "name": "exportFlow",
                  "input": ["flowId", "format"],
                  "output": "exportData",
                  "actions": ["loadFlow", "convertFormat", "sanitizeSecrets", "compress"]
                },
                {
                  "name": "importFlow",
                  "input": ["importData", "userId"],
                  "output": "flowId",
                  "actions": ["validateFormat", "parseData", "createFlow", "mapReferences"]
                }
              ]
            },
            {
              "id": "logic_cleanup_service",
              "type": "service",
              "name": "CleanupService",
              "operations": [
                {
                  "name": "cleanupExpiredSessions",
                  "actions": ["queryExpiredSessions", "deleteRecords", "freeResources"]
                },
                {
                  "name": "cleanupOrphanedFiles",
                  "actions": ["findOrphanedFiles", "deleteFromStorage", "updateDatabase"]
                }
              ]
            }
          ],
          "test": [
            {
              "id": "test_flow_creation",
              "type": "acceptance",
              "name": "FlowCreationTest",
              "gherkin": "Feature: Flow Creation\n  As a user\n  I want to create new flows\n  So that I can build language model applications\n\n  Scenario: Create a new flow successfully\n    Given I am authenticated as a user\n    And I am on the home page\n    When I click on \"New Flow\" button\n    And I enter \"My Test Flow\" as the flow name\n    And I add a ChatInput component\n    And I add an OpenAI component\n    And I connect the components\n    And I click \"Save\"\n    Then the flow should be saved successfully\n    And I should see \"Flow saved\" notification\n    And the flow should appear in my flow list\n\n  Scenario: Handle duplicate flow names\n    Given I have an existing flow named \"MyFlow\"\n    When I create a new flow with the same name\n    Then the system should auto-increment the name to \"MyFlow (1)\"\n    And save the flow with the new name"
            },
            {
              "id": "test_flow_sharing",
              "type": "acceptance",
              "name": "FlowSharingTest",
              "gherkin": "Feature: Flow Sharing\n  As a user\n  I want to share my flows\n  So that others can use them\n\n  Scenario: Generate share link\n    Given I have a flow\n    When I click the \"Share\" button\n    And select \"View Only\" access\n    Then a unique share link should be generated\n    And the link should provide read-only access\n\n  Scenario: Access shared flow\n    Given I have a share link for a flow\n    When I access the link\n    Then I should see the flow in read-only mode\n    And not be able to make changes"
            },
            {
              "id": "test_data_persistence",
              "type": "integration",
              "name": "DataPersistenceTest",
              "gherkin": "Feature: Data Persistence\n  As the system\n  I want to persist data reliably\n  So that user work is not lost\n\n  Scenario: Auto-save flow changes\n    Given I am editing a flow\n    When I make changes to the flow\n    Then the changes should be auto-saved\n    And persisted to the database\n    And recoverable after refresh\n\n  Scenario: Handle save conflicts\n    Given two users editing the same flow\n    When both try to save simultaneously\n    Then conflict should be detected\n    And users should be notified\n    And given options to resolve"
            }
          ]
        },
        "edges": [
          {
            "id": "flow_folder_flows",
            "type": "one_to_many",
            "source": "schema_folder",
            "target": "schema_flow",
            "label": "contains",
            "details": "Folder contains multiple flows"
          },
          {
            "id": "flow_runs",
            "type": "one_to_many",
            "source": "schema_flow",
            "target": "schema_flowrun",
            "label": "has",
            "details": "Flow has multiple execution runs"
          },
          {
            "id": "folder_hierarchy",
            "type": "self_reference",
            "source": "schema_folder",
            "target": "schema_folder",
            "label": "parent_child",
            "details": "Folders form hierarchical structure"
          },
          {
            "id": "flow_page_toolbar",
            "type": "contains",
            "source": "ui_flow_page",
            "target": "ui_node_toolbar",
            "label": "includes",
            "details": "Flow page includes node toolbar"
          },
          {
            "id": "home_flow_grid",
            "type": "contains",
            "source": "ui_home_page",
            "target": "ui_flow_grid",
            "label": "includes",
            "details": "Home page contains flow grid"
          },
          {
            "id": "flow_grid_cards",
            "type": "displays",
            "source": "ui_flow_grid",
            "target": "ui_flow_card",
            "label": "renders",
            "details": "Flow grid displays individual flow cards"
          },
          {
            "id": "flow_store_service",
            "type": "uses",
            "source": "ui_flow_store",
            "target": "logic_flow_service",
            "label": "calls",
            "details": "Flow store calls flow service for CRUD operations"
          },
          {
            "id": "export_service_flows",
            "type": "exports",
            "source": "logic_export_service",
            "target": "schema_flow",
            "label": "serializes",
            "details": "Export service serializes flows"
          },
          {
            "id": "test_flow_creation_validates",
            "type": "validates",
            "source": "test_flow_creation",
            "target": "logic_flow_service",
            "label": "tests",
            "details": "Tests flow creation functionality"
          },
          {
            "id": "test_sharing_validates",
            "type": "validates",
            "source": "test_flow_sharing",
            "target": "ui_share_modal",
            "label": "tests",
            "details": "Tests flow sharing feature"
          },
          {
            "id": "test_persistence_validates",
            "type": "validates",
            "source": "test_data_persistence",
            "target": "logic_cleanup_service",
            "label": "tests",
            "details": "Tests data persistence mechanisms"
          },
          {
            "id": "flow_service_schema",
            "type": "accesses",
            "source": "logic_flow_service",
            "target": "schema_flow",
            "label": "persists",
            "details": "Flow service persists flow data to database"
          },
          {
            "id": "home_flows_display",
            "type": "displays",
            "source": "ui_home_page",
            "target": "schema_flow",
            "label": "shows",
            "details": "Home page displays user flows"
          },
          {
            "id": "settings_apikeys",
            "type": "manages",
            "source": "ui_settings_page",
            "target": "schema_apikey",
            "label": "configures",
            "details": "Settings page manages API keys"
          },
          {
            "id": "flow_page_sidebar",
            "type": "contains",
            "source": "ui_flow_page",
            "target": "ui_sidebar_component",
            "label": "includes",
            "details": "Flow page includes sidebar component"
          },
          {
            "id": "home_header",
            "type": "contains",
            "source": "ui_home_page",
            "target": "ui_header_component",
            "label": "includes",
            "details": "Home page includes header component"
          },
          {
            "id": "folder_store_folders",
            "type": "manages",
            "source": "ui_folder_store",
            "target": "schema_folder",
            "label": "organizes",
            "details": "Folder store manages folder hierarchy"
          },
          {
            "id": "edit_modal_vertex",
            "type": "edits",
            "source": "ui_edit_node_modal",
            "target": "schema_vertex",
            "label": "configures",
            "details": "Edit modal configures vertex properties"
          },
          {
            "id": "settings_global_variables",
            "type": "manages",
            "source": "ui_settings_page",
            "target": "schema_global_variable",
            "label": "configures",
            "details": "Settings page manages global variables"
          },
          {
            "id": "cleanup_session_manager",
            "type": "maintains",
            "source": "logic_cleanup_service",
            "target": "logic_session_manager",
            "label": "cleans",
            "details": "Cleanup service maintains sessions"
          },
          {
            "id": "settings_api_keys_store",
            "type": "uses",
            "source": "ui_settings_page",
            "target": "ui_api_keys_store",
            "label": "utilizes",
            "details": "Settings page uses API keys store"
          },
          {
            "id": "settings_shortcut_store",
            "type": "uses",
            "source": "ui_settings_page",
            "target": "ui_shortcut_store",
            "label": "utilizes",
            "details": "Settings page uses shortcut store"
          },
          {
            "id": "settings_dark_mode_store",
            "type": "uses",
            "source": "ui_settings_page",
            "target": "ui_dark_mode_store",
            "label": "utilizes",
            "details": "Settings page uses dark mode store"
          }
        ]
      }
    },
    {
      "subsystem_id": "execution_engine_subsystem",
      "subsystem_name": "Graph Execution Engine Subsystem",
      "subsystem_description": "Flow execution, graph processing, component management, and runtime operations with support for cyclic graphs, vertex state management, and dynamic component loading",
      "subsystem_appgraph": {
        "nodes": {
          "schema": [
            {
              "id": "schema_vertex",
              "type": "entity",
              "name": "Vertex",
              "graphql_schema": "type Vertex {\n  id: ID!\n  display_name: String!\n  description: String\n  base_type: ComponentType!\n  inputs: [VertexInput!]!\n  outputs: [VertexOutput!]!\n  params: JSON\n  frozen: Boolean!\n  is_input: Boolean!\n  is_output: Boolean!\n  is_state: Boolean!\n  edges: [Edge!]! @relation(name: \"VertexEdges\")\n}",
              "attributes": {
                "primary_key": "id",
                "indexes": ["base_type"],
                "constraints": ["id_unique"]
              }
            },
            {
              "id": "schema_edge",
              "type": "entity",
              "name": "Edge",
              "graphql_schema": "type Edge {\n  id: ID!\n  source: Vertex! @relation(name: \"EdgeSource\")\n  target: Vertex! @relation(name: \"EdgeTarget\")\n  source_handle: String!\n  target_handle: String!\n  data: JSON\n}",
              "attributes": {
                "primary_key": "id",
                "indexes": ["source_id", "target_id"],
                "constraints": ["no_self_loop", "valid_handles"]
              }
            },
            {
              "id": "schema_component",
              "type": "entity",
              "name": "Component",
              "graphql_schema": "type Component {\n  id: ID!\n  display_name: String!\n  description: String!\n  icon: String\n  category: ComponentCategory!\n  inputs: [ComponentInput!]!\n  outputs: [ComponentOutput!]!\n  code: String!\n  template: JSON\n  documentation: String\n  beta: Boolean!\n  experimental: Boolean!\n}\n\nenum ComponentCategory {\n  INPUT_OUTPUT\n  TEXT_PROCESSING\n  AGENTS\n  CHAINS\n  DATA\n  EMBEDDINGS\n  LLMS\n  MEMORIES\n  TOOLS\n  RETRIEVERS\n  LOGIC\n  HELPERS\n  CUSTOM\n}",
              "attributes": {
                "primary_key": "id",
                "indexes": ["category", "display_name"],
                "constraints": ["display_name_unique"]
              }
            },
            {
              "id": "schema_transaction",
              "type": "entity",
              "name": "Transaction",
              "graphql_schema": "type Transaction {\n  id: ID!\n  flow_run: FlowRun!\n  transaction_id: String! @unique\n  status: TransactionStatus!\n  error: String\n  params: JSON\n  created_at: DateTime!\n  updated_at: DateTime!\n}\n\nenum TransactionStatus {\n  PENDING\n  IN_PROGRESS\n  COMPLETED\n  FAILED\n  ROLLED_BACK\n}",
              "attributes": {
                "primary_key": "id",
                "indexes": ["transaction_id", "flow_run_id"],
                "constraints": ["transaction_id_unique", "status_enum"]
              }
            }
          ],
          "interface": [
            {
              "id": "ui_sidebar_component",
              "type": "component",
              "name": "SidebarComponent",
              "uidl": {
                "name": "SidebarComponent",
                "type": "component",
                "content": {
                  "elementType": "aside",
                  "children": [
                    {
                      "elementType": "component",
                      "name": "ComponentList",
                      "dependency": "ui_component_list"
                    },
                    {
                      "elementType": "input",
                      "name": "SearchInput",
                      "attrs": {
                        "type": "search",
                        "placeholder": "Search components..."
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": "ui_types_store",
              "type": "store",
              "name": "TypesStore",
              "uidl": {
                "name": "TypesStore",
                "type": "store",
                "state": {
                  "components": {},
                  "templates": {},
                  "categories": []
                },
                "actions": [
                  "loadComponents",
                  "loadTemplates",
                  "getComponentByType",
                  "filterByCategory"
                ]
              }
            }
          ],
          "logic": [
            {
              "id": "logic_flow_execution",
              "type": "statechart",
              "name": "FlowExecutionEngine",
              "statechart": {
                "initial": "idle",
                "states": {
                  "idle": {
                    "on": {
                      "START_EXECUTION": {
                        "target": "preparing",
                        "actions": ["initializeExecution"]
                      }
                    }
                  },
                  "preparing": {
                    "invoke": {
                      "src": "prepareGraph",
                      "onDone": {
                        "target": "executing",
                        "actions": ["setExecutionQueue"]
                      },
                      "onError": {
                        "target": "error",
                        "actions": ["handlePreparationError"]
                      }
                    }
                  },
                  "executing": {
                    "initial": "processingVertex",
                    "states": {
                      "processingVertex": {
                        "invoke": {
                          "src": "executeVertex",
                          "onDone": [
                            {
                              "target": "checkingQueue",
                              "actions": ["updateResults"]
                            }
                          ],
                          "onError": {
                            "target": "#error",
                            "actions": ["handleExecutionError"]
                          }
                        }
                      },
                      "checkingQueue": {
                        "always": [
                          {
                            "target": "processingVertex",
                            "cond": "hasMoreVertices",
                            "actions": ["dequeueVertex"]
                          },
                          {
                            "target": "#completed"
                          }
                        ]
                      }
                    }
                  },
                  "completed": {
                    "type": "final",
                    "entry": ["saveResults", "notifyCompletion"]
                  },
                  "error": {
                    "type": "final",
                    "entry": ["logError", "notifyError"]
                  }
                }
              }
            },
            {
              "id": "logic_graph_engine",
              "type": "engine",
              "name": "GraphExecutionEngine",
              "operations": [
                {
                  "name": "prepareGraph",
                  "actions": ["validateGraph", "detectCycles", "buildExecutionQueue", "initializeState"]
                },
                {
                  "name": "executeVertex",
                  "actions": ["loadVertexData", "executeComponent", "cacheResults", "updateState"]
                },
                {
                  "name": "handleCycles",
                  "actions": ["detectCycleVertices", "setMaxIterations", "trackIterations"]
                }
              ]
            },
            {
              "id": "logic_component_loader",
              "type": "service",
              "name": "ComponentLoader",
              "operations": [
                {
                  "name": "loadComponent",
                  "input": ["componentType"],
                  "output": "componentInstance",
                  "actions": ["checkCache", "dynamicImport", "instantiate", "cacheInstance"]
                },
                {
                  "name": "registerComponent",
                  "input": ["componentDefinition"],
                  "actions": ["validateDefinition", "registerInRegistry", "updateTypeMap"]
                }
              ]
            },
            {
              "id": "logic_cache_manager",
              "type": "service",
              "name": "CacheManager",
              "operations": [
                {
                  "name": "get",
                  "input": ["key"],
                  "output": "value",
                  "actions": ["checkCache", "deserialize"]
                },
                {
                  "name": "set",
                  "input": ["key", "value", "ttl"],
                  "output": "success",
                  "actions": ["serialize", "storeInCache", "setExpiration"]
                },
                {
                  "name": "invalidate",
                  "input": ["pattern"],
                  "output": "success",
                  "actions": ["findMatchingKeys", "deleteFromCache"]
                }
              ]
            }
          ],
          "test": [
            {
              "id": "test_flow_execution",
              "type": "acceptance",
              "name": "FlowExecutionTest",
              "gherkin": "Feature: Flow Execution\n  As a user\n  I want to execute my flows\n  So that I can test my language model applications\n\n  Scenario: Execute a simple flow\n    Given I have a flow with ChatInput and ChatOutput\n    And the flow is properly connected\n    When I click the \"Run\" button\n    And I enter \"Hello\" in the chat input\n    Then the flow should execute successfully\n    And I should see the response in the output\n\n  Scenario: Handle execution errors\n    Given I have a flow with missing API keys\n    When I try to execute the flow\n    Then I should see an error message about missing credentials\n    And the execution should stop gracefully"
            },
            {
              "id": "test_component_loading",
              "type": "unit",
              "name": "ComponentLoadingTest",
              "gherkin": "Feature: Dynamic Component Loading\n  As the system\n  I want to load components dynamically\n  So that I can optimize performance\n\n  Scenario: Load component on first access\n    Given a component has not been loaded\n    When the component is accessed\n    Then it should be dynamically imported\n    And cached for future use\n\n  Scenario: Use cached component\n    Given a component has been previously loaded\n    When the component is accessed again\n    Then it should be retrieved from cache\n    And not re-imported"
            },
            {
              "id": "test_graph_cycles",
              "type": "unit",
              "name": "GraphCycleTest",
              "gherkin": "Feature: Graph Cycle Detection\n  As the graph engine\n  I want to detect and handle cycles\n  So that flows don't run infinitely\n\n  Scenario: Detect simple cycle\n    Given a graph with vertices A -> B -> C -> A\n    When the graph is prepared\n    Then is_cyclic should be true\n    And cycle vertices should be identified\n\n  Scenario: Execute cyclic graph with max iterations\n    Given a cyclic graph\n    And max_iterations is set to 5\n    When the graph is executed\n    Then it should stop after 5 iterations\n    And raise a \"Max iterations reached\" error"
            },
            {
              "id": "test_performance",
              "type": "performance",
              "name": "PerformanceTest",
              "gherkin": "Feature: System Performance\n  As the system\n  I want to maintain good performance\n  So that users have a responsive experience\n\n  Scenario: Load large flow quickly\n    Given a flow with 100+ components\n    When the flow is loaded\n    Then it should load within 3 seconds\n    And be interactive within 5 seconds\n\n  Scenario: Handle concurrent executions\n    Given 10 flows running simultaneously\n    When all flows are executing\n    Then system should remain responsive\n    And complete all executions successfully"
            }
          ]
        },
        "edges": [
          {
            "id": "vertex_edges",
            "type": "one_to_many",
            "source": "schema_vertex",
            "target": "schema_edge",
            "label": "connects",
            "details": "Vertices connected by edges"
          },
          {
            "id": "component_loader_registry",
            "type": "manages",
            "source": "logic_component_loader",
            "target": "schema_component",
            "label": "loads",
            "details": "Component loader manages component registry"
          },
          {
            "id": "graph_engine_vertex",
            "type": "processes",
            "source": "logic_graph_engine",
            "target": "schema_vertex",
            "label": "executes",
            "details": "Graph engine executes vertices"
          },
          {
            "id": "flow_execution_cache",
            "type": "uses",
            "source": "logic_flow_execution",
            "target": "logic_cache_manager",
            "label": "caches",
            "details": "Flow execution uses cache manager"
          },
          {
            "id": "test_execution_validates",
            "type": "validates",
            "source": "test_flow_execution",
            "target": "logic_flow_execution",
            "label": "tests",
            "details": "Tests flow execution engine"
          },
          {
            "id": "test_loading_validates",
            "type": "validates",
            "source": "test_component_loading",
            "target": "logic_component_loader",
            "label": "tests",
            "details": "Tests component loading system"
          },
          {
            "id": "test_cycles_validates",
            "type": "validates",
            "source": "test_graph_cycles",
            "target": "logic_graph_engine",
            "label": "tests",
            "details": "Tests cycle detection and handling"
          },
          {
            "id": "test_performance_validates",
            "type": "benchmarks",
            "source": "test_performance",
            "target": "logic_graph_engine",
            "label": "measures",
            "details": "Performance tests measure execution speed"
          },
          {
            "id": "transaction_flowrun",
            "type": "belongs_to",
            "source": "schema_transaction",
            "target": "schema_flowrun",
            "label": "tracks",
            "details": "Transaction tracks flow run execution"
          },
          {
            "id": "flow_store_types",
            "type": "uses",
            "source": "ui_flow_store",
            "target": "ui_types_store",
            "label": "references",
            "details": "Flow store references component types"
          }
        ]
      }
    },
    {
      "subsystem_id": "communication_subsystem",
      "subsystem_name": "Real-time Communication Subsystem",
      "subsystem_description": "WebSocket connections, server-sent events, messaging, and notifications providing real-time updates during flow execution and user interactions",
      "subsystem_appgraph": {
        "nodes": {
          "schema": [
            {
              "id": "schema_message",
              "type": "entity",
              "name": "Message",
              "graphql_schema": "type Message {\n  id: ID!\n  text: String!\n  sender: MessageSender!\n  sender_name: String!\n  session_id: String!\n  timestamp: DateTime!\n  flow: Flow @relation(name: \"FlowMessages\")\n  files: [String!]\n}\n\nenum MessageSender {\n  USER\n  MACHINE\n  AI\n  SYSTEM\n}",
              "attributes": {
                "primary_key": "id",
                "indexes": ["session_id", "flow_id"],
                "constraints": ["sender_enum"]
              }
            }
          ],
          "interface": [
            {
              "id": "ui_playground_page",
              "type": "page",
              "name": "PlaygroundPage",
              "uidl": {
                "name": "PlaygroundPage",
                "type": "page",
                "content": {
                  "elementType": "container",
                  "children": [
                    {
                      "elementType": "component",
                      "name": "ChatInterface",
                      "dependency": "ui_chat_interface"
                    },
                    {
                      "elementType": "component",
                      "name": "InputPanel",
                      "dependency": "ui_input_panel"
                    },
                    {
                      "elementType": "component",
                      "name": "OutputPanel",
                      "dependency": "ui_output_panel"
                    }
                  ]
                },
                "stateDefinitions": {
                  "messages": {
                    "type": "array",
                    "defaultValue": []
                  },
                  "sessionId": {
                    "type": "string",
                    "defaultValue": null
                  }
                }
              }
            },
            {
              "id": "ui_chat_interface",
              "type": "component",
              "name": "ChatInterface",
              "uidl": {
                "name": "ChatInterface",
                "type": "component",
                "content": {
                  "elementType": "container",
                  "children": [
                    {
                      "elementType": "list",
                      "name": "MessageList",
                      "children": {
                        "repeat": {
                          "dataSource": "messages",
                          "element": {
                            "elementType": "component",
                            "name": "MessageBubble",
                            "dependency": "ui_message_bubble"
                          }
                        }
                      }
                    },
                    {
                      "elementType": "form",
                      "name": "MessageInput",
                      "children": [
                        {
                          "elementType": "textarea",
                          "name": "MessageTextarea",
                          "attrs": {
                            "placeholder": "Type your message..."
                          }
                        },
                        {
                          "elementType": "button",
                          "name": "SendButton",
                          "attrs": {
                            "type": "submit",
                            "text": "Send"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "id": "ui_message_store",
              "type": "store",
              "name": "MessageStore",
              "uidl": {
                "name": "MessageStore",
                "type": "store",
                "state": {
                  "messages": [],
                  "sessions": {},
                  "currentSession": null
                },
                "actions": [
                  "addMessage",
                  "loadMessages",
                  "createSession",
                  "switchSession"
                ]
              }
            },
            {
              "id": "ui_global_store",
              "type": "store",
              "name": "GlobalStore",
              "uidl": {
                "name": "GlobalStore",
                "type": "store",
                "state": {
                  "notifications": [],
                  "theme": "light",
                  "shortcuts": {},
                  "isLoading": false
                },
                "actions": [
                  "addNotification",
                  "removeNotification",
                  "setTheme",
                  "setLoading"
                ]
              }
            }
          ],
          "logic": [
            {
              "id": "logic_websocket_handler",
              "type": "statechart",
              "name": "WebSocketHandler",
              "statechart": {
                "initial": "disconnected",
                "states": {
                  "disconnected": {
                    "on": {
                      "CONNECT": {
                        "target": "connecting"
                      }
                    }
                  },
                  "connecting": {
                    "invoke": {
                      "src": "establishWebSocketConnection",
                      "onDone": {
                        "target": "connected",
                        "actions": ["onConnectionEstablished"]
                      },
                      "onError": {
                        "target": "disconnected",
                        "actions": ["scheduleReconnect"]
                      }
                    }
                  },
                  "connected": {
                    "on": {
                      "MESSAGE_RECEIVED": {
                        "actions": ["processMessage"]
                      },
                      "SEND_MESSAGE": {
                        "actions": ["sendWebSocketMessage"]
                      },
                      "DISCONNECT": {
                        "target": "disconnecting"
                      },
                      "CONNECTION_LOST": {
                        "target": "reconnecting"
                      }
                    }
                  },
                  "reconnecting": {
                    "after": {
                      "RECONNECT_DELAY": {
                        "target": "connecting"
                      }
                    },
                    "on": {
                      "CANCEL_RECONNECT": {
                        "target": "disconnected"
                      }
                    }
                  },
                  "disconnecting": {
                    "invoke": {
                      "src": "closeWebSocketConnection",
                      "onDone": {
                        "target": "disconnected"
                      }
                    }
                  }
                }
              }
            },
            {
              "id": "logic_sse_handler",
              "type": "statechart",
              "name": "ServerSentEventsHandler",
              "statechart": {
                "initial": "closed",
                "states": {
                  "closed": {
                    "on": {
                      "OPEN": {
                        "target": "opening"
                      }
                    }
                  },
                  "opening": {
                    "invoke": {
                      "src": "establishSSEConnection",
                      "onDone": {
                        "target": "open"
                      },
                      "onError": {
                        "target": "closed"
                      }
                    }
                  },
                  "open": {
                    "on": {
                      "SEND_EVENT": {
                        "actions": ["writeEvent"]
                      },
                      "CLOSE": {
                        "target": "closing"
                      },
                      "CLIENT_DISCONNECT": {
                        "target": "closed"
                      }
                    }
                  },
                  "closing": {
                    "invoke": {
                      "src": "closeSSEConnection",
                      "onDone": {
                        "target": "closed"
                      }
                    }
                  }
                }
              }
            },
            {
              "id": "logic_notification_service",
              "type": "service",
              "name": "NotificationService",
              "operations": [
                {
                  "name": "sendNotification",
                  "input": ["userId", "notification"],
                  "actions": ["formatNotification", "queueForDelivery", "trackDelivery"]
                },
                {
                  "name": "markAsRead",
                  "input": ["notificationId"],
                  "actions": ["updateStatus", "updateReadCount"]
                }
              ]
            },
            {
              "id": "logic_event_manager",
              "type": "service",
              "name": "EventManager",
              "operations": [
                {
                  "name": "emit",
                  "input": ["eventName", "data"],
                  "actions": ["validateEvent", "notifyListeners", "logEvent"]
                },
                {
                  "name": "subscribe",
                  "input": ["eventName", "handler"],
                  "output": "subscriptionId",
                  "actions": ["registerHandler", "returnUnsubscribe"]
                }
              ]
            }
          ],
          "test": [
            {
              "id": "test_websocket_connection",
              "type": "integration",
              "name": "WebSocketConnectionTest",
              "gherkin": "Feature: WebSocket Communication\n  As the system\n  I want to maintain WebSocket connections\n  So that I can provide real-time updates\n\n  Scenario: Establish WebSocket connection\n    Given a client wants real-time updates\n    When the client connects to the WebSocket endpoint\n    Then a connection should be established\n    And the client should receive a connection confirmation\n\n  Scenario: Handle connection loss\n    Given an active WebSocket connection\n    When the connection is lost\n    Then the client should attempt to reconnect\n    And restore the session state upon reconnection"
            },
            {
              "id": "test_error_handling",
              "type": "unit",
              "name": "ErrorHandlingTest",
              "gherkin": "Feature: Error Handling\n  As the system\n  I want to handle errors gracefully\n  So that users have a good experience\n\n  Scenario: Handle component execution error\n    Given a component that throws an error\n    When the component is executed\n    Then the error should be caught\n    And logged with context\n    And a user-friendly message should be shown\n\n  Scenario: Handle network timeout\n    Given a slow network request\n    When the request times out\n    Then a timeout error should be raised\n    And the user should be notified\n    And given option to retry"
            }
          ]
        },
        "edges": [
          {
            "id": "playground_chat",
            "type": "contains",
            "source": "ui_playground_page",
            "target": "ui_chat_interface",
            "label": "includes",
            "details": "Playground page includes chat interface"
          },
          {
            "id": "websocket_messages",
            "type": "handles",
            "source": "logic_websocket_handler",
            "target": "ui_message_store",
            "label": "updates",
            "details": "WebSocket handler updates message store"
          },
          {
            "id": "sse_handler_notifications",
            "type": "sends",
            "source": "logic_sse_handler",
            "target": "logic_notification_service",
            "label": "delivers",
            "details": "SSE handler delivers notifications"
          },
          {
            "id": "global_store_notifications",
            "type": "manages",
            "source": "ui_global_store",
            "target": "logic_notification_service",
            "label": "displays",
            "details": "Global store displays notifications"
          },
          {
            "id": "test_websocket_validates",
            "type": "validates",
            "source": "test_websocket_connection",
            "target": "logic_websocket_handler",
            "label": "tests",
            "details": "Tests WebSocket functionality"
          },
          {
            "id": "test_error_validates",
            "type": "validates",
            "source": "test_error_handling",
            "target": "logic_event_manager",
            "label": "tests",
            "details": "Tests error handling mechanisms"
          },
          {
            "id": "playground_messages",
            "type": "displays",
            "source": "ui_playground_page",
            "target": "schema_message",
            "label": "shows",
            "details": "Playground displays chat messages"
          },
          {
            "id": "flow_messages",
            "type": "one_to_many",
            "source": "schema_flow",
            "target": "schema_message",
            "label": "generates",
            "details": "Flow generates messages during execution"
          },
          {
            "id": "auth_location",
            "type": "redirects",
            "source": "logic_auth_flow",
            "target": "ui_location_store",
            "label": "navigates",
            "details": "Auth flow triggers navigation"
          }
        ]
      }
    },
    {
      "subsystem_id": "marketplace_subsystem",
      "subsystem_name": "Template & Store Subsystem",
      "subsystem_description": "Template marketplace, component store, and reusable resources with external API integration, file upload capabilities, and telemetry tracking",
      "subsystem_appgraph": {
        "nodes": {
          "schema": [
            {
              "id": "schema_template",
              "type": "entity",
              "name": "Template",
              "graphql_schema": "type Template {\n  id: ID!\n  name: String!\n  description: String!\n  data: JSON!\n  category: String!\n  icon: String\n  gradient: String\n  is_public: Boolean!\n  created_at: DateTime!\n  updated_at: DateTime!\n}",
              "attributes": {
                "primary_key": "id",
                "indexes": ["name", "category"],
                "constraints": ["name_unique"]
              }
            }
          ],
          "interface": [
            {
              "id": "ui_store_page",
              "type": "page",
              "name": "StorePage",
              "uidl": {
                "name": "StorePage",
                "type": "page",
                "content": {
                  "elementType": "container",
                  "children": [
                    {
                      "elementType": "component",
                      "name": "StoreHeader",
                      "dependency": "ui_store_header"
                    },
                    {
                      "elementType": "component",
                      "name": "ComponentGrid",
                      "dependency": "ui_component_grid"
                    },
                    {
                      "elementType": "component",
                      "name": "SearchBar",
                      "dependency": "ui_search_bar"
                    }
                  ]
                }
              }
            },
            {
              "id": "ui_api_modal",
              "type": "modal",
              "name": "ApiModal",
              "uidl": {
                "name": "ApiModal",
                "type": "modal",
                "content": {
                  "elementType": "modal",
                  "children": [
                    {
                      "elementType": "tabs",
                      "name": "ApiTabs",
                      "children": [
                        {
                          "elementType": "tab",
                          "name": "CurlTab",
                          "attrs": {
                            "label": "cURL"
                          },
                          "children": [
                            {
                              "elementType": "codeblock",
                              "name": "CurlCode",
                              "attrs": {
                                "language": "bash"
                              }
                            }
                          ]
                        },
                        {
                          "elementType": "tab",
                          "name": "PythonTab",
                          "attrs": {
                            "label": "Python"
                          },
                          "children": [
                            {
                              "elementType": "codeblock",
                              "name": "PythonCode",
                              "attrs": {
                                "language": "python"
                              }
                            }
                          ]
                        },
                        {
                          "elementType": "tab",
                          "name": "JavascriptTab",
                          "attrs": {
                            "label": "JavaScript"
                          },
                          "children": [
                            {
                              "elementType": "codeblock",
                              "name": "JavascriptCode",
                              "attrs": {
                                "language": "javascript"
                              }
                            }
                          ]
                        },
                        {
                          "elementType": "tab",
                          "name": "TweaksTab",
                          "attrs": {
                            "label": "Tweaks"
                          },
                          "children": [
                            {
                              "elementType": "component",
                              "name": "TweaksEditor",
                              "dependency": "ui_tweaks_editor"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            }
          ],
          "logic": [
            {
              "id": "logic_template_service",
              "type": "service",
              "name": "TemplateService",
              "operations": [
                {
                  "name": "loadTemplates",
                  "output": "templateList",
                  "actions": ["queryTemplates", "filterByCategory", "sortByPopularity"]
                },
                {
                  "name": "instantiateTemplate",
                  "input": ["templateId", "userId"],
                  "output": "flowId",
                  "actions": ["loadTemplate", "cloneFlow", "assignToUser", "customizeDefaults"]
                }
              ]
            },
            {
              "id": "logic_api_handler",
              "type": "process",
              "name": "ApiRequestHandler",
              "process": {
                "steps": [
                  {
                    "id": "receive_request",
                    "name": "ReceiveRequest",
                    "actions": ["parseRequest", "extractHeaders"]
                  },
                  {
                    "id": "authenticate",
                    "name": "Authenticate",
                    "actions": ["validateApiKey", "checkPermissions"]
                  },
                  {
                    "id": "validate_input",
                    "name": "ValidateInput",
                    "actions": ["validateSchema", "sanitizeInput"]
                  },
                  {
                    "id": "process_request",
                    "name": "ProcessRequest",
                    "actions": ["routeToHandler", "executeBusinessLogic"]
                  },
                  {
                    "id": "send_response",
                    "name": "SendResponse",
                    "actions": ["formatResponse", "setHeaders", "sendData"]
                  }
                ]
              }
            },
            {
              "id": "logic_file_upload",
              "type": "process",
              "name": "FileUploadProcess",
              "process": {
                "steps": [
                  {
                    "id": "validate_file",
                    "name": "ValidateFile",
                    "actions": ["checkFileSize", "checkFileType", "scanForVirus"]
                  },
                  {
                    "id": "upload_to_storage",
                    "name": "UploadToStorage",
                    "actions": ["generateUniqueKey", "uploadToS3", "updateProgress"]
                  },
                  {
                    "id": "process_file",
                    "name": "ProcessFile",
                    "actions": ["extractMetadata", "generateThumbnail", "indexContent"]
                  },
                  {
                    "id": "update_database",
                    "name": "UpdateDatabase",
                    "actions": ["saveFileRecord", "updateUserQuota", "notifyUser"]
                  }
                ],
                "transitions": [
                  {
                    "from": "validate_file",
                    "to": "upload_to_storage",
                    "condition": "isValid"
                  },
                  {
                    "from": "upload_to_storage",
                    "to": "process_file",
                    "condition": "uploadSuccessful"
                  },
                  {
                    "from": "process_file",
                    "to": "update_database"
                  }
                ]
              }
            },
            {
              "id": "logic_telemetry_service",
              "type": "service",
              "name": "TelemetryService",
              "operations": [
                {
                  "name": "trackEvent",
                  "input": ["eventName", "properties"],
                  "actions": ["enrichData", "queueEvent", "batchSend"]
                },
                {
                  "name": "trackError",
                  "input": ["error", "context"],
                  "actions": ["captureStackTrace", "enrichContext", "sendToMonitoring"]
                }
              ]
            }
          ],
          "test": [
            {
              "id": "test_template_instantiation",
              "type": "acceptance",
              "name": "TemplateInstantiationTest",
              "gherkin": "Feature: Template Usage\n  As a user\n  I want to use templates\n  So that I can quickly create flows\n\n  Scenario: Create flow from template\n    Given I am on the templates page\n    When I select the \"Basic Prompting\" template\n    And click \"Use Template\"\n    Then a new flow should be created\n    And it should contain the template components\n    And be ready for customization"
            },
            {
              "id": "test_api_integration",
              "type": "integration",
              "name": "ApiIntegrationTest",
              "gherkin": "Feature: API Integration\n  As a developer\n  I want to access flows via API\n  So that I can integrate with external systems\n\n  Scenario: Execute flow via API\n    Given I have a valid API key\n    And I have a published flow with endpoint \"my-flow\"\n    When I send a POST request to \"/api/v1/run/my-flow\"\n    With valid input data\n    Then I should receive a 200 response\n    And the response should contain the flow output\n\n  Scenario: API authentication failure\n    Given I have an invalid API key\n    When I send a request to any API endpoint\n    Then I should receive a 401 Unauthorized response"
            },
            {
              "id": "test_file_upload",
              "type": "integration",
              "name": "FileUploadTest",
              "gherkin": "Feature: File Upload\n  As a user\n  I want to upload files\n  So that I can use them in my flows\n\n  Scenario: Upload valid file\n    Given I have a PDF file under 10MB\n    When I upload the file\n    Then the file should be accepted\n    And stored in the system\n    And associated with my account\n\n  Scenario: Reject oversized file\n    Given I have a file larger than 10MB\n    When I try to upload the file\n    Then the upload should be rejected\n    And I should see an error message about file size"
            }
          ]
        },
        "edges": [
          {
            "id": "template_service_templates",
            "type": "manages",
            "source": "logic_template_service",
            "target": "schema_template",
            "label": "provides",
            "details": "Template service provides templates"
          },
          {
            "id": "store_page_templates",
            "type": "displays",
            "source": "ui_store_page",
            "target": "schema_template",
            "label": "shows",
            "details": "Store page displays templates"
          },
          {
            "id": "api_modal_generates",
            "type": "generates_code",
            "source": "ui_api_modal",
            "target": "schema_flow",
            "label": "exports",
            "details": "API modal generates code for flow"
          },
          {
            "id": "telemetry_events",
            "type": "tracks",
            "source": "logic_telemetry_service",
            "target": "logic_event_manager",
            "label": "monitors",
            "details": "Telemetry tracks system events"
          },
          {
            "id": "test_template_validates",
            "type": "validates",
            "source": "test_template_instantiation",
            "target": "logic_template_service",
            "label": "verifies",
            "details": "Tests template functionality"
          },
          {
            "id": "test_api_validates",
            "type": "validates",
            "source": "test_api_integration",
            "target": "logic_api_handler",
            "label": "tests",
            "details": "Tests API integration"
          },
          {
            "id": "test_upload_validates",
            "type": "validates",
            "source": "test_file_upload",
            "target": "logic_file_upload",
            "label": "tests",
            "details": "Tests file upload process"
          },
          {
            "id": "api_handler_validation",
            "type": "uses",
            "source": "logic_api_handler",
            "target": "logic_validation_engine",
            "label": "validates",
            "details": "API handler uses validation engine"
          },
          {
            "id": "rate_limiter_api",
            "type": "protects",
            "source": "logic_rate_limiter",
            "target": "logic_api_handler",
            "label": "limits",
            "details": "Rate limiter protects API endpoints"
          },
          {
            "id": "file_upload_store",
            "type": "uploads_to",
            "source": "logic_file_upload",
            "target": "schema_store",
            "label": "stores",
            "details": "File upload process stores files in user store"
          }
        ]
      }
    }
  ],
  "interfaces": [
    {
      "interface_id": "auth_flow_interface",
      "source_subsystem_id": "auth_subsystem",
      "target_subsystem_id": "flow_management_subsystem",
      "data_flow": {
        "apis": [
          {
            "name": "getUserFlows",
            "description": "Retrieve flows for authenticated user",
            "request": {"userId": "string", "authToken": "string"},
            "response": {"flows": "Flow[]"}
          },
          {
            "name": "validateFlowAccess",
            "description": "Check user permissions for flow operations",
            "request": {"userId": "string", "flowId": "string", "operation": "string"},
            "response": {"allowed": "boolean"}
          }
        ],
        "events": ["USER_AUTHENTICATED", "USER_LOGGED_OUT", "SESSION_EXPIRED"],
        "data_types": {
          "User": "Complete user profile with authentication status",
          "AuthToken": "JWT token with expiration and refresh capabilities",
          "Flow": "Flow metadata with ownership and permission info"
        }
      }
    },
    {
      "interface_id": "flow_execution_interface",
      "source_subsystem_id": "flow_management_subsystem",
      "target_subsystem_id": "execution_engine_subsystem",
      "data_flow": {
        "apis": [
          {
            "name": "executeFlow",
            "description": "Submit flow for execution",
            "request": {"flowData": "JSON", "inputs": "any", "userId": "string"},
            "response": {"executionId": "string", "status": "string"}
          },
          {
            "name": "getExecutionStatus",
            "description": "Check execution progress",
            "request": {"executionId": "string"},
            "response": {"status": "string", "results": "any", "progress": "number"}
          }
        ],
        "events": ["FLOW_EXECUTION_STARTED", "VERTEX_EXECUTED", "FLOW_EXECUTION_COMPLETED", "FLOW_EXECUTION_ERROR"],
        "data_types": {
          "FlowData": "Complete flow definition with nodes and edges",
          "ExecutionResult": "Flow execution output with artifacts and logs",
          "ExecutionStatus": "Current execution state with progress information"
        }
      }
    },
    {
      "interface_id": "execution_communication_interface",
      "source_subsystem_id": "execution_engine_subsystem",
      "target_subsystem_id": "communication_subsystem",
      "data_flow": {
        "apis": [
          {
            "name": "sendExecutionUpdate",
            "description": "Send real-time execution updates",
            "request": {"sessionId": "string", "update": "ExecutionUpdate"},
            "response": {"delivered": "boolean"}
          },
          {
            "name": "broadcastMessage",
            "description": "Broadcast message to connected clients",
            "request": {"message": "any", "channels": "string[]"},
            "response": {"sent": "boolean", "recipients": "number"}
          }
        ],
        "events": ["EXECUTION_UPDATE", "STREAM_OUTPUT", "ERROR_OCCURRED", "VERTEX_COMPLETED"],
        "data_types": {
          "ExecutionUpdate": "Real-time execution progress with vertex status",
          "StreamOutput": "Streaming data from executing components",
          "ErrorInfo": "Detailed error information with context"
        }
      }
    },
    {
      "interface_id": "template_flow_interface",
      "source_subsystem_id": "marketplace_subsystem",
      "target_subsystem_id": "flow_management_subsystem",
      "data_flow": {
        "apis": [
          {
            "name": "instantiateTemplate",
            "description": "Create flow from template",
            "request": {"templateId": "string", "userId": "string", "customizations": "JSON"},
            "response": {"flowId": "string", "success": "boolean"}
          },
          {
            "name": "publishFlowAsTemplate",
            "description": "Share flow as template",
            "request": {"flowId": "string", "metadata": "TemplateMetadata"},
            "response": {"templateId": "string", "published": "boolean"}
          }
        ],
        "events": ["TEMPLATE_INSTANTIATED", "FLOW_PUBLISHED"],
        "data_types": {
          "Template": "Template definition with metadata and flow data",
          "TemplateMetadata": "Template information including category and description",
          "Customization": "User-specific modifications to template defaults"
        }
      }
    },
    {
      "interface_id": "auth_api_interface",
      "source_subsystem_id": "auth_subsystem",
      "target_subsystem_id": "marketplace_subsystem",
      "data_flow": {
        "apis": [
          {
            "name": "validateApiKey",
            "description": "Validate API key for external access",
            "request": {"apiKey": "string", "resource": "string"},
            "response": {"valid": "boolean", "userId": "string", "permissions": "string[]"}
          },
          {
            "name": "rateLimitCheck",
            "description": "Check rate limits for API usage",
            "request": {"userId": "string", "endpoint": "string"},
            "response": {"allowed": "boolean", "remaining": "number", "resetTime": "DateTime"}
          }
        ],
        "events": ["API_KEY_VALIDATED", "RATE_LIMIT_EXCEEDED"],
        "data_types": {
          "ApiKey": "API key with associated permissions and usage tracking",
          "RateLimit": "Rate limiting information with quotas and reset times",
          "Permission": "Granular permission with resource and action scope"
        }
      }
    },
{
      "interface_id": "rbac_auth_interface",
      "source_subsystem_id": "rbac_security_subsystem",
      "target_subsystem_id": "auth_subsystem",
      "data_flow": {
        "apis": [
          "POST /rbac/validate-permissions",
          "GET /rbac/user-roles/:user_id",
          "POST /rbac/check-resource-access"
        ],
        "data_exchange": [
          "User permission sets",
          "Role assignment data",
          "Authorization decisions"
        ],
        "security": "Secure internal service communication with mutual TLS"
      }
    },
    {
      "interface_id": "rbac_flow_interface",
      "source_subsystem_id": "rbac_security_subsystem",
      "target_subsystem_id": "flow_management_subsystem",
      "data_flow": {
        "apis": [
          "POST /rbac/check-flow-permission",
          "POST /rbac/check-component-access",
          "GET /rbac/workspace-permissions/:workspace_id"
        ],
        "data_exchange": [
          "Flow operation permissions",
          "Component access rights",
          "Workspace-level authorizations"
        ]
      }
    },
    {
      "interface_id": "audit_all_subsystems",
      "source_subsystem_id": "rbac_security_subsystem",
      "target_subsystem_id": "all_subsystems",
      "data_flow": {
        "apis": [
          "POST /audit/log-action",
          "GET /audit/compliance-report",
          "POST /audit/security-event"
        ],
        "data_exchange": [
          "Comprehensive audit events from all subsystems",
          "Security incident reports",
          "Compliance data aggregation"
        ]
      }
    }
  ],
  "cross_subsystem_edges": [
    {
      "id": "edge_auth_rbac_authorization",
      "type": "depends_on",
      "source": "logic_auth_flow",
      "target": "logic_rbac_authorization",
      "source_subsystem": "auth_subsystem",
      "target_subsystem": "rbac_security_subsystem",
      "label": "loads_user_permissions",
      "rbac_status": "new",
      "color": "#FFE66D",
      "details": "Authentication service loads complete user permission set via RBAC authorization engine after successful login"
    },
    {
      "id": "edge_workspace_user_assignment",
      "type": "manages",
      "source": "schema_workspace",
      "target": "schema_user",
      "source_subsystem": "rbac_security_subsystem",
      "target_subsystem": "auth_subsystem",
      "label": "manages_workspace_membership",
      "rbac_status": "new",
      "color": "#FFE66D",
      "details": "Workspace entity manages user membership and role assignments with proper inheritance"
    },
    {
      "id": "edge_flow_rbac_check",
      "type": "validates_with",
      "source": "logic_flow_service",
      "target": "logic_rbac_authorization",
      "source_subsystem": "flow_management_subsystem",
      "target_subsystem": "rbac_security_subsystem",
      "label": "validates_flow_permissions",
      "rbac_status": "new",
      "color": "#FFE66D",
      "details": "All flow operations (create, update, delete, execute) validate permissions through RBAC before execution"
    },
    {
      "id": "edge_execution_rbac_check",
      "type": "validates_with",
      "source": "logic_flow_execution",
      "target": "logic_rbac_authorization",
      "source_subsystem": "execution_monitoring_subsystem",
      "target_subsystem": "rbac_security_subsystem",
      "label": "validates_execution_permissions",
      "rbac_status": "new",
      "color": "#FFE66D",
      "details": "Flow execution engine validates runtime permissions for environment and resource access before each execution"
    },
    {
      "id": "edge_api_rbac_validation",
      "type": "validates_with",
      "source": "logic_api_handler",
      "target": "logic_rbac_authorization",
      "source_subsystem": "communication_subsystem",
      "target_subsystem": "rbac_security_subsystem",
      "label": "validates_api_permissions",
      "rbac_status": "new",
      "color": "#FFE66D",
      "details": "API request handler validates endpoint permissions and resource access through RBAC for every API call"
    },
    {
      "id": "edge_template_rbac_check",
      "type": "validates_with",
      "source": "logic_template_service",
      "target": "logic_rbac_authorization",
      "source_subsystem": "marketplace_subsystem",
      "target_subsystem": "rbac_security_subsystem",
      "label": "validates_template_permissions",
      "rbac_status": "new",
      "color": "#FFE66D",
      "details": "Template service validates permissions for template access and modifications"
    },
    {
      "id": "edge_audit_all_subsystems",
      "type": "monitors",
      "source": "logic_audit_logging",
      "target": "all_subsystems",
      "source_subsystem": "rbac_security_subsystem",
      "target_subsystem": "all",
      "label": "comprehensive_audit_trail",
      "rbac_status": "new",
      "color": "#FFE66D",
      "details": "Audit logging service captures security events and compliance data from all subsystems for comprehensive monitoring"
    },
    {
      "id": "cross_user_flows",
      "type": "one_to_many",
      "source": "schema_user",
      "target": "schema_flow",
      "source_subsystem": "auth_subsystem",
      "target_subsystem": "flow_management_subsystem",
      "label": "owns",
      "details": "User owns multiple flows"
    },
    {
      "id": "cross_user_folders",
      "type": "one_to_many",
      "source": "schema_user",
      "target": "schema_folder",
      "source_subsystem": "auth_subsystem",
      "target_subsystem": "flow_management_subsystem",
      "label": "owns",
      "details": "User owns multiple folders"
    },
    {
      "id": "cross_user_variables",
      "type": "one_to_many",
      "source": "schema_user",
      "target": "schema_variable",
      "source_subsystem": "auth_subsystem",
      "target_subsystem": "flow_management_subsystem",
      "label": "owns",
      "details": "User owns multiple variables"
    },
    {
      "id": "cross_user_stores",
      "type": "one_to_many",
      "source": "schema_user",
      "target": "schema_store",
      "source_subsystem": "auth_subsystem",
      "target_subsystem": "flow_management_subsystem",
      "label": "owns",
      "details": "User owns multiple stores"
    },
    {
      "id": "cross_flow_execution_trigger",
      "type": "triggers",
      "source": "ui_flow_page",
      "target": "logic_flow_execution",
      "source_subsystem": "flow_management_subsystem",
      "target_subsystem": "execution_engine_subsystem",
      "label": "starts",
      "details": "Flow page triggers flow execution engine"
    },
    {
      "id": "cross_execution_notification",
      "type": "handles",
      "source": "logic_websocket_handler",
      "target": "ui_message_store",
      "source_subsystem": "communication_subsystem",
      "target_subsystem": "communication_subsystem",
      "label": "updates",
      "details": "WebSocket handler updates message store"
    }
  ],
  "implementation_strategy": {
    "overview": "Phased implementation approach for enterprise RBAC integration with minimal disruption to existing functionality",
    "phases": [
      {
        "phase": 1,
        "name": "Core RBAC Infrastructure",
        "description": "Implement foundational RBAC components and basic permission checking",
        "duration": "6-8 weeks",
        "priority": "Critical",
        "components": [
          "RBAC schema implementation (Role, Permission, RoleAssignment)",
          "Basic authorization engine with caching",
          "Role management APIs and basic UI",
          "Database migrations and data seeding"
        ]
      },
      {
        "phase": 2,
        "name": "UI Integration & Permission Enforcement",
        "description": "Complete UI integration and enforce permissions across all operations",
        "duration": "8-10 weeks",
        "priority": "High",
        "components": [
          "RBAC management dashboard",
          "Permission validation in all CRUD operations",
          "Enhanced login/settings with RBAC",
          "Component-level permission checking"
        ]
      },
      {
        "phase": 3,
        "name": "Advanced Features & Workspaces",
        "description": "Implement workspace isolation, groups, and advanced RBAC features",
        "duration": "6-8 weeks",
        "priority": "Medium",
        "components": [
          "Workspace implementation with isolation",
          "User groups and bulk role management",
          "Advanced permission scoping",
          "Resource-level permissions"
        ]
      },
      {
        "phase": 4,
        "name": "Enterprise & Compliance",
        "description": "Complete enterprise features, audit logging, and compliance requirements",
        "duration": "4-6 weeks",
        "priority": "Medium",
        "components": [
          "Comprehensive audit logging",
          "SSO integration with role mapping",
          "Compliance reporting (SOC2, GDPR)",
          "Advanced security features"
        ]
      }
    ],
    "rollback_strategy": "Feature flags enable gradual rollout with ability to disable RBAC enforcement while maintaining data integrity",
    "testing_approach": "Comprehensive test suite covering permission enforcement, audit trails, and multi-tenant isolation",
    "performance_requirements": "Sub-10ms permission checks, 99.9% uptime for authorization service, horizontal scaling support"
  }
}